[{"id": "1406.1133", "submitter": "Jos\\'e Marinho", "authors": "Jos\\'e Marinho, Stefan M. Petters", "title": "Timing Analysis for DAG-based and GFP Scheduled Tasks", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Modern embedded systems have made the transition from single-core to\nmulti-core architectures, providing performance improvement via parallelism\nrather than higher clock frequencies. DAGs are considered among the most\ngeneric task models in the real-time domain and are well suited to exploit this\nparallelism. In this paper we provide a schedulability test using response-time\nanalysis exploiting exploring and bounding the self interference of a DAG task.\nAdditionally we bound the interference a high priority task has on lower\npriority ones.\n", "versions": [{"version": "v1", "created": "Wed, 4 Jun 2014 18:18:37 GMT"}], "update_date": "2014-06-05", "authors_parsed": [["Marinho", "Jos\u00e9", ""], ["Petters", "Stefan M.", ""]]}, {"id": "1406.5569", "submitter": "Ashkan Rahimian", "authors": "Ashkan Rahimian, Raha Ziarati, Stere Preda, Mourad Debbabi", "title": "On the Reverse Engineering of the Citadel Botnet", "comments": "10 pages, 17 figures. This is an updated / edited version of a paper\n  appeared in FPS 2013", "journal-ref": "LNCS 8352, 2014, pp 408-425", "doi": "10.1007/978-3-319-05302-8_25", "report-no": null, "categories": "cs.CR cs.NI cs.OS cs.SE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Citadel is an advanced information-stealing malware which targets financial\ninformation. This malware poses a real threat against the confidentiality and\nintegrity of personal and business data. A joint operation was recently\nconducted by the FBI and the Microsoft Digital Crimes Unit in order to take\ndown Citadel command-and-control servers. The operation caused some disruption\nin the botnet but has not stopped it completely. Due to the complex structure\nand advanced anti-reverse engineering techniques, the Citadel malware analysis\nprocess is both challenging and time-consuming. This allows cyber criminals to\ncarry on with their attacks while the analysis is still in progress. In this\npaper, we present the results of the Citadel reverse engineering and provide\nadditional insight into the functionality, inner workings, and open source\ncomponents of the malware. In order to accelerate the reverse engineering\nprocess, we propose a clone-based analysis methodology. Citadel is an offspring\nof a previously analyzed malware called Zeus; thus, using the former as a\nreference, we can measure and quantify the similarities and differences of the\nnew variant. Two types of code analysis techniques are provided in the\nmethodology, namely assembly to source code matching and binary clone\ndetection. The methodology can help reduce the number of functions requiring\nmanual analysis. The analysis results prove that the approach is promising in\nCitadel malware analysis. Furthermore, the same approach is applicable to\nsimilar malware analysis scenarios.\n", "versions": [{"version": "v1", "created": "Sat, 21 Jun 2014 02:04:56 GMT"}], "update_date": "2014-06-24", "authors_parsed": [["Rahimian", "Ashkan", ""], ["Ziarati", "Raha", ""], ["Preda", "Stere", ""], ["Debbabi", "Mourad", ""]]}, {"id": "1406.6037", "submitter": "Sreepathi Pai", "authors": "Sreepathi Pai, R. Govindarajan, Matthew J. Thazhuthaveetil", "title": "Preemptive Thread Block Scheduling with Online Structural Runtime\n  Prediction for Concurrent GPGPU Kernels", "comments": "14 pages, full pre-review version of PACT 2014 poster", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.AR cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Recent NVIDIA Graphics Processing Units (GPUs) can execute multiple kernels\nconcurrently. On these GPUs, the thread block scheduler (TBS) uses the FIFO\npolicy to schedule their thread blocks. We show that FIFO leaves performance to\nchance, resulting in significant loss of performance and fairness. To improve\nperformance and fairness, we propose use of the preemptive Shortest Remaining\nTime First (SRTF) policy instead. Although SRTF requires an estimate of runtime\nof GPU kernels, we show that such an estimate of the runtime can be easily\nobtained using online profiling and exploiting a simple observation on GPU\nkernels' grid structure. Specifically, we propose a novel Structural Runtime\nPredictor. Using a simple Staircase model of GPU kernel execution, we show that\nthe runtime of a kernel can be predicted by profiling only the first few thread\nblocks. We evaluate an online predictor based on this model on benchmarks from\nERCBench, and find that it can estimate the actual runtime reasonably well\nafter the execution of only a single thread block. Next, we design a thread\nblock scheduler that is both concurrent kernel-aware and uses this predictor.\nWe implement the SRTF policy and evaluate it on two-program workloads from\nERCBench. SRTF improves STP by 1.18x and ANTT by 2.25x over FIFO. When compared\nto MPMax, a state-of-the-art resource allocation policy for concurrent kernels,\nSRTF improves STP by 1.16x and ANTT by 1.3x. To improve fairness, we also\npropose SRTF/Adaptive which controls resource usage of concurrently executing\nkernels to maximize fairness. SRTF/Adaptive improves STP by 1.12x, ANTT by\n2.23x and Fairness by 2.95x compared to FIFO. Overall, our implementation of\nSRTF achieves system throughput to within 12.64% of Shortest Job First (SJF, an\noracle optimal scheduling policy), bridging 49% of the gap between FIFO and\nSJF.\n", "versions": [{"version": "v1", "created": "Mon, 23 Jun 2014 19:44:03 GMT"}], "update_date": "2014-06-25", "authors_parsed": [["Pai", "Sreepathi", ""], ["Govindarajan", "R.", ""], ["Thazhuthaveetil", "Matthew J.", ""]]}]