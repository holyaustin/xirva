[{"id": "1607.07763", "submitter": "Eric Kerrigan", "authors": "Mason Thammawichai and Eric C. Kerrigan", "title": "Energy-Efficient Real-Time Scheduling for Two-Type Heterogeneous\n  Multiprocessors", "comments": null, "journal-ref": "Real-Time Systems, 2017", "doi": "10.1007/s11241-017-9291-6", "report-no": null, "categories": "cs.DC cs.OS cs.SY math.OC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We propose three novel mathematical optimization formulations that solve the\nsame two-type heterogeneous multiprocessor scheduling problem for a real-time\ntaskset with hard constraints. Our formulations are based on a global\nscheduling scheme and a fluid model. The first formulation is a mixed-integer\nnonlinear program, since the scheduling problem is intuitively considered as an\nassignment problem. However, by changing the scheduling problem to first\ndetermine a task workload partition and then to find the execution order of all\ntasks, the computation time can be significantly reduced. Specifically, the\nworkload partitioning problem can be formulated as a continuous nonlinear\nprogram for a system with continuous operating frequency, and as a continuous\nlinear program for a practical system with a discrete speed level set. The task\nordering problem can be solved by an algorithm with a complexity that is linear\nin the total number of tasks. The work is evaluated against existing global\nenergy/feasibility optimal workload allocation formulations. The results\nillustrate that our algorithms are both feasibility optimal and energy optimal\nfor both implicit and constrained deadline tasksets. Specifically, our\nalgorithm can achieve up to 40% energy saving for some simulated tasksets with\nconstrained deadlines. The benefit of our formulation compared with existing\nwork is that our algorithms can solve a more general class of scheduling\nproblems due to incorporating a scheduling dynamic model in the formulations\nand allowing for a time-varying speed profile. Moreover, our algorithms can be\napplied to both online and offline scheduling schemes.\n", "versions": [{"version": "v1", "created": "Fri, 15 Jul 2016 14:52:57 GMT"}], "update_date": "2017-10-13", "authors_parsed": [["Thammawichai", "Mason", ""], ["Kerrigan", "Eric C.", ""]]}, {"id": "1607.07995", "submitter": "Jiajun Cao", "authors": "Jiajun Cao, Kapil Arya, Rohan Garg, Shawn Matott, Dhabaleswar K.\n  Panda, Hari Subramoni, J\\'er\\^ome Vienne, Gene Cooperman", "title": "System-level Scalable Checkpoint-Restart for Petascale Computing", "comments": "18 pages, 5 figures, to be published in ICPADS 2016", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Fault tolerance for the upcoming exascale generation has long been an area of\nactive research. One of the components of a fault tolerance strategy is\ncheckpointing. Petascale-level checkpointing is demonstrated through a new\nmechanism for virtualization of the InfiniBand UD (unreliable datagram) mode,\nand for updating the remote address on each UD-based send, due to lack of a\nfixed peer. Note that InfiniBand UD is required to support modern MPI\nimplementations. An extrapolation from the current results to future SSD-based\nstorage systems provides evidence that the current approach will remain\npractical in the exascale generation. This transparent checkpointing approach\nis evaluated using a framework of the DMTCP checkpointing package. Results are\nshown for HPCG (linear algebra), NAMD (molecular dynamics), and the NAS NPB\nbenchmarks. In tests up to 32,752 MPI processes on 32,752 CPU cores,\ncheckpointing of a computation with a 38 TB memory footprint in 11 minutes is\ndemonstrated. Runtime overhead is reduced to less than 1%. The approach is also\nevaluated across three widely used MPI implementations.\n", "versions": [{"version": "v1", "created": "Wed, 27 Jul 2016 07:46:13 GMT"}, {"version": "v2", "created": "Sat, 24 Sep 2016 01:49:03 GMT"}], "update_date": "2016-09-27", "authors_parsed": [["Cao", "Jiajun", ""], ["Arya", "Kapil", ""], ["Garg", "Rohan", ""], ["Matott", "Shawn", ""], ["Panda", "Dhabaleswar K.", ""], ["Subramoni", "Hari", ""], ["Vienne", "J\u00e9r\u00f4me", ""], ["Cooperman", "Gene", ""]]}]