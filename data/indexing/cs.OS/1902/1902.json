[{"id": "1902.00660", "submitter": "James Larus", "authors": "Nachshon Cohen, David T. Aksun, Hillel Avni, James R. Larus", "title": "Fine-Grain Checkpointing with In-Cache-Line Logging", "comments": "In 2019 Architectural Support for Programming Languages and Operating\n  Systems (ASPLOS 19), April 13, 2019, Providence, RI, USA", "journal-ref": null, "doi": "10.1145/3297858.3304046", "report-no": null, "categories": "cs.OS cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Non-Volatile Memory offers the possibility of implementing high-performance,\ndurable data structures. However, achieving performance comparable to\nwell-designed data structures in non-persistent (transient) memory is\ndifficult, primarily because of the cost of ensuring the order in which memory\nwrites reach NVM. Often, this requires flushing data to NVM and waiting a full\nmemory round-trip time.\n  In this paper, we introduce two new techniques: Fine-Grained Checkpointing,\nwhich ensures a consistent, quickly recoverable data structure in NVM after a\nsystem failure, and In-Cache-Line Logging, an undo-logging technique that\nenables recovery of earlier state without requiring cache-line flushes in the\nnormal case. We implemented these techniques in the Masstree data structure,\nmaking it persistent and demonstrating the ease of applying them to a highly\noptimized system and their low (5.9-15.4\\%) runtime overhead cost.\n", "versions": [{"version": "v1", "created": "Sat, 2 Feb 2019 07:22:25 GMT"}], "update_date": "2019-02-05", "authors_parsed": [["Cohen", "Nachshon", ""], ["Aksun", "David T.", ""], ["Avni", "Hillel", ""], ["Larus", "James R.", ""]]}, {"id": "1902.03383", "submitter": "Johann Schleier-Smith", "authors": "Eric Jonas, Johann Schleier-Smith, Vikram Sreekanti, Chia-Che Tsai,\n  Anurag Khandelwal, Qifan Pu, Vaishaal Shankar, Joao Carreira, Karl Krauth,\n  Neeraja Yadwadkar, Joseph E. Gonzalez, Raluca Ada Popa, Ion Stoica, David A.\n  Patterson", "title": "Cloud Programming Simplified: A Berkeley View on Serverless Computing", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Serverless cloud computing handles virtually all the system administration\noperations needed to make it easier for programmers to use the cloud. It\nprovides an interface that greatly simplifies cloud programming, and represents\nan evolution that parallels the transition from assembly language to high-level\nprogramming languages. This paper gives a quick history of cloud computing,\nincluding an accounting of the predictions of the 2009 Berkeley View of Cloud\nComputing paper, explains the motivation for serverless computing, describes\napplications that stretch the current limits of serverless, and then lists\nobstacles and research opportunities required for serverless computing to\nfulfill its full potential. Just as the 2009 paper identified challenges for\nthe cloud and predicted they would be addressed and that cloud use would\naccelerate, we predict these issues are solvable and that serverless computing\nwill grow to dominate the future of cloud computing.\n", "versions": [{"version": "v1", "created": "Sat, 9 Feb 2019 07:25:09 GMT"}], "update_date": "2019-02-12", "authors_parsed": [["Jonas", "Eric", ""], ["Schleier-Smith", "Johann", ""], ["Sreekanti", "Vikram", ""], ["Tsai", "Chia-Che", ""], ["Khandelwal", "Anurag", ""], ["Pu", "Qifan", ""], ["Shankar", "Vaishaal", ""], ["Carreira", "Joao", ""], ["Krauth", "Karl", ""], ["Yadwadkar", "Neeraja", ""], ["Gonzalez", "Joseph E.", ""], ["Popa", "Raluca Ada", ""], ["Stoica", "Ion", ""], ["Patterson", "David A.", ""]]}, {"id": "1902.09493", "submitter": "Christian M. Fuchs", "authors": "Christian M. Fuchs, Nadia M. Murillo, Aske Plaat, Erik van der Kouwe,\n  Todor Stefanov", "title": "Dynamic Fault Tolerance Through Resource Pooling", "comments": null, "journal-ref": "2018 NASA/ESA Conference on Adaptive Hardware and Systems (AHS)", "doi": "10.1109/AHS.2018.8541457", "report-no": null, "categories": "cs.DC cs.OS cs.SY", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Miniaturized satellites are currently not considered suitable for critical,\nhigh-priority, and complex multi-phased missions, due to their low reliability.\nAs hardware-side fault tolerance (FT) solutions designed for larger spacecraft\ncan not be adopted aboard very small satellites due to budget, energy, and size\nconstraints, we developed a hybrid FT-approach based upon only COTS components,\ncommodity processor cores, library IP, and standard software. This approach\nfacilitates fault detection, isolation, and recovery in software, and utilizes\nfault-coverage techniques across the embedded stack within an multiprocessor\nsystem-on-chip (MPSoC). This allows our FPGA-based proof-of-concept\nimplementation to deliver strong fault-coverage even for missions with a long\nduration, but also to adapt to varying performance requirements during the\nmission. The operator of a spacecraft utilizing this approach can define\nperformance profiles, which allow an on-board computer (OBC) to trade between\nprocessing capacity, fault coverage, and energy consumption using simple\nheuristics. The software-side FT approach developed also offers advantages if\ndeployed aboard larger spacecraft through spare resource pooling, enabling an\nOBC to more efficiently handle permanent faults. This FT approach in part\nmimics a critical biological systems's way of tolerating and adjusting to\nfailures, enabling graceful ageing of an MPSoC.\n", "versions": [{"version": "v1", "created": "Fri, 22 Feb 2019 00:39:43 GMT"}], "update_date": "2019-02-26", "authors_parsed": [["Fuchs", "Christian M.", ""], ["Murillo", "Nadia M.", ""], ["Plaat", "Aske", ""], ["van der Kouwe", "Erik", ""], ["Stefanov", "Todor", ""]]}]