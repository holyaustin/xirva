[{"id": "2106.03617", "submitter": "Ricardo Macedo", "authors": "Ricardo Macedo, Yusuke Tanimura, Jason Haga, Vijay Chidambaram, Jos\\'e\n  Pereira, Jo\\~ao Paulo", "title": "PAIO: A Software-Defined Storage Data Plane Framework", "comments": "15 pages, 8 figures. Submitted to IEEE Transactions on Parallel and\n  Distributed Systems", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We propose PAIO, the first general-purpose framework that enables system\ndesigners to build custom-made Software-Defined Storage (SDS) data plane\nstages. It provides the means to implement storage optimizations adaptable to\ndifferent workflows and user-defined policies, and allows straightforward\nintegration with existing applications and I/O layers. PAIO allows stages to be\nintegrated with modern SDS control planes to ensure holistic control and\nsystem-wide optimal performance. We demonstrate the performance and\napplicability of PAIO with two use cases. The first improves 99th percentile\nlatency by 4x in industry-standard LSM-based key-value stores. The second\nensures dynamic per-application bandwidth guarantees under shared storage\nenvironments.\n", "versions": [{"version": "v1", "created": "Mon, 7 Jun 2021 13:43:05 GMT"}, {"version": "v2", "created": "Tue, 8 Jun 2021 09:00:27 GMT"}], "update_date": "2021-06-09", "authors_parsed": [["Macedo", "Ricardo", ""], ["Tanimura", "Yusuke", ""], ["Haga", "Jason", ""], ["Chidambaram", "Vijay", ""], ["Pereira", "Jos\u00e9", ""], ["Paulo", "Jo\u00e3o", ""]]}, {"id": "2106.04514", "submitter": "Pei Zhang", "authors": "Kaiwen Long, Chong Xing, Yuebin Qi, Pei Zhang, Changsong Wu, Wenxiao\n  Fang, Jing Tan, Jie Chen, Shiming Zhang, Zuosheng Wang, Zuanmin Liu, Cao\n  Liang, Jiaxiang Xu", "title": "GearV: A Two-Gear Hypervisor for Mixed-Criticality IoT Systems", "comments": "12 pages, 8 figures, 11 tables", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.OS", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  This paper presents GearV, a two-gear lightweight hypervisor architecture to\naddress the some known challenges. By dividing hypervisor into some partitions,\nand dividing scheduling policies into Gear1 and Gear2 respectively, GearV\ncreates a consolidated platform to run best-effort system and safety-critical\nsystem simultaneously with managed engineering effort. The two-gears\narchitecture also simplifies retrofitting the virtualization systems. We\nbelieve that GearV can serves as a reasonable hypervisor architecture for the\nmix-critical IoT systems.\n", "versions": [{"version": "v1", "created": "Sat, 5 Jun 2021 14:06:20 GMT"}], "update_date": "2021-06-09", "authors_parsed": [["Long", "Kaiwen", ""], ["Xing", "Chong", ""], ["Qi", "Yuebin", ""], ["Zhang", "Pei", ""], ["Wu", "Changsong", ""], ["Fang", "Wenxiao", ""], ["Tan", "Jing", ""], ["Chen", "Jie", ""], ["Zhang", "Shiming", ""], ["Wang", "Zuosheng", ""], ["Liu", "Zuanmin", ""], ["Liang", "Cao", ""], ["Xu", "Jiaxiang", ""]]}, {"id": "2106.06065", "submitter": "Igor Korkin", "authors": "Igor Korkin", "title": "Windows Kernel Hijacking Is Not an Option: MemoryRanger Comes to the\n  Rescue Again", "comments": "29 pages, 7 figures. Korkin, I. (2021, June 10). Windows Kernel\n  Hijacking Is Not an Option: MemoryRanger Comes to the Rescue Again. Journal\n  of Digital Forensics, Security and Law, Vol 16, No.1, Article 4. Available\n  at: https://commons.erau.edu/jdfsl/vol16/iss1/4", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CR cs.OS", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  The security of a computer system depends on OS kernel protection. It is\ncrucial to reveal and inspect new attacks on kernel data, as these are used by\nhackers. The purpose of this paper is to continue research into attacks on\ndynamically allocated data in the Windows OS kernel and demonstrate the\ncapacity of MemoryRanger to prevent these attacks. This paper discusses three\nnew hijacking attacks on kernel data, which are based on bypassing OS security\nmechanisms. The first two hijacking attacks result in illegal access to files\nopen in exclusive access. The third attack escalates process privileges,\nwithout applying token swapping. Although Windows security experts have issued\nnew protection features, access attempts to the dynamically allocated data in\nthe kernel are not fully controlled. MemoryRanger hypervisor is designed to\nfill this security gap. The updated MemoryRanger prevents these new attacks as\nwell as supporting the Windows 10 1903 x64.\n", "versions": [{"version": "v1", "created": "Thu, 10 Jun 2021 21:56:49 GMT"}], "update_date": "2021-06-14", "authors_parsed": [["Korkin", "Igor", ""]]}, {"id": "2106.12553", "submitter": "Emmanuel Baccelli", "authors": "Koen Zandberg, Emmanuel Baccelli", "title": "Femto-Containers: DevOps on Microcontrollers with Lightweight\n  Virtualization & Isolation for IoT Software Modules", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.SE cs.NI cs.OS", "license": "http://creativecommons.org/licenses/by-nc-nd/4.0/", "abstract": "  Development, deployment and maintenance of networked software has been\nrevolutionized by DevOps practices, which boost system software quality and\nagile evolution. However, as the Internet of Things (IoT) connects low-power,\nmicrocontroller-based devices which take part in larger distributed\ncyberphysical systems, such low-power IoT devices are not easy to integrate in\nDevOps workflows. In this paper, we contribute to mitigate this problem by\ndesigning Femto-Containers, a new hardware-independent mechanism which enable\nthe virtualization and isolation of software modules embedded on\nmicrocontrollers, using an approach extending and adapting Berkeley Packet\nFilters (eBPF). We implement a Femto-Container hosting engine, which we\nintegrate in a common low-power IoT operating system (RIOT), and is thus\nenhanced with the ability to start, update or terminate Femto-Containers on\ndemand, securely over a standard IPv6/6LoWPAN network. We evaluate the\nperformance of Femto-Containers in a variety of use cases. We show that\nFemto-Containers can virtualize and isolate multiple software modules executed\nconcurrently, with very small memory footprint overhead (below 10%) and very\nsmall startup time (tens of microseconds) compared to native code execution. We\ncarry out experiments deploying Femto-Containers on a testbed using\nheterogeneous IoT hardware based on the popular microcontroller architectures\nArm Cortex-M, ESP32 and RISC-V. We show that compared to prior work on\nsoftware-based low-power virtualization and isolation, Femto-Containers offer\nan attractive trade-off in terms of memory footprint, energy consumption, and\nsecurity. The characteristics of Femto-Containers satisfy both the requirements\nof software modules hosting high-level logic coded in a variety of common\nprogramming languages, and the constraints of low-level debug snippets inserted\non a hot code path.\n", "versions": [{"version": "v1", "created": "Thu, 10 Jun 2021 10:54:29 GMT"}], "update_date": "2021-06-24", "authors_parsed": [["Zandberg", "Koen", ""], ["Baccelli", "Emmanuel", ""]]}, {"id": "2106.14651", "submitter": "Sam Kumar", "authors": "Sam Kumar, David E. Culler, Raluca Ada Popa", "title": "MAGE: Nearly Zero-Cost Virtual Memory for Secure Computation", "comments": "19 pages; Accepted to OSDI 2021", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.CR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Secure Computation (SC) is a family of cryptographic primitives for computing\non encrypted data in single-party and multi-party settings. SC is being\nincreasingly adopted by industry for a variety of applications. A significant\nobstacle to using SC for practical applications is the memory overhead of the\nunderlying cryptography. We develop MAGE, an execution engine for SC that\nefficiently runs SC computations that do not fit in memory. We observe that,\ndue to their intended security guarantees, SC schemes are inherently oblivious\n-- their memory access patterns are independent of the input data. Using this\nproperty, MAGE calculates the memory access pattern ahead of time and uses it\nto produce a memory management plan. This formulation of memory management,\nwhich we call memory programming, is a generalization of paging that allows\nMAGE to provide a highly efficient virtual memory abstraction for SC. MAGE\noutperforms the OS virtual memory system by up to an order of magnitude, and in\nmany cases, runs SC computations that do not fit in memory at nearly the same\nspeed as if the underlying machines had unbounded physical memory to fit the\nentire computation.\n", "versions": [{"version": "v1", "created": "Wed, 23 Jun 2021 23:44:27 GMT"}], "update_date": "2021-06-29", "authors_parsed": [["Kumar", "Sam", ""], ["Culler", "David E.", ""], ["Popa", "Raluca Ada", ""]]}]