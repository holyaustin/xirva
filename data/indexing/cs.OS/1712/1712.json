[{"id": "1712.03943", "submitter": "Carlton Shepherd", "authors": "Carlton Shepherd, Raja Naeem Akram, Konstantinos Markantonakis", "title": "EmLog: Tamper-Resistant System Logging for Constrained Devices with TEEs", "comments": "Accepted at the 11th IFIP International Conference on Information\n  Security Theory and Practice (WISTP '17)", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CR cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Remote mobile and embedded devices are used to deliver increasingly impactful\nservices, such as medical rehabilitation and assistive technologies. Secure\nsystem logging is beneficial in these scenarios to aid audit and forensic\ninvestigations particularly if devices bring harm to end-users. Logs should be\ntamper-resistant in storage, during execution, and when retrieved by a trusted\nremote verifier. In recent years, Trusted Execution Environments (TEEs) have\nemerged as the go-to root of trust on constrained devices for isolated\nexecution of sensitive applications. Existing TEE-based logging systems,\nhowever, focus largely on protecting server-side logs and offer little\nprotection to constrained source devices. In this paper, we introduce EmLog --\na tamper-resistant logging system for constrained devices using the\nGlobalPlatform TEE. EmLog provides protection against complex software\nadversaries and offers several additional security properties over past\nschemes. The system is evaluated across three log datasets using an\noff-the-shelf ARM development board running an open-source,\nGlobalPlatform-compliant TEE. On average, EmLog runs with low run-time memory\noverhead (1MB heap and stack), 430--625 logs/second throughput, and five-times\npersistent storage overhead versus unprotected logs.\n", "versions": [{"version": "v1", "created": "Mon, 11 Dec 2017 18:49:08 GMT"}, {"version": "v2", "created": "Fri, 15 Dec 2017 16:41:54 GMT"}, {"version": "v3", "created": "Tue, 19 Dec 2017 03:20:19 GMT"}], "update_date": "2017-12-20", "authors_parsed": [["Shepherd", "Carlton", ""], ["Akram", "Raja Naeem", ""], ["Markantonakis", "Konstantinos", ""]]}, {"id": "1712.05040", "submitter": "Jian-Jia Chen", "authors": "Niklas Ueter and Georg von der Br\\\"uggen and Jian-Jia Chen and Jing\n  Li, and Kunal Agrawal", "title": "Reservation-Based Federated Scheduling for Parallel Real-Time Tasks", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper considers the scheduling of parallel real-time tasks with\narbitrary-deadlines. Each job of a parallel task is described as a directed\nacyclic graph (DAG). In contrast to prior work in this area, where\ndecomposition-based scheduling algorithms are proposed based on the\nDAG-structure and inter-task interference is analyzed as self-suspending\nbehavior, this paper generalizes the federated scheduling approach. We propose\na reservation-based algorithm, called reservation-based federated scheduling,\nthat dominates federated scheduling. We provide general constraints for the\ndesign of such systems and prove that reservation-based federated scheduling\nhas a constant speedup factor with respect to any optimal DAG task scheduler.\nFurthermore, the presented algorithm can be used in conjunction with any\nscheduler and scheduling analysis suitable for ordinary arbitrary-deadline\nsporadic task sets, i.e., without parallelism.\n", "versions": [{"version": "v1", "created": "Wed, 13 Dec 2017 23:14:28 GMT"}], "update_date": "2017-12-15", "authors_parsed": [["Ueter", "Niklas", ""], ["von der Br\u00fcggen", "Georg", ""], ["Chen", "Jian-Jia", ""], ["Li", "Jing", ""], ["Agrawal", "Kunal", ""]]}, {"id": "1712.06276", "submitter": "Houssam Eddine Zahaf", "authors": "Houssam Eddine Zahaf (CRIStAL), Giuseppe Lipari (CRIStAL), Luca Abeni,\n  Houssam-Eddine Zahaf (CRIStAL)", "title": "Migrate when necessary: toward partitioned reclaiming for soft real-time\n  tasks", "comments": null, "journal-ref": "Proceedings of International Conference on Real-Time Networks and\n  Systems, 2017, 10, pp.1-24", "doi": "10.1145/3139258.3139280", "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper presents a new strategy for scheduling soft real-time tasks on\nmultiple identical cores. The proposed approach is based on partitioned CPU\nreservations and it uses a reclaiming mechanism to reduce the number of missed\ndeadlines. We introduce the possibility for a task to temporarily migrate to\nanother, less charged, CPU when it has exhausted the reserved bandwidth on its\nallocated CPU. In addition, we propose a simple load balancing method to\ndecrease the number of deadlines missed by the tasks. The proposed algorithm\nhas been evaluated through simulations, showing its effectiveness (compared to\nother multi-core reclaiming approaches) and comparing the performance of\ndifferent partitioning heuristics (Best Fit, Worst Fit and First Fit).\n", "versions": [{"version": "v1", "created": "Mon, 18 Dec 2017 07:32:19 GMT"}], "update_date": "2019-05-01", "authors_parsed": [["Zahaf", "Houssam Eddine", "", "CRIStAL"], ["Lipari", "Giuseppe", "", "CRIStAL"], ["Abeni", "Luca", "", "CRIStAL"], ["Zahaf", "Houssam-Eddine", "", "CRIStAL"]]}, {"id": "1712.07759", "submitter": "Viacheslav Dubeyko", "authors": "Vyacheslav Dubeyko, Cyril Guyot, Luis Cargnini, Adam Manzanares", "title": "POSIX-based Operating System in the environment of NVM/SCM memory", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Modern Operating Systems are typically POSIX-compliant. The system calls are\nthe fundamental layer of interaction between user-space applications and the OS\nkernel and its implementation of fundamental abstractions and primitives used\nin modern computing. The next generation of NVM/SCM memory raises critical\nquestions about the efficiency of modern OS architecture. This paper\ninvestigates how the POSIX API drives performance for a system with NVM/SCM\nmemory. We show that OS and metadata related system calls represent the most\nimportant area of optimization. However, the synchronization related system\ncalls (poll(), futex(), wait4()) are the most time-consuming overhead that even\na RAMdisk platform fails to eliminate. Attempting to preserve the POSIX-based\napproach will likely result in fundamental inefficiencies for any future\napplications of NVM/SCM memory.\n", "versions": [{"version": "v1", "created": "Thu, 21 Dec 2017 01:26:15 GMT"}, {"version": "v2", "created": "Fri, 22 Dec 2017 02:53:24 GMT"}], "update_date": "2017-12-25", "authors_parsed": [["Dubeyko", "Vyacheslav", ""], ["Guyot", "Cyril", ""], ["Cargnini", "Luis", ""], ["Manzanares", "Adam", ""]]}, {"id": "1712.08738", "submitter": "Waqar Ali", "authors": "Waqar Ali and Heechul Yun", "title": "Protecting real-time GPU kernels on integrated CPU-GPU SoC platforms", "comments": "This paper will be published at ECRTS-2018", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PF cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Integrated CPU-GPU architecture provides excellent acceleration capabilities\nfor data parallel applications on embedded platforms while meeting the size,\nweight and power (SWaP) requirements. However, sharing of main memory between\nCPU applications and GPU kernels can severely affect the execution of GPU\nkernels and diminish the performance gain provided by GPU. For example, in the\nNVIDIA Tegra K1 platform which has the integrated CPU-GPU architecture, we\nnoticed that in the worst case scenario, the GPU kernels can suffer as much as\n4X slowdown in the presence of co-running memory intensive CPU applications\ncompared to their solo execution. In this paper, we propose a software\nmechanism, which we call BWLOCK++, to protect the performance of GPU kernels\nfrom co-scheduled memory intensive CPU applications.\n", "versions": [{"version": "v1", "created": "Sat, 23 Dec 2017 08:44:28 GMT"}, {"version": "v2", "created": "Thu, 8 Feb 2018 20:09:20 GMT"}, {"version": "v3", "created": "Fri, 27 Apr 2018 02:19:42 GMT"}], "update_date": "2018-04-30", "authors_parsed": [["Ali", "Waqar", ""], ["Yun", "Heechul", ""]]}]