[{"id": "1403.0334", "submitter": "Sanjaya Kumar Panda", "authors": "Sourav Kumar Bhoi, Sanjaya Kumar Panda, Imran Hossain Faruk", "title": "Design and Performance Evaluation of an Optimized Disk Scheduling\n  Algorithm (ODSA)", "comments": "8 pages, 26 figures", "journal-ref": "International Journal of Computer Applications 2012", "doi": "10.5120/5010-7329 10.5120/5010-7329 10.5120/5010-7329 10.5120/5010-7329\n  10.5120/5010-7329", "report-no": "pxc3877329", "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Management of disk scheduling is a very important aspect of operating system.\nPerformance of the disk scheduling completely depends on how efficient is the\nscheduling algorithm to allocate services to the request in a better manner.\nMany algorithms (FIFO, SSTF, SCAN, C-SCAN, LOOK, etc.) are developed in the\nrecent years in order to optimize the system disk I/O performance. By reducing\nthe average seek time and transfer time, we can improve the performance of disk\nI/O operation. In our proposed algorithm, Optimize Disk Scheduling Algorithm\n(ODSA) is taking less average seek time and transfer time as compare to other\ndisk scheduling algorithms (FIFO, SSTF, SCAN, C-SCAN, LOOK, etc.), which\nenhances the efficiency of the disk performance in a better manner.\n", "versions": [{"version": "v1", "created": "Mon, 3 Mar 2014 08:13:29 GMT"}], "update_date": "2014-03-04", "authors_parsed": [["Bhoi", "Sourav Kumar", ""], ["Panda", "Sanjaya Kumar", ""], ["Faruk", "Imran Hossain", ""]]}, {"id": "1403.0335", "submitter": "Sanjaya Kumar Panda", "authors": "Sanjaya Kumar Panda, Debasis Dash, Jitendra Kumar Rout", "title": "A Group based Time Quantum Round Robin Algorithm using Min-Max Spread\n  Measure", "comments": "7 pages, 16 figures", "journal-ref": "International Journal of Computer Applications 2013", "doi": "10.5120/10667-5445", "report-no": "pxc3885445", "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Round Robin (RR) Scheduling is the basis of time sharing environment. It is\nthe combination of First Come First Served (FCFS) scheduling algorithm and\npreemption among processes. It is basically used in a time sharing operating\nsystem. It switches from one process to another process in a time interval. The\ntime interval or Time Quantum (TQ) is fixed for all available processes. So,\nthe larger process suffers from Context Switches (CS). To increase efficiency,\nwe have to select different TQ for processes. The main objective of RR is to\nreduce the CS, maximize the utilization of CPU and minimize the turn around and\nthe waiting time. In this paper, we have considered different TQ for a group of\nprocesses. It reduces CS as well as enhancing the performance of RR algorithm.\nTQ can be calculated using min-max dispersion measure. Our experimental\nanalysis shows that Group Based Time Quantum (GBTQ) RR algorithm performs\nbetter than existing RR algorithm with respect to Average Turn Around Time\n(ATAT), Average Waiting Time (AWT) and CS.\n", "versions": [{"version": "v1", "created": "Mon, 3 Mar 2014 08:27:29 GMT"}], "update_date": "2014-03-04", "authors_parsed": [["Panda", "Sanjaya Kumar", ""], ["Dash", "Debasis", ""], ["Rout", "Jitendra Kumar", ""]]}, {"id": "1403.1165", "submitter": "Michael Hanspach", "authors": "Michael Hanspach, J\\\"org Keller", "title": "A Taxonomy for Attack Patterns on Information Flows in Component-Based\n  Operating Systems", "comments": "9 pages", "journal-ref": "In Proceedings of the 7th Layered Assurance Workshop, New Orleans,\n  LA, USA, December 2013", "doi": null, "report-no": null, "categories": "cs.CR cs.OS cs.SD", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present a taxonomy and an algebra for attack patterns on component-based\noperating systems. In a multilevel security scenario, where isolation of\npartitions containing data at different security classifications is the primary\nsecurity goal and security breaches are mainly defined as undesired disclosure\nor modification of classified data, strict control of information flows is the\nultimate goal. In order to prevent undesired information flows, we provide a\nclassification of information flow types in a component-based operating system\nand, by this, possible patterns to attack the system. The systematic\nconsideration of informations flows reveals a specific type of operating system\ncovert channel, the covert physical channel, which connects two former isolated\npartitions by emitting physical signals into the computer's environment and\nreceiving them at another interface.\n", "versions": [{"version": "v1", "created": "Wed, 5 Mar 2014 15:43:57 GMT"}], "update_date": "2014-03-06", "authors_parsed": [["Hanspach", "Michael", ""], ["Keller", "J\u00f6rg", ""]]}, {"id": "1403.5010", "submitter": "Kexin Xing", "authors": "Kexing Xing, Decheng Zuo, Haiying Zhou and Hou Kun-Mean", "title": "Task & Resource Self-adaptive Embedded Real-time Operating System\n  Microkernel for Wireless Sensor Nodes", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Wireless Sensor Networks (WSNs) are used in many application fields, such as\nmilitary, healthcare, environment surveillance, etc. The WSN OS based on\nevent-driven model doesn't support real-time and multi-task application types\nand the OSs based on thread-driven model consume much energy because of\nfrequent context switch. Due to the high-dense and large-scale deployment of\nsensor nodes, it is very difficult to collect sensor nodes to update their\nsoftware. Furthermore, the sensor nodes are vulnerable to security attacks\nbecause of the characteristics of broadcast communication and unattended\napplication. This paper presents a task and resource self-adaptive embedded\nreal-time microkernel, which proposes hybrid programming model and offers a\ntwo-level scheduling strategy to support real-time multi-task correspondingly.\nA communication scheme, which takes the \"tuple\" space and \"IN/OUT\" primitives\nfrom \"LINDA\", is proposed to support some collaborative and distributed tasks.\nIn addition, this kernel implements a run-time over-the-air updating mechanism\nand provides a security policy to avoid the attacks and ensure the reliable\noperation of nodes. The performance evaluation is proposed and the experiential\nresults show this kernel is task-oriented and resource-aware and can be used\nfor the applications of event-driven and real-time multi-task.\n", "versions": [{"version": "v1", "created": "Thu, 20 Mar 2014 00:34:00 GMT"}], "update_date": "2014-03-21", "authors_parsed": [["Xing", "Kexing", ""], ["Zuo", "Decheng", ""], ["Zhou", "Haiying", ""], ["Kun-Mean", "Hou", ""]]}, {"id": "1403.5976", "submitter": "Brijender Kahanwal Dr.", "authors": "Brijender Kahanwal", "title": "File System Design Approaches", "comments": "5 pages, 6 figures", "journal-ref": "International Journal of Advances in Engineering Sciences,2014,\n  Vol. 4(1), PP 16-20", "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this article, the file system development design approaches are discussed.\nThe selection of the file system design approach is done according to the needs\nof the developers what are the needed requirements and specifications for the\nnew design. It allowed us to identify where our proposal fitted in with\nrelation to current and past file system development. Our experience with file\nsystem development is limited so the research served to identify the different\ntechniques that can be used. The variety of file systems encountered show what\nan active area of research file system development is. The file systems may be\nfrom one of the two fundamental categories. In one category, the file system is\ndeveloped in user space and runs as a user process. Another file system may be\ndeveloped in the kernel space and runs as a privileged process. Another one is\nthe mixed approach in which we can take the advantages of both aforesaid\napproaches. Each development option has its own pros and cons. In this article,\nthese design approaches are discussed.\n", "versions": [{"version": "v1", "created": "Fri, 21 Mar 2014 05:31:33 GMT"}], "update_date": "2014-03-25", "authors_parsed": [["Kahanwal", "Brijender", ""]]}]