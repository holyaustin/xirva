[{"id": "0912.0606", "submitter": "Rdv Ijcsis", "authors": "C. Yaashuwanth, Dr. R. Ramesh", "title": "A New Scheduling Algorithms For Real Time Tasks", "comments": "6 pages IEEE format, International Journal of Computer Science and\n  Information Security, IJCSIS November 2009, ISSN 1947 5500,\n  http://sites.google.com/site/ijcsis/", "journal-ref": "International Journal of Computer Science and Information\n  Security, IJCSIS, Vol. 6, No. 2, pp. 061-066, November 2009, USA", "doi": null, "report-no": "ISSN 1947 5500", "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The main objective of this paper is to develop the two different ways in\nwhich round robin architecture is modified and made suitable to be implemented\nin real time and embedded systems. The scheduling algorithm plays a significant\nrole in the design of real time embedded systems. Simple round robin\narchitecture is not efficient to be implemented in embedded systems because of\nhigher context switch rate, larger waiting time and larger response time.\nMissing of deadlines will degrade the system performance in soft real time\nsystems. The main objective of this paper is to develop the scheduling\nalgorithm which removes the drawbacks in simple round robin architecture. A\ncomparison with round robin architecture to the proposed architectures has been\nmade. It is observed that the proposed architectures solves the problems\nencountered in round robin architecture in soft real time by decreasing the\nnumber of context switches waiting time and response time thereby increasing\nthe system throughput.\n", "versions": [{"version": "v1", "created": "Thu, 3 Dec 2009 09:06:59 GMT"}], "update_date": "2009-12-04", "authors_parsed": [["Yaashuwanth", "C.", ""], ["Ramesh", "Dr. R.", ""]]}, {"id": "0912.0926", "submitter": "Bryan Ford", "authors": "Amittai Aviram and Bryan Ford (Yale University)", "title": "Deterministic Consistency: A Programming Model for Shared Memory\n  Parallelism", "comments": "7 pages, 3 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The difficulty of developing reliable parallel software is generating\ninterest in deterministic environments, where a given program and input can\nyield only one possible result. Languages or type systems can enforce\ndeterminism in new code, and runtime systems can impose synthetic schedules on\nlegacy parallel code. To parallelize existing serial code, however, we would\nlike a programming model that is naturally deterministic without language\nrestrictions or artificial scheduling. We propose \"deterministic consistency\",\na parallel programming model as easy to understand as the \"parallel assignment\"\nconstruct in sequential languages such as Perl and JavaScript, where concurrent\nthreads always read their inputs before writing shared outputs. DC supports\ncommon data- and task-parallel synchronization abstractions such as fork/join\nand barriers, as well as non-hierarchical structures such as producer/consumer\npipelines and futures. A preliminary prototype suggests that software-only\nimplementations of DC can run applications written for popular parallel\nenvironments such as OpenMP with low (<10%) overhead for some applications.\n", "versions": [{"version": "v1", "created": "Fri, 4 Dec 2009 20:10:12 GMT"}, {"version": "v2", "created": "Mon, 1 Feb 2010 16:27:48 GMT"}], "update_date": "2010-02-01", "authors_parsed": [["Aviram", "Amittai", "", "Yale University"], ["Ford", "Bryan", "", "Yale University"]]}, {"id": "0912.3852", "submitter": "Sathish Gopalakrishnan", "authors": "Sathish Gopalakrishnan", "title": "Sharp utilization thresholds for some real-time scheduling problems", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PF cs.DM cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Scheduling policies for real-time systems exhibit threshold behavior that is\nrelated to the utilization of the task set they schedule, and in some cases\nthis threshold is sharp. For the rate monotonic scheduling policy, we show that\nperiodic workload with utilization less than a threshold $U_{RM}^{*}$ can be\nscheduled almost surely and that all workload with utilization greater than\n$U_{RM}^{*}$ is almost surely not schedulable. We study such sharp threshold\nbehavior in the context of processor scheduling using static task priorities,\nnot only for periodic real-time tasks but for aperiodic real-time tasks as\nwell. The notion of a utilization threshold provides a simple schedulability\ntest for most real-time applications. These results improve our understanding\nof scheduling policies and provide an interesting characterization of the\ntypical behavior of policies. The threshold is sharp (small deviations around\nthe threshold cause schedulability, as a property, to appear or disappear) for\nmost policies; this is a happy consequence that can be used to address the\nlimitations of existing utilization-based tests for schedulability. We\ndemonstrate the use of such an approach for balancing power consumption with\nthe need to meet deadlines in web servers.\n", "versions": [{"version": "v1", "created": "Sat, 19 Dec 2009 01:18:05 GMT"}], "update_date": "2009-12-22", "authors_parsed": [["Gopalakrishnan", "Sathish", ""]]}, {"id": "0912.4062", "submitter": "Emil Vassev Dr.", "authors": "Emil Vassev", "title": "Process Description of COM Object Life Cycle", "comments": "15 pages, 7 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.SE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The objective of this article is to provide for the reader a basic\ndescription of all the steps involved in the COM object life-cycle process. COM\nis a software technology and process performer. The first section briefly\nintroduces the Component Object Model (COM), considering the process of the COM\nobject life cycle as the baseline of all COM issues. The second part describes\nin detail the basic steps of the process - client request, server location,\nobject creation, interaction, and disconnection. A brief description is given\nfor the components involved in each step. Finally, the third section provides a\nbrief conclusion summarizing all the process steps.\n", "versions": [{"version": "v1", "created": "Sun, 20 Dec 2009 23:49:25 GMT"}], "update_date": "2009-12-22", "authors_parsed": [["Vassev", "Emil", ""]]}]