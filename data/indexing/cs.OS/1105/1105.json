[{"id": "1105.1736", "submitter": "Rakesh Mohanty", "authors": "Rakesh Mohanty, H. S. Behera, Khusbu Patwari, Monisha Dash, M. Lakshmi\n  Prasanna", "title": "Priority Based Dynamic Round Robin (PBDRR) Algorithm with Intelligent\n  Time Slice for Soft Real Time Systems", "comments": "5 pages", "journal-ref": "International Journal of Advanced Computer Science and\n  Applications(IJACSA), Vol. 2 No. 2, February 2011 2011, 46-50", "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this paper, a new variant of Round Robin (RR) algorithm is proposed which\nis suitable for soft real time systems. RR algorithm performs optimally in\ntimeshared systems, but it is not suitable for soft real time systems. Because\nit gives more number of context switches, larger waiting time and larger\nresponse time. We have proposed a novel algorithm, known as Priority Based\nDynamic Round Robin Algorithm(PBDRR),which calculates intelligent time slice\nfor individual processes and changes after every round of execution. The\nproposed scheduling algorithm is developed by taking dynamic time quantum\nconcept into account. Our experimental results show that our proposed algorithm\nperforms better than algorithm in [8] in terms of reducing the number of\ncontext switches, average waiting time and average turnaround time.\n", "versions": [{"version": "v1", "created": "Mon, 9 May 2011 17:29:03 GMT"}], "update_date": "2011-05-10", "authors_parsed": [["Mohanty", "Rakesh", ""], ["Behera", "H. S.", ""], ["Patwari", "Khusbu", ""], ["Dash", "Monisha", ""], ["Prasanna", "M. Lakshmi", ""]]}, {"id": "1105.1811", "submitter": "Niall Douglas", "authors": "Niall Douglas", "title": "User Mode Memory Page Allocation: A Silver Bullet For Memory Allocation?", "comments": "10 pages. Rejected from ISMM11", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.PF", "license": "http://creativecommons.org/licenses/by/3.0/", "abstract": "  This paper proposes a novel solution: the elimination of paged virtual memory\nand partial outsourcing of memory page allocation and manipulation from the\noperating system kernel into the individual process' user space - a user mode\npage allocator - which allows an application to have direct, bare metal access\nto the page mappings used by the hardware Memory Management Unit (MMU) for its\npart of the overall address space. A user mode page allocator based emulation\nof the mmap() abstraction layer of dlmalloc is then benchmarked against the\ntraditional kernel mode implemented mmap() in a series of synthetic Monte-Carlo\nand real world application settings. Given the superb synthetic and positive\nreal world results from the profiling conducted, this paper proposes that with\nproper operating system and API support one could gain a further order higher\nperformance again while keeping allocator performance invariant to the amount\nof memory being allocated or freed i.e. a 100x performance improvement or more\nin some common use cases. It is rare that through a simple and easy to\nimplement API and operating system structure change one can gain a Silver\nBullet with the potential for a second one.\n", "versions": [{"version": "v1", "created": "Mon, 9 May 2011 22:26:15 GMT"}], "update_date": "2011-05-11", "authors_parsed": [["Douglas", "Niall", ""]]}, {"id": "1105.1815", "submitter": "Niall Douglas", "authors": "Niall Douglas", "title": "User Mode Memory Page Management: An old idea applied anew to the memory\n  wall problem", "comments": "6 pages. Rejected from MSPC11", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.PF", "license": "http://creativecommons.org/licenses/by/3.0/", "abstract": "  It is often said that one of the biggest limitations on computer performance\nis memory bandwidth (i.e.\"the memory wall problem\"). In this position paper, I\nargue that if historical trends in computing evolution (where growth in\navailable capacity is exponential and reduction in its access latencies is\nlinear) continue as they have, then this view is wrong - in fact we ought to be\nconcentrating on reducing whole system memory access latencies wherever\npossible, and by \"whole system\" I mean that we ought to look at how software\ncan be unnecessarily wasteful with memory bandwidth due to legacy design\ndecisions. To this end I conduct a feasibility study to determine whether we\nought to virtualise the MMU for each application process such that it has\ndirect access to its own MMU page tables and the memory allocated to a process\nis managed exclusively by the process and not the kernel. I find under typical\nconditions that nearly scale invariant performance to memory allocation size is\npossible such that hundreds of megabytes of memory can be allocated, relocated,\nswapped and deallocated in almost the same time as kilobytes (e.g. allocating\n8Mb is 10x quicker under this experimental allocator than a conventional\nallocator, and resizing a 128Kb block to 256Kb block is 4.5x faster). I find\nthat first time page access latencies are improved tenfold; moreover, because\nthe kernel page fault handler is never called, the lack of cache pollution\nimproves whole application memory access latencies increasing performance by up\nto 2x. Finally, I try binary patching existing applications to use the\nexperimental allocation technique, finding almost universal performance\nimprovements without having to recompile these applications to make better use\nof the new facilities.\n", "versions": [{"version": "v1", "created": "Mon, 9 May 2011 22:39:46 GMT"}], "update_date": "2011-05-11", "authors_parsed": [["Douglas", "Niall", ""]]}, {"id": "1105.3232", "submitter": "Sokol Kosta", "authors": "Sokol Kosta, Andrius Aucinas, Pan Hui, Richard Mortier, Xinwen Zhang", "title": "Unleashing the Power of Mobile Cloud Computing using ThinkAir", "comments": "17 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.NI cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Smartphones have exploded in popularity in recent years, becoming ever more\nsophisticated and capable. As a result, developers worldwide are building\nincreasingly complex applications that require ever increasing amounts of\ncomputational power and energy. In this paper we propose ThinkAir, a framework\nthat makes it simple for developers to migrate their smartphone applications to\nthe cloud. ThinkAir exploits the concept of smartphone virtualization in the\ncloud and provides method level computation offloading. Advancing on previous\nworks, it focuses on the elasticity and scalability of the server side and\nenhances the power of mobile cloud computing by parallelizing method execution\nusing multiple Virtual Machine (VM) images. We evaluate the system using a\nrange of benchmarks starting from simple micro-benchmarks to more complex\napplications. First, we show that the execution time and energy consumption\ndecrease two orders of magnitude for the N-queens puzzle and one order of\nmagnitude for a face detection and a virus scan application, using cloud\noffloading. We then show that if a task is parallelizable, the user can request\nmore than one VM to execute it, and these VMs will be provided dynamically. In\nfact, by exploiting parallelization, we achieve a greater reduction on the\nexecution time and energy consumption for the previous applications. Finally,\nwe use a memory-hungry image combiner tool to demonstrate that applications can\ndynamically request VMs with more computational power in order to meet their\ncomputational requirements.\n", "versions": [{"version": "v1", "created": "Mon, 16 May 2011 21:45:54 GMT"}], "update_date": "2015-03-19", "authors_parsed": [["Kosta", "Sokol", ""], ["Aucinas", "Andrius", ""], ["Hui", "Pan", ""], ["Mortier", "Richard", ""], ["Zhang", "Xinwen", ""]]}, {"id": "1105.5055", "submitter": "Markus Lindstr\\\"om", "authors": "Markus Lindstr\\\"om, Gilles Geeraerts, Jo\\\"el Goossens", "title": "A faster exact multiprocessor schedulability test for sporadic tasks", "comments": "10 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.FL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Baker and Cirinei introduced an exact but naive algorithm, based on solving a\nstate reachability problem in a finite automaton, to check whether sets of\nsporadic hard real-time tasks are schedulable on identical multiprocessor\nplatforms. However, the algorithm suffered from poor performance due to the\nexponential size of the automaton relative to the size of the task set. In this\npaper, we successfully apply techniques developed by the formal verification\ncommunity, specifically antichain algorithms, by defining and proving the\ncorrectness of a simulation relation on Baker and Cirinei's automaton. We show\nour improved algorithm yields dramatically improved performance for the\nschedulability test and opens for many further improvements.\n", "versions": [{"version": "v1", "created": "Wed, 25 May 2011 15:02:01 GMT"}, {"version": "v2", "created": "Wed, 7 Sep 2011 13:42:51 GMT"}], "update_date": "2011-09-08", "authors_parsed": [["Lindstr\u00f6m", "Markus", ""], ["Geeraerts", "Gilles", ""], ["Goossens", "Jo\u00ebl", ""]]}, {"id": "1105.5080", "submitter": "Jo\\\"el Goossens", "authors": "Irina Iulia Lupu, Jo\\\"el Goossens (U.L.B.)", "title": "Scheduling of Hard Real-Time Multi-Thread Periodic Tasks", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this paper we study the scheduling of parallel and real-time recurrent\ntasks. Firstly, we propose a new parallel task model which allows recurrent\ntasks to be composed of several threads, each thread requires a single\nprocessor for execution and can be scheduled simultaneously. Secondly, we\ndefine several kinds of real-time schedulers that can be applied to our\nparallel task model. We distinguish between two scheduling classes:\nhierarchical schedulers and global thread schedulers. We present and prove\ncorrect an exact schedulability test for each class. Lastly, we also evaluate\nthe performance of our scheduling paradigm in comparison with Gang scheduling\nby means of simulations.\n", "versions": [{"version": "v1", "created": "Wed, 25 May 2011 16:15:35 GMT"}], "update_date": "2015-03-19", "authors_parsed": [["Lupu", "Irina Iulia", "", "U.L.B."], ["Goossens", "Jo\u00ebl", "", "U.L.B."]]}]