[{"id": "1802.00673", "submitter": "Florian Schmidt", "authors": "Florian Schmidt and Mathias Niepert and Felipe Huici", "title": "Representation Learning for Resource Usage Prediction", "comments": "3 pages, 2 figures, SysML 2018", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.LG cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Creating a model of a computer system that can be used for tasks such as\npredicting future resource usage and detecting anomalies is a challenging\nproblem. Most current systems rely on heuristics and overly simplistic\nassumptions about the workloads and system statistics. These heuristics are\ntypically a one-size-fits-all solution so as to be applicable in a wide range\nof applications and systems environments.\n  With this paper, we present our ongoing work of integrating systems telemetry\nranging from standard resource usage statistics to kernel and library calls of\napplications into a machine learning model. Intuitively, such a ML model\napproximates, at any point in time, the state of a system and allows us to\nsolve tasks such as resource usage prediction and anomaly detection. To achieve\nthis goal, we leverage readily-available information that does not require any\nchanges to the applications run on the system. We train recurrent neural\nnetworks to learn a model of the system under consideration. As a proof of\nconcept, we train models specifically to predict future resource usage of\nrunning applications.\n", "versions": [{"version": "v1", "created": "Fri, 2 Feb 2018 13:21:13 GMT"}], "update_date": "2018-02-06", "authors_parsed": [["Schmidt", "Florian", ""], ["Niepert", "Mathias", ""], ["Huici", "Felipe", ""]]}, {"id": "1802.00696", "submitter": "Diego Didona Dr", "authors": "Diego Didona, Willy Zwaenepoel", "title": "Size-aware Sharding For Improving Tail Latencies in In-memory Key-value\n  Stores", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DB cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper introduces the concept of size-aware sharding to improve tail\nlatencies for in-memory key-value stores, and describes its implementation in\nthe Minos key-value store. Tail latencies are crucial in distributed\napplications with high fan-out ratios, because overall response time is\ndetermined by the slowest response. Size-aware sharding distributes requests\nfor keys to cores according to the size of the item associated with the key. In\nparticular, requests for small and large items are sent to disjoint subsets of\ncores. Size-aware sharding improves tail latencies by avoiding head-of-line\nblocking, in which a request for a small item gets queued behind a request for\na large item. Alternative size-unaware approaches to sharding, such as\nkeyhash-based sharding, request dispatching and stealing do not avoid\nhead-of-line blocking, and therefore exhibit worse tail latencies. The\nchallenge in implementing size-aware sharding is to maintain high throughput by\navoiding the cost of software dispatching and by achieving load balancing\nbetween different cores. Minos uses hardware dispatch for all requests for\nsmall items, which form the very large majority of all requests. It achieves\nload balancing by adapting the number of cores handling requests for small and\nlarge items to their relative presence in the workload. We compare Minos to\nthree state-of-the-art designs of in-memory KV stores. Compared to its closest\ncompetitor, Minos achieves a 99th percentile latency that is up to two orders\nof magnitude lower. Put differently, for a given value for the 99th percentile\nlatency equal to 10 times the mean service time, Minos achieves a throughput\nthat is up to 7.4 times higher.\n", "versions": [{"version": "v1", "created": "Fri, 2 Feb 2018 14:23:00 GMT"}], "update_date": "2018-02-05", "authors_parsed": [["Didona", "Diego", ""], ["Zwaenepoel", "Willy", ""]]}, {"id": "1802.00922", "submitter": "Amr Alanwar", "authors": "Amr Alanwar, Fatima M. Anwar, Joao P Hespanha, Mani Srivastava", "title": "Realizing Uncertainty-Aware Timing Stack in Embedded Operating System", "comments": "In Proc. of the Embedded Operating Systems Workshop, 2016", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.RO cs.NI cs.OS cs.SY", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Time awareness is critical to a broad range of emerging applications -- in\nCyber-Physical Systems and Internet of Things -- running on commodity platforms\nand operating systems. Traditionally, time is synchronized across devices\nthrough a best-effort background service whose performance is neither\nobservable nor controllable, thus consuming system resources independently of\napplication needs while not allowing the applications and OS services to adapt\nto changes in uncertainty in system time. We advocate for rethinking how time\nis managed in a system stack. In this paper, we propose a new clock model that\ncharacterizes various sources of timing uncertainties in true time. We then\npresent a Kalman filter based time synchronization protocol that adapts to the\nuncertainties exposed by the clock model. Our realization of a\nuncertainty-aware clock model and synchronization protocol is based on a\nstandard embedded Linux platform.\n", "versions": [{"version": "v1", "created": "Sat, 3 Feb 2018 06:18:56 GMT"}], "update_date": "2018-02-06", "authors_parsed": [["Alanwar", "Amr", ""], ["Anwar", "Fatima M.", ""], ["Hespanha", "Joao P", ""], ["Srivastava", "Mani", ""]]}, {"id": "1802.05802", "submitter": "Zhuoqun Cheng", "authors": "Zhuoqun Cheng, Richard West, Craig Einstein", "title": "End-to-end Analysis and Design of a Drone Flight Controller", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.SY cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Timing guarantees are crucial to cyber-physical applications that must bound\nthe end-to-end delay between sensing, processing and actuation. For example, in\na flight controller for a multirotor drone, the data from a gyro or inertial\nsensor must be gathered and processed to determine the attitude of the\naircraft. Sensor data fusion is followed by control decisions that adjust the\nflight of a drone by altering motor speeds. If the processing pipeline between\nsensor input and actuation is not bounded, the drone will lose control and\npossibly fail to maintain flight.\n  Motivated by the implementation of a multithreaded drone flight controller on\nthe Quest RTOS, we develop a composable pipe model based on the system's task,\nscheduling and communication abstractions. This pipe model is used to analyze\ntwo semantics of end-to-end time: reaction time and freshness time. We also\nargue that end-to-end timing properties should be factored in at the early\nstage of application design. Thus, we provide a mathematical framework to\nderive feasible task periods that satisfy both a given set of end-to-end timing\nconstraints and the schedulability requirement. We demonstrate the\napplicability of our design approach by using it to port the Cleanflight flight\ncontroller firmware to Quest on the Intel Aero board. Experiments show that\nCleanflight ported to Quest is able to achieve end-to-end latencies within the\npredicted time bounds derived by analysis.\n", "versions": [{"version": "v1", "created": "Thu, 15 Feb 2018 23:38:27 GMT"}], "update_date": "2018-02-19", "authors_parsed": [["Cheng", "Zhuoqun", ""], ["West", "Richard", ""], ["Einstein", "Craig", ""]]}, {"id": "1802.07062", "submitter": "Zhi Zhang", "authors": "Zhi Zhang, Yueqiang Cheng, Surya Nepal, Dongxi Liu, Qingni Shen, Fethi\n  Rabhi", "title": "KASR: A Reliable and Practical Approach to Attack Surface Reduction of\n  Commodity OS Kernels", "comments": "The work has been accepted at the 21st International Symposium on\n  Research in Attacks, Intrusions, and Defenses 2018", "journal-ref": null, "doi": "10.1007/978-3-030-00470-5_32", "report-no": null, "categories": "cs.CR cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Commodity OS kernels have broad attack surfaces due to the large code base\nand the numerous features such as device drivers. For a real-world use case\n(e.g., an Apache Server), many kernel services are unused and only a small\namount of kernel code is used. Within the used code, a certain part is invoked\nonly at runtime while the rest are executed at startup and/or shutdown phases\nin the kernel's lifetime run. In this paper, we propose a reliable and\npractical system, named KASR, which transparently reduces attack surfaces of\ncommodity OS kernels at runtime without requiring their source code. The KASR\nsystem, residing in a trusted hypervisor, achieves the attack surface reduction\nthrough a two-step approach: (1) reliably depriving unused code of executable\npermissions, and (2) transparently segmenting used code and selectively\nactivating them. We implement a prototype of KASR on Xen-4.8.2 hypervisor and\nevaluate its security effectiveness on Linux kernel-4.4.0-87-generic. Our\nevaluation shows that KASR reduces the kernel attack surface by 64% and trims\noff 40% of CVE vulnerabilities. Besides, KASR successfully detects and blocks\nall 6 real-world kernel rootkits. We measure its performance overhead with\nthree benchmark tools (i.e., SPECINT, httperf and bonnie++). The experimental\nresults indicate that KASR imposes less than 1% performance overhead (compared\nto an unmodified Xen hypervisor) on all the benchmarks.\n", "versions": [{"version": "v1", "created": "Tue, 20 Feb 2018 11:08:31 GMT"}, {"version": "v2", "created": "Thu, 29 Nov 2018 22:55:38 GMT"}], "update_date": "2018-12-03", "authors_parsed": [["Zhang", "Zhi", ""], ["Cheng", "Yueqiang", ""], ["Nepal", "Surya", ""], ["Liu", "Dongxi", ""], ["Shen", "Qingni", ""], ["Rabhi", "Fethi", ""]]}, {"id": "1802.10376", "submitter": "Jian-Jia Chen", "authors": "Jian-Jia Chen, Georg von der Br\\\"uggen, and Niklas Ueter", "title": "Push Forward: Global Fixed-Priority Scheduling of Arbitrary-Deadline\n  Sporadic Task Systems", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The sporadic task model is often used to analyze recurrent execution of\nidentical tasks in real-time systems. A sporadic task defines an infinite\nsequence of task instances, also called jobs, that arrive under the minimum\ninter-arrival time constraint. To ensure the system safety, timeliness has to\nbe guaranteed in addition to functional correctness, i.e., all jobs of all\ntasks have to be finished before the job deadlines. We focus on analyzing\narbitrary-deadline task sets on a homogeneous (identical) multiprocessor system\nunder any given global fixed-priority scheduling approach and provide a series\nof schedulability tests with different tradeoffs between their time complexity\nand their accuracy. Under the arbitrary-deadline setting, the relative deadline\nof a task can be longer than the minimum inter-arrival time of the jobs of the\ntask. We show that global deadline-monotonic (DM) scheduling has a speedup\nbound of $3-1/M$ against any optimal scheduling algorithms, where $M$ is the\nnumber of identical processors, and prove that this bound is asymptotically\ntight.\n", "versions": [{"version": "v1", "created": "Wed, 28 Feb 2018 11:51:26 GMT"}], "update_date": "2018-03-01", "authors_parsed": [["Chen", "Jian-Jia", ""], ["von der Br\u00fcggen", "Georg", ""], ["Ueter", "Niklas", ""]]}]