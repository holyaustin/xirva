[{"id": "1811.00757", "submitter": "Chandan Kalita", "authors": "Chandan Kalita, Gautam Barua, Priya Sehgal", "title": "DurableFS: A File System for Persistent Memory", "comments": "6 Pages, 3 Figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  With the availability of hybrid DRAM-NVRAM memory on the memory bus of CPUs,\na number of file systems on NVRAM have been designed and implemented. In this\npaper we present the design and implementation of a file system on NVRAM called\nDurableFS, which provides atomicity and durability of file operations to\napplications. Due to the byte level random accessibility of memory, it is\npossible to provide these guarantees without much overhead. We use standard\ntechniques like copy on write for data, and a redo log for metadata changes to\nbuild an efficient file system which provides durability and atomicity\nguarantees at the time a file is closed. Benchmarks on the implementation shows\nthat there is only a 7 %degradation in performance due to providing these\nguarantees.\n", "versions": [{"version": "v1", "created": "Fri, 2 Nov 2018 07:11:52 GMT"}], "update_date": "2018-11-05", "authors_parsed": [["Kalita", "Chandan", ""], ["Barua", "Gautam", ""], ["Sehgal", "Priya", ""]]}, {"id": "1811.05000", "submitter": "Liwei Guo", "authors": "Liwei Guo, Shuang Zhai, Yi Qiao, Felix Xiaozhu Lin", "title": "Transkernel: Bridging Monolithic Kernels to Peripheral Cores", "comments": "The camera-ready version of this paper, will appear at USENIX ATC'19", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Smart devices see a large number of ephemeral tasks driven by background\nactivities. In order to execute such a task, the OS kernel wakes up the\nplatform beforehand and puts it back to sleep afterwards. In doing so, the\nkernel operates various IO devices and orchestrates their power state\ntransitions. Such kernel executions are inefficient as they mismatch typical\nCPU hardware. They are better off running on a low-power, microcontroller-like\ncore, i.e., peripheral core, relieving CPU from the inefficiency.\n  We therefore present a new OS structure, in which a lightweight virtual\nexecutor called transkernel offloads specific phases from a monolithic kernel.\nThe transkernel translates stateful kernel execution through cross-ISA, dynamic\nbinary translation (DBT); it emulates a small set of stateless kernel services\nbehind a narrow, stable binary interface; it specializes for hot paths; it\nexploits ISA similarities for lowering DBT cost.\n  Through an ARM-based prototype, we demonstrate transkernel's feasibility and\nbenefit. We show that while cross-ISA DBT is typically used under the\nassumption of efficiency loss, it can enable efficiency gain, even on\noff-the-shelf hardware.\n", "versions": [{"version": "v1", "created": "Mon, 12 Nov 2018 21:00:23 GMT"}, {"version": "v2", "created": "Thu, 25 Apr 2019 18:30:01 GMT"}, {"version": "v3", "created": "Wed, 5 Jun 2019 19:27:33 GMT"}], "update_date": "2019-06-07", "authors_parsed": [["Guo", "Liwei", ""], ["Zhai", "Shuang", ""], ["Qiao", "Yi", ""], ["Lin", "Felix Xiaozhu", ""]]}, {"id": "1811.09792", "submitter": "Rafael Roman Otero", "authors": "Rafael Roman Otero, Alex Aravind", "title": "MiniOS: an instructional platform for teaching operating systems labs", "comments": "32 pages, 11 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Delivering hands-on practice laboratories for introductory courses on\noperating systems is a difficult task. One of the main sources of the\ndifficulty is the sheer size and complexity of the operating systems software.\nConsequently, some of the solutions adopted in the literature to teach\noperating systems laboratory consider smaller and simpler systems, generally\nreferred to as instructional operating systems. This work continues in the same\ndirection and is threefold. First, it considers a simpler hardware platform.\nSecond, it argues that a minimal operating system is a viable option for\ndelivering laboratories. Third, it presents a laboratory teaching platform,\nwhereby students build a minimal operating system for an embedded hardware\nplatform. The proposed platform is called MiniOS. An important aspect of MiniOS\nis that it is sufficiently supported with additional technical and pedagogic\nmaterial. Finally, the effectiveness of the proposed approach to teach\noperating systems laboratories is illustrated through the experience of using\nit to deliver laboratory projects in the Operating Systems course at the\nUniversity of Northern British Columbia. Finally, we discuss experimental\nresearch in computing education and considered the qualitative results of this\nwork as part of a larger research endeavour.\n", "versions": [{"version": "v1", "created": "Sat, 24 Nov 2018 08:54:38 GMT"}, {"version": "v2", "created": "Sat, 1 Dec 2018 04:45:49 GMT"}], "update_date": "2018-12-04", "authors_parsed": [["Otero", "Rafael Roman", ""], ["Aravind", "Alex", ""]]}]