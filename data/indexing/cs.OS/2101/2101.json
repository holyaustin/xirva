[{"id": "2101.01159", "submitter": "Joseph Hellerstein", "authors": "Alvin Cheung, Natacha Crooks, Joseph M. Hellerstein and Matthew Milano", "title": "New Directions in Cloud Programming", "comments": null, "journal-ref": "CIDR 2021", "doi": null, "report-no": null, "categories": "cs.DC cs.DB cs.OS cs.PL", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  Nearly twenty years after the launch of AWS, it remains difficult for most\ndevelopers to harness the enormous potential of the cloud. In this paper we lay\nout an agenda for a new generation of cloud programming research aimed at\nbringing research ideas to programmers in an evolutionary fashion. Key to our\napproach is a separation of distributed programs into a PACT of four facets:\nProgram semantics, Availablity, Consistency and Targets of optimization. We\npropose to migrate developers gradually to PACT programming by lifting familiar\ncode into our more declarative level of abstraction. We then propose a\nmulti-stage compiler that emits human-readable code at each stage that can be\nhand-tuned by developers seeking more control. Our agenda raises numerous\nresearch challenges across multiple areas including language design, query\noptimization, transactions, distributed consistency, compilers and program\nsynthesis.\n", "versions": [{"version": "v1", "created": "Mon, 4 Jan 2021 18:42:54 GMT"}], "update_date": "2021-01-05", "authors_parsed": [["Cheung", "Alvin", ""], ["Crooks", "Natacha", ""], ["Hellerstein", "Joseph M.", ""], ["Milano", "Matthew", ""]]}, {"id": "2101.03109", "submitter": "Taoufik Yeferny", "authors": "Sofian Hamad and Taoufik Yeferny", "title": "Routing Approach for P2P Systems Over MANET Network", "comments": null, "journal-ref": "IJCSNS International Journal of Computer Science and Network\n  Security, VOL.20 No.3, March 2020", "doi": null, "report-no": null, "categories": "cs.NI cs.OS", "license": "http://creativecommons.org/licenses/by-nc-nd/4.0/", "abstract": "  Thanks to the great progress in mobile and wireless technologies,\nInternet-distributed applications like P2P file sharing are nowadays deployed\nover MANET (i.e., P2P mobile systems). These applications allow users to search\nand share diverse multimedia resources over MANET. Due the nature of MANET, P2P\nmobile systems brought up many new thriving challenges regarding the query\nrouting issue. To tackle this problem, we introduce a novel context-aware query\nrouting protocol for unstructured P2P mobile file sharing systems. Our protocol\n(i) locates relevant peers sharing pertinent resources for user's query and\n(ii) ensures that those peers would be reached by considering different MANET\nconstraints (e.g., query content, peer mobility, battery energy, peer load). In\norder to consider all these constraints for choosing the relevant peers, we are\nbased on the technique for order preferences by similarity to ideal solution\n(TOPSIS). We implemented the proposed protocol and compared its routing\nefficiency and retrieval effectiveness with another protocol taken from the\nliterature. Experimental results show that our scheme carries out better than\nthe baseline protocol with respect to accuracy\n", "versions": [{"version": "v1", "created": "Fri, 27 Nov 2020 12:27:31 GMT"}], "update_date": "2021-01-11", "authors_parsed": [["Hamad", "Sofian", ""], ["Yeferny", "Taoufik", ""]]}, {"id": "2101.07200", "submitter": "Thaleia Dimitra Doudali", "authors": "Thaleia Dimitra Doudali, Daniel Zahka and Ada Gavrilovska", "title": "Tuning the Frequency of Periodic Data Movements over Hybrid Memory\n  Systems", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Emerging hybrid memory systems that comprise technologies such as Intel's\nOptane DC Persistent Memory, exhibit disparities in the access speeds and\ncapacity ratios of their heterogeneous memory components. This breaks many\nassumptions and heuristics designed for traditional DRAM-only platforms. High\napplication performance is feasible via dynamic data movement across memory\nunits, which maximizes the capacity use of DRAM while ensuring efficient use of\nthe aggregate system resources. Newly proposed solutions use performance models\nand machine intelligence to optimize which and how much data to move\ndynamically; however, the decision of when to move this data is based on\nempirical selection of time intervals, or left to the applications. Our\nexperimental evaluation shows that failure to properly configure the data\nmovement frequency can lead to 10%-100% slowdown for a given data movement\npolicy; yet, there is no established methodology on how to properly configure\nthis value for a given workload, platform and policy. We propose Cori, a\nsystem-level tuning solution that identifies and extracts the necessary\napplication-level data reuse information, and guides the selection of data\nmovement frequency to deliver gains in application performance and system\nresource efficiency. Experimental evaluation shows that Cori configures data\nmovement frequencies that provide application performance within 3% of the\noptimal one, and that it can achieve this up to 5x more quickly than random or\nbrute-force approaches. System-level validation of Cori on a platform with DRAM\nand Intel's Optane DC PMEM confirms its practicality and tuning efficiency.\n", "versions": [{"version": "v1", "created": "Fri, 15 Jan 2021 01:30:48 GMT"}], "update_date": "2021-01-19", "authors_parsed": [["Doudali", "Thaleia Dimitra", ""], ["Zahka", "Daniel", ""], ["Gavrilovska", "Ada", ""]]}, {"id": "2101.07327", "submitter": "Hung-Wei Tseng", "authors": "Alec Rohloff and Zackary Allen and Kung-Min Lin and Joshua Okrend and\n  Chengyi Nie and Yu-Chia Liu and Hung-Wei Tseng", "title": "OpenUVR: an Open-Source System Framework for Untethered Virtual Reality\n  Applications", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.NI cs.HC cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Advancements in heterogeneous computing technologies enable the significant\npotential of virtual reality (VR) applications. To offer the best user\nexperience (UX), a system should adopt an untethered, wireless-network-based\narchitecture to transfer VR content between the user and the content generator.\nHowever, modern wireless network technologies make implementing such an\narchitecture challenging, as VR applications require superior video quality --\nwith high resolution, high frame rates, and very low latency.\n  This paper presents OpenUVR, an open-source framework that uses commodity\nhardware components to satisfy the demands of interactive, real-time VR\napplications. OpenUVR significantly improves UX through a redesign of the\nsystem stack and addresses the most time-sensitive issues associated with\nredundant memory copying in modern computing systems. OpenUVR presents a\ncross-layered VR datapath to avoid redundant data operations and computation\namong system components, OpenUVR customizes the network stack to eliminate\nunnecessary memory operations incurred by mismatching data formats in each\nlayer, and OpenUVR uses feedback from mobile devices to remove memory buffers.\n  Together, these modifications allow OpenUVR to reduce VR application delays\nto 14.32 ms, meeting the 20 ms minimum latency in avoiding motion sickness. As\nan open-source system that is fully compatible with commodity hardware, OpenUVR\noffers the research community an opportunity to develop, investigate, and\noptimize applications for untethered, high-performance VR architectures.\n", "versions": [{"version": "v1", "created": "Mon, 18 Jan 2021 21:02:16 GMT"}], "update_date": "2021-01-20", "authors_parsed": [["Rohloff", "Alec", ""], ["Allen", "Zackary", ""], ["Lin", "Kung-Min", ""], ["Okrend", "Joshua", ""], ["Nie", "Chengyi", ""], ["Liu", "Yu-Chia", ""], ["Tseng", "Hung-Wei", ""]]}, {"id": "2101.08062", "submitter": "Geunsik Lim", "authors": "Geunsik Lim, Donghyun Kang, and Young Ik Eom", "title": "Thread Evolution Kit for Optimizing Thread Operations on CE/IoT Devices", "comments": null, "journal-ref": null, "doi": "10.1109/TCE.2020.3033328", "report-no": null, "categories": "cs.OS cs.DC cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Most modern operating systems have adopted the one-to-one thread model to\nsupport fast execution of threads in both multi-core and single-core systems.\nThis thread model, which maps the kernel-space and user-space threads in a\none-to-one manner, supports quick thread creation and termination in\nhigh-performance server environments. However, the performance of time-critical\nthreads is degraded when multiple threads are being run in low-end CE devices\nwith limited system resources. When a CE device runs many threads to support\ndiverse application functionalities, low-level hardware specifications often\nlead to significant resource contention among the threads trying to obtain\nsystem resources. As a result, the operating system encounters challenges, such\nas excessive thread context switching overhead, execution delay of\ntime-critical threads, and a lack of virtual memory for thread stacks. This\npaper proposes a state-of-the-art Thread Evolution Kit (TEK) that consists of\nthree primary components: a CPU Mediator, Stack Tuner, and Enhanced Thread\nIdentifier. From the experiment, we can see that the proposed scheme\nsignificantly improves user responsiveness (7x faster) under high CPU\ncontention compared to the traditional thread model. Also, TEK solves the\nsegmentation fault problem that frequently occurs when a CE application\nincreases the number of threads during its execution.\n", "versions": [{"version": "v1", "created": "Wed, 20 Jan 2021 10:54:59 GMT"}], "update_date": "2021-01-21", "authors_parsed": [["Lim", "Geunsik", ""], ["Kang", "Donghyun", ""], ["Eom", "Young Ik", ""]]}, {"id": "2101.08744", "submitter": "Hongyu Miao", "authors": "Hongyu Miao, Felix Xiaozhu Lin", "title": "Enabling Large Neural Networks on Tiny Microcontrollers with Swapping", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.AR cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Running neural networks (NNs) on microcontroller units (MCUs) is becoming\nincreasingly important, but is very difficult due to the tiny SRAM size of MCU.\nPrior work proposes many algorithm-level techniques to reduce NN memory\nfootprints, but all at the cost of sacrificing accuracy and generality, which\ndisqualifies MCUs for many important use cases. We investigate a system\nsolution for MCUs to execute NNs out of core: dynamically swapping NN data\nchunks between an MCU's tiny SRAM and its large, low-cost external flash.\nOut-of-core NNs on MCUs raise multiple concerns: execution slowdown, storage\nwear out, energy consumption, and data security. We present a study showing\nthat none is a showstopper; the key benefit -- MCUs being able to run large NNs\nwith full accuracy and generality -- triumphs the overheads. Our findings\nsuggest that MCUs can play a much greater role in edge intelligence.\n", "versions": [{"version": "v1", "created": "Thu, 14 Jan 2021 21:38:57 GMT"}, {"version": "v2", "created": "Fri, 5 Feb 2021 15:58:50 GMT"}], "update_date": "2021-02-08", "authors_parsed": [["Miao", "Hongyu", ""], ["Lin", "Felix Xiaozhu", ""]]}, {"id": "2101.08877", "submitter": "Geunsik Lim", "authors": "Geunsik Lim, Changwoo Min, and Young Ik Eom", "title": "Virtual Memory Partitioning for Enhancing Application Performance in\n  Mobile Platforms", "comments": null, "journal-ref": null, "doi": "10.1109/TCE.2013.6689690", "report-no": null, "categories": "cs.AR cs.OS cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Recently, the amount of running software on smart mobile devices is gradually\nincreasing due to the introduction of application stores. The application store\nis a type of digital distribution platform for application software, which is\nprovided as a component of an operating system on a smartphone or tablet.\nMobile devices have limited memory capacity and, unlike server and desktop\nsystems, due to their mobility they do not have a memory slot that can expand\nthe memory capacity. Low memory killer (LMK) and out-of-memory killer (OOMK)\nare widely used memory management solutions in mobile systems. They forcibly\nterminate applications when the available physical memory becomes insufficient.\nIn addition, before the forced termination, the memory shortage incurs\nthrashing and fragmentation, thus slowing down application performance.\nAlthough the existing page reclamation mechanism is designed to secure\navailable memory, it could seriously degrade user responsiveness due to the\nthrashing. Memory management is therefore still important especially in mobile\ndevices with small memory capacity. This paper presents a new memory\npartitioning technique that resolves the deterioration of the existing\napplication life cycle induced by LMK and OOMK. It provides a completely\nisolated virtual memory node at the operating system level. Evaluation results\ndemonstrate that the proposed method improves application execution time under\nmemory shortage, compared with methods in previous studies.\n", "versions": [{"version": "v1", "created": "Thu, 21 Jan 2021 22:54:21 GMT"}], "update_date": "2021-01-25", "authors_parsed": [["Lim", "Geunsik", ""], ["Min", "Changwoo", ""], ["Eom", "Young Ik", ""]]}, {"id": "2101.08885", "submitter": "Geunsik Lim", "authors": "Geunsik Lim, Changwoo Min, Dong Hyun Kang, and Young Ik Eom", "title": "User-Aware Power Management for Mobile Devices", "comments": null, "journal-ref": null, "doi": "10.1109/GCCE.2013.6664780", "report-no": null, "categories": "cs.AR cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The power management techniques to extend battery lifespan is becoming\nincreasingly important due to longer user applications' running time in mobile\ndevices. Even when users do not use any applications, battery lifespan\ndecreases continually. It occurs because of service daemons of mobile platform\nand network-based data synchronization operations. In this paper, we propose a\nnew power management system that recognizes the idle time of the device to\nreduce the battery consumption of mobile devices.\n", "versions": [{"version": "v1", "created": "Thu, 21 Jan 2021 23:17:42 GMT"}], "update_date": "2021-01-25", "authors_parsed": [["Lim", "Geunsik", ""], ["Min", "Changwoo", ""], ["Kang", "Dong Hyun", ""], ["Eom", "Young Ik", ""]]}, {"id": "2101.09282", "submitter": "Yuval Tamir", "authors": "Michael Le and Yuval Tamir", "title": "Resilient Virtualized Systems Using ReHype", "comments": null, "journal-ref": null, "doi": null, "report-no": "UCLA CSD Technical Report #140019", "categories": "cs.SE cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  System-level virtualization introduces critical vulnerabilities to failures\nof the software components that implement virtualization -- the virtualization\ninfrastructure (VI). To mitigate the impact of such failures, we introduce a\nresilient VI (RVI) that can recover individual VI components from failure,\ncaused by hardware or software faults, transparently to the hosted virtual\nmachines (VMs). Much of the focus is on the ReHype mechanism for recovery from\nhypervisor failures, that can lead to state corruption and to inconsistencies\namong the states of system components. ReHype's implementation for the Xen\nhypervisor was done incrementally, using fault injection results to identify\nsources of critical corruption and inconsistencies. This implementation\ninvolved 900 LOC, with memory space overhead of 2.1MB. Fault injection\ncampaigns, with a variety of fault types, show that ReHype can successfully\nrecover, in less than 750ms, from over 88% of detected hypervisor failures. In\naddition to ReHype, recovery mechanisms for the other VI components are\ndescribed. The overall effectiveness of our RVI is evaluated hosting a Web\nservice application, on a cluster of VMs. With faults in any VI component, for\nover 87% of detected failures, our recovery mechanisms allow services provided\nby the application to be continuously maintained despite the resulting failures\nof VI components.\n", "versions": [{"version": "v1", "created": "Sat, 23 Jan 2021 22:43:28 GMT"}], "update_date": "2021-01-26", "authors_parsed": [["Le", "Michael", ""], ["Tamir", "Yuval", ""]]}, {"id": "2101.09284", "submitter": "Geunsik Lim", "authors": "Geunsik Lim and Sang-Bum Suh", "title": "User-Level Memory Scheduler for Optimizing Application Performance in\n  NUMA-Based Multicore Systems", "comments": null, "journal-ref": null, "doi": "10.1109/ICSESS.2014.6933553", "report-no": null, "categories": "cs.DC cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Multicore CPU architectures have been established as a structure for\ngeneral-purpose systems for high-performance processing of applications. Recent\nmulticore CPU has evolved as a system architecture based on non-uniform memory\narchitecture. For the technique of using the kernel space that shifts the tasks\nto the ideal memory node, the characteristics of the applications of the\nuser-space cannot be considered. Therefore, kernel level approaches cannot\nexecute memory scheduling to recognize the importance of user applications.\nMoreover, users need to run applications after sufficiently understanding the\nmulticore CPU based on non-uniform memory architecture to ensure the high\nperformance of the user's applications. This paper presents a user-space memory\nscheduler that allocates the ideal memory node for tasks by monitoring the\ncharacteristics of non-uniform memory architecture. From our experiment, the\nproposed system improved the performance of the application by up to 25%\ncompared to the existing system.\n", "versions": [{"version": "v1", "created": "Thu, 21 Jan 2021 23:28:55 GMT"}], "update_date": "2021-01-26", "authors_parsed": [["Lim", "Geunsik", ""], ["Suh", "Sang-Bum", ""]]}, {"id": "2101.09360", "submitter": "Geunsik Lim", "authors": "Geunsik Lim and MyungJoo Ham", "title": "BB: Booting Booster for Consumer Electronics with Modern OS", "comments": null, "journal-ref": null, "doi": "10.1145/2901318.2901320", "report-no": null, "categories": "cs.DC cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Unconventional computing platforms have spread widely and rapidly following\nsmart phones and tablets: consumer electronics such as smart TVs and digital\ncameras. For such devices, fast booting is a critical requirement; waiting tens\nof seconds for a TV or a camera to boot up is not acceptable, unlike a PC or\nsmart phone. Moreover, the software platforms of these devices have become as\nrich as conventional computing devices to provide comparable services. As a\nresult, the booting procedure to start every required OS service, hardware\ncomponent, and application, the quantity of which is ever increasing, may take\nunbearable time for most consumers. To accelerate booting, this paper\nintroduces \\textit{Booting Booster} (BB), which is used in all 2015 Samsung\nSmart TV models, and which runs the Linux-based Tizen OS. BB addresses the init\nscheme of Linux, which launches initial user-space OS services and applications\nand manages the life cycles of all user processes, by identifying and isolating\nbooting-critical tasks, deferring non-critical tasks, and enabling execution of\nmore tasks in parallel. BB has been successfully deployed in Samsung Smart TV\n2015 models achieving a cold boot in 3.5 s (compared to 8.1 s with full\ncommercial-grade optimizations without BB) without the need for suspend-to-RAM\nor hibernation. After this successful deployment, we have released the source\ncode via http://opensource.samsung.com, and BB will be included in the\nopen-source OS, Tizen (http://tizen.org).\n", "versions": [{"version": "v1", "created": "Thu, 21 Jan 2021 08:32:13 GMT"}], "update_date": "2021-01-26", "authors_parsed": [["Lim", "Geunsik", ""], ["Ham", "MyungJoo", ""]]}, {"id": "2101.09584", "submitter": "Yuval Tamir", "authors": "Diyu Zhou and Yuval Tamir", "title": "HyCoR: Fault-Tolerant Replicated Containers Based on Checkpoint and\n  Replay", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  HyCoR is a fully-operational fault tolerance mechanism for multiprocessor\nworkloads, based on container replication, using a hybrid of checkpointing and\nreplay. HyCoR derives from two insights regarding replication mechanisms: 1)\ndeterministic replay can overcome a key disadvantage of checkpointing alone --\nunacceptably long delays of outputs to clients, and 2) checkpointing can\novercome a key disadvantage of active replication with deterministic replay\nalone -- vulnerability to even rare replay failures due to an untracked\nnondeterministic events. With HyCoR, the primary sends periodic checkpoints to\nthe backup and logs the outcomes of sources of nondeterminism. Outputs to\nclients are delayed only by the short time it takes to send the corresponding\nlog to the backup. Upon primary failure, the backup replays only the short\ninterval since the last checkpoint, thus minimizing the window of\nvulnerability. HyCoR includes a \"best effort\" mechanism that results in a high\nrecovery rate even in the presence of data races, as long as their rate is low.\nThe evaluation includes measurement of the recovery rate and recovery latency\nbased on fault injection. On average, HyCoR delays responses to clients by less\nthan 1ms and recovers in less than 1s. For a set of eight real-world\nbenchmarks, if data races are eliminated, the performance overhead of HyCoR is\nunder 59%.\n", "versions": [{"version": "v1", "created": "Sat, 23 Jan 2021 21:08:25 GMT"}], "update_date": "2021-01-26", "authors_parsed": [["Zhou", "Diyu", ""], ["Tamir", "Yuval", ""]]}, {"id": "2101.10707", "submitter": "Geunsik Lim", "authors": "Geunsik Lim, Changwoo Min, and Young Ik Eom", "title": "Enhancing Application Performance by Memory Partitioning in Android\n  Platforms", "comments": null, "journal-ref": null, "doi": "10.1109/ICCE.2013.6487055", "report-no": null, "categories": "cs.OS cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper suggests a new memory partitioning scheme that can enhance process\nlifecycle, while avoiding Low Memory Killer and Out-of-Memory Killer operations\non mobile devices. Our proposed scheme offers the complete concept of virtual\nmemory nodes in operating systems of Android devices.\n", "versions": [{"version": "v1", "created": "Tue, 26 Jan 2021 11:03:02 GMT"}], "update_date": "2021-01-27", "authors_parsed": [["Lim", "Geunsik", ""], ["Min", "Changwoo", ""], ["Eom", "Young Ik", ""]]}]