[{"id": "2107.07255", "submitter": "Michel Rottleuthner", "authors": "Kevin Weiss and Michel Rottleuthner and Thomas C. Schmidt and Matthias\n  W\\\"ahlisch", "title": "PHiLIP on the HiL: Automated Multi-platform OS Testing with External\n  Reference Devices", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "eess.SY cs.OS cs.SE cs.SY", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Developing an operating system (OS) for low-end embedded devices requires\ncontinuous adaptation to new hardware architectures and components, while\nserviceability of features needs to be assured for each individual platform\nunder tight resource constraints. It is challenging to design a versatile and\naccurate heterogeneous test environment that is agile enough to cover a\ncontinuous evolution of the code base and platforms. This mission is even\nmorehallenging when organized in an agile open-source community process with\nmany contributors such as for the RIOT OS. Hardware in the Loop (HiL) testing\nand Continuous Integration (CI) are automatable approaches to verify\nfunctionality, prevent regressions, and improve the overall quality at\ndevelopment speed in large community projects. In this paper, we present PHiLIP\n(Primitive Hardware in the Loop Integration Product), an open-source external\nreference device together with tools that validate the system software while it\ncontrols hardware and interprets physical signals. Instead of focusing on a\nspecific test setting, PHiLIP takes the approach of a tool-assisted agile HiL\ntest process, designed for continuous evolution and deployment cycles. We\nexplain its design, describe how it supports HiL tests, evaluate performance\nmetrics, and report on practical experiences of employing PHiLIP in an\nautomated CI test infrastructure. Our initial deployment comprises 22 unique\nplatforms, each of which executes 98 peripheral tests every night. PHiLIP\nallows for easy extension of low-cost, adaptive testing infrastructures but\nserves testing techniques and tools to a much wider range of applications.\n", "versions": [{"version": "v1", "created": "Thu, 15 Jul 2021 11:26:31 GMT"}], "update_date": "2021-07-16", "authors_parsed": [["Weiss", "Kevin", ""], ["Rottleuthner", "Michel", ""], ["Schmidt", "Thomas C.", ""], ["W\u00e4hlisch", "Matthias", ""]]}, {"id": "2107.13848", "submitter": "Youyou Lu", "authors": "Kan Zhong, Wenlin Cui, Youyou Lu, Quanzhang Liu, Xiaodan Yan, Qizhao\n  Yuan, Siwei Luo, and Keji Huang", "title": "Revisiting Swapping in User-space with Lightweight Threading", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Memory-intensive applications, such as in-memory databases, caching systems\nand key-value stores, are increasingly demanding larger main memory to fit\ntheir working sets. Conventional swapping can enlarge the memory capacity by\npaging out inactive pages to disks. However, the heavy I/O stack makes the\ntraditional kernel-based swapping suffers from several critical performance\nissues.\n  In this paper, we redesign the swapping system and propose LightSwap, an\nhigh-performance user-space swapping scheme that supports paging with both\nlocal SSDs and remote memories. First, to avoids kernel-involving, a novel page\nfault handling mechanism is proposed to handle page faults in user-space and\nfurther eliminates the heavy I/O stack with the help of user-space I/O drivers.\nSecond, we co-design Lightswap with light weight thread (LWT) to improve system\nthroughput and make it be transparent to user applications. Finally, we propose\na try-catch framework in Lightswap to deal with paging errors which are\nexacerbated by the scaling in process technology.\n  We implement Lightswap in our production-level system and evaluate it with\nYCSB workloads running on memcached. Results show that Ligthswap reduces the\npage faults handling latency by 3--5 times, and improves the throughput of\nmemcached by more than 40% compared with the stat-of-art swapping systems.\n", "versions": [{"version": "v1", "created": "Thu, 29 Jul 2021 09:29:37 GMT"}], "update_date": "2021-07-30", "authors_parsed": [["Zhong", "Kan", ""], ["Cui", "Wenlin", ""], ["Lu", "Youyou", ""], ["Liu", "Quanzhang", ""], ["Yan", "Xiaodan", ""], ["Yuan", "Qizhao", ""], ["Luo", "Siwei", ""], ["Huang", "Keji", ""]]}]