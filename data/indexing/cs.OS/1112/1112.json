[{"id": "1112.4451", "submitter": "Abhijat Vichare", "authors": "Abhijat Vichare", "title": "What is an OS?", "comments": "Major changes: Improvised the discussion of the implicit assumptions,\n  added a sketch of a theory of an OS, and added a figure. Comments welcome. 32\n  pages, 5 figures. Submitted", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  While the engineering of operating systems is well understood, their formal\nstructure and properties are not. The latter needs a clear definition of the\npurpose of an OS and an identification of the core. In this paper I offer\ndefinitions of the OS, processes and files, and present a few useful\nprinciples. The principles allow us to identify work like closure and\ncontinuation algorithms, in programming languages that is useful for the OS\nproblem. The definitions and principles should yield a symbolic, albeit\nsemiquantitative, framework that encompasses practice. Towards that end I\nspecialise the definitions to describe conventional OSes and identify the core\noperations for a single computer OS that can be used to express their\nalgorithms. The assumptions underlying the algorithms offer the design space\nframework. The paging and segmentation algorithms for conventional OSes are\nextracted from the framework as a check. Among the insights the emerge is that\nan OS is a constructive proof of equivalence between models of computation.\nClear and useful definitions and principles are the first step towards a fully\nquantitative structure of an OS.\n", "versions": [{"version": "v1", "created": "Mon, 19 Dec 2011 20:07:54 GMT"}, {"version": "v2", "created": "Fri, 17 Feb 2012 20:40:00 GMT"}], "update_date": "2012-02-20", "authors_parsed": [["Vichare", "Abhijat", ""]]}, {"id": "1112.5136", "submitter": "Richard West", "authors": "Ye Li, Matthew Danish and Richard West", "title": "Quest-V: A Virtualized Multikernel for High-Confidence Systems", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper outlines the design of `Quest-V', which is implemented as a\ncollection of separate kernels operating together as a distributed system on a\nchip. Quest-V uses virtualization techniques to isolate kernels and prevent\nlocal faults from affecting remote kernels. This leads to a high-confidence\nmultikernel approach, where failures of system subcomponents do not render the\nentire system inoperable. A virtual machine monitor for each kernel keeps track\nof shadow page table mappings that control immutable memory access\ncapabilities. This ensures a level of security and fault tolerance in\nsituations where a service in one kernel fails, or is corrupted by a malicious\nattack. Communication is supported between kernels using shared memory regions\nfor message passing. Similarly, device driver data structures are shareable\nbetween kernels to avoid the need for complex I/O virtualization, or\ncommunication with a dedicated kernel responsible for I/O. In Quest-V, device\ninterrupts are delivered directly to a kernel, rather than via a monitor that\ndetermines the destination. Apart from bootstrapping each kernel, handling\nfaults and managing shadow page tables, the monitors are not needed. This\ndiffers from conventional virtual machine systems in which a central monitor,\nor hypervisor, is responsible for scheduling and management of host resources\namongst a set of guest kernels. In this paper we show how Quest-V can implement\nnovel fault isolation and recovery techniques that are not possible with\nconventional systems. We also show how the costs of using virtualization for\nisolation of system services does not add undue overheads to the overall system\nperformance.\n", "versions": [{"version": "v1", "created": "Wed, 21 Dec 2011 19:02:12 GMT"}], "update_date": "2011-12-22", "authors_parsed": [["Li", "Ye", ""], ["Danish", "Matthew", ""], ["West", "Richard", ""]]}]