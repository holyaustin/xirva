[{"id": "1212.1787", "submitter": "Rohan Garg", "authors": "Rohan Garg, Komal Sodha and Gene Cooperman", "title": "A Generic Checkpoint-Restart Mechanism for Virtual Machines", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  It is common today to deploy complex software inside a virtual machine (VM).\nSnapshots provide rapid deployment, migration between hosts, dependability\n(fault tolerance), and security (insulating a guest VM from the host). Yet, for\neach virtual machine, the code for snapshots is laboriously developed on a\nper-VM basis. This work demonstrates a generic checkpoint-restart mechanism for\nvirtual machines. The mechanism is based on a plugin on top of an unmodified\nuser-space checkpoint-restart package, DMTCP. Checkpoint-restart is\ndemonstrated for three virtual machines: Lguest, user-space QEMU, and KVM/QEMU.\nThe plugins for Lguest and KVM/QEMU require just 200 lines of code. The Lguest\nkernel driver API is augmented by 40 lines of code. DMTCP checkpoints\nuser-space QEMU without any new code. KVM/QEMU, user-space QEMU, and DMTCP need\nno modification. The design benefits from other DMTCP features and plugins.\nExperiments demonstrate checkpoint and restart in 0.2 seconds using forked\ncheckpointing, mmap-based fast-restart, and incremental Btrfs-based snapshots.\n", "versions": [{"version": "v1", "created": "Sat, 8 Dec 2012 12:56:49 GMT"}], "update_date": "2012-12-11", "authors_parsed": [["Garg", "Rohan", ""], ["Sodha", "Komal", ""], ["Cooperman", "Gene", ""]]}, {"id": "1212.2778", "submitter": "Vincenzo Bonifaci", "authors": "Vincenzo Bonifaci and Alberto Marchetti-Spaccamela and Sebastian\n  Stiller and Andreas Wiese", "title": "Feasibility Tests for Recurrent Real-Time Tasks in the Sporadic DAG\n  Model", "comments": null, "journal-ref": "Proceedings of the 2013 25th Euromicro Conference on Real-Time\n  Systems", "doi": "10.1109/ECRTS.2013.32", "report-no": null, "categories": "cs.DS cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  A model has been proposed in [Baruah et al., in Proceedings of the IEEE\nReal-Time Systems Symposium 2012] for representing recurrent\nprecedence-constrained tasks to be executed on multiprocessor platforms, where\neach recurrent task is modeled by a directed acyclic graph (DAG), a period, and\na relative deadline. Each vertex of the DAG represents a sequential job, while\nthe edges of the DAG represent precedence constraints between these jobs. All\nthe jobs of the DAG are released simultaneously and have to be completed within\nsome specified relative deadline. The task may release jobs in this manner an\nunbounded number of times, with successive releases occurring at least the\nspecified period apart. The feasibility problem is to determine whether such a\nrecurrent task can be scheduled to always meet all deadlines on a specified\nnumber of dedicated processors.\n  The case of a single task has been considered in [Baruah et al., 2012]. The\nmain contribution of this paper is to consider the case of multiple tasks. We\nshow that EDF has a speedup bound of 2-1/m, where m is the number of\nprocessors. Moreover, we present polynomial and pseudopolynomial schedulability\ntests, of differing effectiveness, for determining whether a set of sporadic\nDAG tasks can be scheduled by EDF to meet all deadlines on a specified number\nof processors.\n", "versions": [{"version": "v1", "created": "Wed, 12 Dec 2012 11:37:48 GMT"}], "update_date": "2019-07-01", "authors_parsed": [["Bonifaci", "Vincenzo", ""], ["Marchetti-Spaccamela", "Alberto", ""], ["Stiller", "Sebastian", ""], ["Wiese", "Andreas", ""]]}, {"id": "1212.3502", "submitter": "Shri Prakash Dwivedi", "authors": "Shri Prakash Dwivedi", "title": "Adaptive Scheduling in Real-Time Systems Through Period Adjustment", "comments": "8 pages, 5 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Real time system technology traditionally developed for safety critical\nsystems, has now been extended to support multimedia systems and virtual\nreality. A large number of real-time application, related to multimedia and\nadaptive control system, require more flexibility than classical real-time\ntheory usually permits. This paper proposes an efficient adaptive scheduling\nframework in real-time systems based on period adjustment. Under this model\nperiodic task can change their execution rates based on their importance value\nto keep the system underloaded. We propose Period_Adjust algorithm, which\nconsider the tasks whose periods are bounded as well as the tasks whose periods\nare not bounded.\n", "versions": [{"version": "v1", "created": "Fri, 14 Dec 2012 15:33:45 GMT"}], "update_date": "2012-12-17", "authors_parsed": [["Dwivedi", "Shri Prakash", ""]]}, {"id": "1212.6354", "submitter": "Muhammad Imran Imran", "authors": "Sajjad Haider, Mehboob Yasin, Naveed Hussain, Muhammad Imran", "title": "LNOS - Live Network Operating System", "comments": "6th CIIT Workshop on Research in Computing (CWRC, 2007)", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.NI cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Operating Systems exists since existence of computers, and have been evolving\ncontinuously from time to time. In this paper we have reviewed a relatively new\nor unexplored topic of Live OS. From networking perspective, Live OS is used\nfor establishing Clusters, Firewalls and as Network security assessment tool\netc. Our proposed concept is that a Live OS can be established or configured\nfor an organizations specific network requirements with respect to their\nservers. An important server failure due to hardware or software could take\ntime for remedy of the problem, so for that situation a preconfigured server in\nthe form of Live OS on CD/DVD/USB can be used as an immediate solution. In a\nnetwork of ten nodes, we stopped the server machine and with necessary\nadjustments, Live OS replaced the server in less than five minutes. Live OS in\na network environment is a quick replacement of the services that are failed\ndue to server failure (hardware or software). It is a cost effective solution\nfor low budget networks. The life of Live OS starts when we boot it from\nCD/DVD/USB and remains in action for that session. As soon as the machine is\nrebooted, any work done for that session is gone, (in case we do not store any\ninformation on permanent storage media). Live CD/DVD/USB is normally used on\nsystems where we do not have Operating Systems installed. A Live OS can also be\nused on systems where we already have an installed OS. On the basis of\nfunctionality a Live OS can be used for many purposes and has some typical\nadvantages that are not available on other operating systems. Vendors are\nreleasing different distributions of Live OS and is becoming their sole\nidentity in a particular domain like Networks, Security, Education or\nEntertainment etc. There can be many aspects of Live OS, but Linux based Live\nOS and their use in the field of networks is the main focus of this paper.\n", "versions": [{"version": "v1", "created": "Thu, 27 Dec 2012 11:55:43 GMT"}], "update_date": "2013-01-01", "authors_parsed": [["Haider", "Sajjad", ""], ["Yasin", "Mehboob", ""], ["Hussain", "Naveed", ""], ["Imran", "Muhammad", ""]]}]