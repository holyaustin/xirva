[{"id": "1306.0846", "submitter": "Gary McGilvary Mr", "authors": "Gary A. McGilvary, Adam Barker, Ashley Lloyd and Malcolm Atkinson", "title": "V-BOINC: The Virtualization of BOINC", "comments": "9 pages, Proceedings of the 13th IEEE/ACM International Symposium on\n  Cluster, Cloud and Grid Computing (CCGrid 2013)", "journal-ref": null, "doi": "10.1109/CCGrid.2013.14", "report-no": null, "categories": "cs.DC cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The Berkeley Open Infrastructure for Network Computing (BOINC) is an open\nsource client-server middleware system created to allow projects with large\ncomputational requirements, usually set in the scientific domain, to utilize a\ntechnically unlimited number of volunteer machines distributed over large\nphysical distances. However various problems exist deploying applications over\nthese heterogeneous machines using BOINC: applications must be ported to each\nmachine architecture type, the project server must be trusted to supply\nauthentic applications, applications that do not regularly checkpoint may lose\nexecution progress upon volunteer machine termination and applications that\nhave dependencies may find it difficult to run under BOINC.\n  To solve such problems we introduce virtual BOINC, or V-BOINC, where virtual\nmachines are used to run computations on volunteer machines. Application\ndevelopers can then compile their applications on a single architecture,\ncheckpointing issues are solved through virtualization API's and many security\nconcerns are addressed via the virtual machine's sandbox environment. In this\npaper we focus on outlining a unique approach on how virtualization can be\nintroduced into BOINC and demonstrate that V-BOINC offers acceptable\ncomputational performance when compared to regular BOINC. Finally we show that\napplications with dependencies can easily run under V-BOINC in turn increasing\nthe computational potential volunteer computing offers to the general public\nand project developers.\n", "versions": [{"version": "v1", "created": "Tue, 4 Jun 2013 16:27:30 GMT"}], "update_date": "2016-11-15", "authors_parsed": [["McGilvary", "Gary A.", ""], ["Barker", "Adam", ""], ["Lloyd", "Ashley", ""], ["Atkinson", "Malcolm", ""]]}, {"id": "1306.1316", "submitter": "Jo\\\"el Goossens", "authors": "Jo\\\"el Goossens (1), Pascal Richard (2) ((1) ULB, (2) LIAS/Ensma and\n  Universit\\'e de Poitiers)", "title": "Partitioned scheduling of multimode multiprocessor real-time systems\n  with temporal isolation", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We consider the partitioned scheduling problem of multimode real-time systems\nupon identical multiprocessor platforms. During the execution of a multimode\nsystem, the system can change from one mode to another such that the current\ntask set is replaced with a new one. In this paper, we consider a synchronous\ntransition protocol in order to take into account mode-independent tasks, i.e.,\ntasks of which the execution pattern must not be jeopardized by the mode\nchanges. We propose two methods for handling mode changes in partitioned\nscheduling. The first method is offline/optimal and computes a static\nallocation of tasks schedulable and respecting both tasks and transition\ndeadlines (if any). The second approach is subject to a sufficient condition in\norder to ensure online First Fit based allocation to satisfy the timing\nconstraints.\n", "versions": [{"version": "v1", "created": "Thu, 6 Jun 2013 06:57:57 GMT"}], "update_date": "2013-06-07", "authors_parsed": [["Goossens", "Jo\u00ebl", ""], ["Richard", "Pascal", ""]]}]