[{"id": "1109.2638", "submitter": "Fabiano Botelho Dr.", "authors": "Nitin Garg and Ed Zhu and Fabiano C. Botelho", "title": "Light-weight Locks", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this paper, we propose a new approach to building synchronization\nprimitives, dubbed \"lwlocks\" (short for light-weight locks). The primitives are\noptimized for small memory footprint while maintaining efficient performance in\nlow contention scenarios. A read-write lwlock occupies 4 bytes, a mutex\noccupies 4 bytes (2 if deadlock detection is not required), and a condition\nvariable occupies 4 bytes. The corresponding primitives of the popular pthread\nlibrary occupy 56 bytes, 40 bytes and 48 bytes respectively on the x86-64\nplatform. The API for lwlocks is similar to that of the pthread library but\ncovering only the most common use cases. Lwlocks allow explicit control of\nqueuing and scheduling decisions in contention situations and support\n\"asynchronous\" or \"deferred blocking\" acquisition of locks. Asynchronous\nlocking helps in working around the constraints of lock-ordering which\notherwise limits concurrency. The small footprint of lwlocks enables the\nconstruction of data structures with very fine-grained locking, which in turn\nis crucial for lowering contention and supporting highly concurrent access to a\ndata structure. Currently, the Data Domain File System uses lwlocks for its\nin-memory inode cache as well as in a generic doubly-linked concurrent list\nwhich forms the building block for more sophisticated structures.\n", "versions": [{"version": "v1", "created": "Mon, 12 Sep 2011 21:49:38 GMT"}], "update_date": "2011-09-14", "authors_parsed": [["Garg", "Nitin", ""], ["Zhu", "Ed", ""], ["Botelho", "Fabiano C.", ""]]}, {"id": "1109.3075", "submitter": "Rakesh Mohanty", "authors": "Rakesh Mohanty, Manas Das, M. Lakshmi Prasanna, Sudhashree", "title": "Design and Performance Evaluation of A New Proposed Fittest Job First\n  Dynamic Round Robin(FJFDRR) Scheduling Algorithm", "comments": "05 Pages, 12 Figures, International Journal of Computer Information\n  Systems Vol. 2, No. 2, February 2011", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this paper, we have proposed a new variant of Round Robin scheduling\nalgorithm by executing the processes according to the new calculated Fit Factor\nf and using the concept of dynamic time quantum. We have compared the\nperformance of our proposed Fittest Job First Dynamic Round Robin(FJFDRR)\nalgorithm with the Priority Based Static Round Robin(PBSRR) algorithm.\nExperimental results show that our proposed algorithm performs better than\nPBSRR in terms of reducing the number of context switches, average waiting time\nand average turnaround time.\n", "versions": [{"version": "v1", "created": "Wed, 14 Sep 2011 13:26:07 GMT"}], "update_date": "2011-09-15", "authors_parsed": [["Mohanty", "Rakesh", ""], ["Das", "Manas", ""], ["Prasanna", "M. Lakshmi", ""], ["Sudhashree", "", ""]]}, {"id": "1109.3076", "submitter": "Rakesh Mohanty", "authors": "H. S. Behera, Rakesh Mohanty, Sabyasachi Sahu, Sourav Kumar Bhoi", "title": "Comparative performance analysis of multi dynamic time quantum Round\n  Robin(MDTQRR) algorithm with arrival time", "comments": "10 pages, 18 Figures, Indian Journal of Computer Science and\n  Engineering vol. 2 no. 2 April-May 2011", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  CPU being considered a primary computer resource, its scheduling is central\nto operating-system design. A thorough performance evaluation of various\nscheduling algorithms manifests that Round Robin Algorithm is considered as\noptimal in time shared environment because the static time is equally shared\namong the processes. We have proposed an efficient technique in the process\nscheduling algorithm by using dynamic time quantum in Round Robin. Our approach\nis based on the calculation of time quantum twice in single round robin cycle.\nTaking into consideration the arrival time, we implement the algorithm.\nExperimental analysis shows better performance of this improved algorithm over\nthe Round Robin algorithm and the Shortest Remaining Burst Round Robin\nalgorithm. It minimizes the overall number of context switches, average waiting\ntime and average turn-around time. Consequently the throughput and CPU\nutilization is better.\n", "versions": [{"version": "v1", "created": "Wed, 14 Sep 2011 13:32:55 GMT"}], "update_date": "2011-09-15", "authors_parsed": [["Behera", "H. S.", ""], ["Mohanty", "Rakesh", ""], ["Sahu", "Sabyasachi", ""], ["Bhoi", "Sourav Kumar", ""]]}]