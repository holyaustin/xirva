[{"id": "1504.01666", "submitter": "Niv Dayan", "authors": "Niv Dayan, Philippe Bonnet", "title": "Garbage Collection Techniques for Flash-Resident Page-Mapping FTLs", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DB cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Storage devices based on flash memory have replaced hard disk drives (HDDs)\ndue to their superior performance, increasing density, and lower power\nconsumption. Unfortunately, flash memory is subject to challenging\nidiosyncrasies like erase-before-write and limited block lifetime. These\nconstraints are handled by a flash translation layer (FTL), which performs\nout-of-place updates, wear-leveling and garbage-collection behind the scene,\nwhile offering the application a virtualization of the physical address space.\n  A class of relevant FTLs employ a flash-resident page-associative mapping\ntable from logical to physical addresses, with a smaller RAM-resident cache for\nfrequently mapped entries. In this paper, we address the problem of performing\ngarbage-collection under such FTLs. We observe two problems. Firstly,\nmaintaining the metadata needed to perform garbage-collection under these\nschemes is problematic, because at write-time we do not necessarily know the\nphysical address of the before-image. Secondly, the size of this metadata must\nremain small, because it makes RAM unavailable for caching frequently accessed\nentries. We propose two complementary techniques, called Lazy Gecko and\nLogarithmic Gecko, which address these issues. Lazy Gecko works well when RAM\nis plentiful enough to store the GC metadata. Logarithmic Gecko works well when\nRAM isn't plentiful and efficiently stores the GC metadata in flash. Thus,\nthese techniques are applicable to a wide range of flash devices with varying\namounts of embedded RAM.\n", "versions": [{"version": "v1", "created": "Tue, 7 Apr 2015 16:58:31 GMT"}], "update_date": "2015-04-08", "authors_parsed": [["Dayan", "Niv", ""], ["Bonnet", "Philippe", ""]]}, {"id": "1504.02517", "submitter": "Sugata Sanyal", "authors": "Tuhin Borgohain, Uday Kumar, Sugata Sanyal", "title": "Survey of Operating Systems for the IoT Environment", "comments": "5 pages, 7 tables", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper is a comprehensive survey of the various operating systems\navailable for the Internet of Things environment. At first the paper introduces\nthe various aspects of the operating systems designed for the IoT environment\nwhere resource constraint poses a huge problem for the operation of the general\nOS designed for the various computing devices. The latter part of the paper\ndescribes the various OS available for the resource constraint IoT environment\nalong with the various platforms each OS supports, the software development\nkits available for the development of applications in the respective OS along\nwith the various protocols implemented in these OS for the purpose of\ncommunication and networking.\n", "versions": [{"version": "v1", "created": "Thu, 9 Apr 2015 23:17:01 GMT"}, {"version": "v2", "created": "Mon, 13 Apr 2015 13:39:37 GMT"}], "update_date": "2015-04-14", "authors_parsed": [["Borgohain", "Tuhin", ""], ["Kumar", "Uday", ""], ["Sanyal", "Sugata", ""]]}, {"id": "1504.03875", "submitter": "Kevin Roussel", "authors": "K\\'evin Roussel (INRIA Nancy - Grand Est / LORIA), Ye-Qiong Song\n  (INRIA Nancy - Grand Est / LORIA), Olivier Zendra (INRIA Nancy - Grand Est /\n  LORIA)", "title": "RIOT OS Paves the Way for Implementation of High-Performance MAC\n  Protocols", "comments": "SCITEPRESS. SENSORNETS 2015, Feb 2015, Angers, France.\n  http://www.scitepress.org", "journal-ref": null, "doi": "10.5220/0005237600050014", "report-no": null, "categories": "cs.NI cs.OS cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Implementing new, high-performance MAC protocols requires real-time features,\nto be able to synchronize correctly between different unrelated devices. Such\nfeatures are highly desirable for operating wireless sensor networks (WSN) that\nare designed to be part of the Internet of Things (IoT). Unfortunately, the\noperating systems commonly used in this domain cannot provide such features. On\nthe other hand, \"bare-metal\" development sacrifices portability, as well as the\nmul-titasking abilities needed to develop the rich applications that are useful\nin the domain of the Internet of Things. We describe in this paper how we\nhelped solving these issues by contributing to the development of a port of\nRIOT OS on the MSP430 microcontroller, an architecture widely used in\nIoT-enabled motes. RIOT OS offers rich and advanced real-time features,\nespecially the simultaneous use of as many hardware timers as the underlying\nplatform (microcontroller) can offer. We then demonstrate the effectiveness of\nthese features by presenting a new implementation, on RIOT OS, of S-CoSenS, an\nefficient MAC protocol that uses very low processing power and energy.\n", "versions": [{"version": "v1", "created": "Wed, 15 Apr 2015 12:05:59 GMT"}], "update_date": "2015-04-16", "authors_parsed": [["Roussel", "K\u00e9vin", "", "INRIA Nancy - Grand Est / LORIA"], ["Song", "Ye-Qiong", "", "INRIA Nancy - Grand Est / LORIA"], ["Zendra", "Olivier", "", "INRIA Nancy - Grand Est /\n  LORIA"]]}, {"id": "1504.04640", "submitter": "Daviid Dice", "authors": "Dave Dice, Tim Harris, Alex Kogan, Yossi Lev", "title": "The Influence of Malloc Placement on TSX Hardware Transactional Memory", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The hardware transactional memory (HTM) implementation in Intel's i7-4770\n\"Haswell\" processor tracks the transactional read-set in the L1 (level-1), L2\n(level-2) and L3 (level-3) caches and the write-set in the L1 cache.\nDisplacement or eviction of read-set entries from the cache hierarchy or\nwrite-set entries from the L1 results in abort. We show that the placement\npolicies of dynamic storage allocators -- such as those found in common\n\"malloc\" implementations -- can influence the L1 conflict miss rate in the L1.\nConflict misses -- sometimes called mapping misses -- arise because of less\nthan ideal associativity and represent imbalanced distribution of active memory\nblocks over the set of available L1 indices. Under transactional execution\nconflict misses may manifest as aborts, representing wasted or futile effort\ninstead of a simple stall as would occur in normal execution mode.\n  Furthermore, when HTM is used for transactional lock elision (TLE),\npersistent aborts arising from conflict misses can force the offending thread\nthrough the so-called \"slow path\". The slow path is undesirable as the thread\nmust acquire the lock and run the critical section in normal execution mode,\nprecluding the concurrent execution of threads in the \"fast path\" that monitor\nthat same lock and run their critical sections in transactional mode. For a\ngiven lock, multiple threads can concurrently use the transactional fast path,\nbut at most one thread can use the non-transactional slow path at any given\ntime. Threads in the slow path preclude safe concurrent fast path execution.\nAborts rising from placement policies and L1 index imbalance can thus result in\nloss of concurrency and reduced aggregate throughput.\n", "versions": [{"version": "v1", "created": "Fri, 17 Apr 2015 21:13:07 GMT"}, {"version": "v2", "created": "Wed, 29 Apr 2015 20:05:56 GMT"}], "update_date": "2015-05-01", "authors_parsed": [["Dice", "Dave", ""], ["Harris", "Tim", ""], ["Kogan", "Alex", ""], ["Lev", "Yossi", ""]]}, {"id": "1504.06833", "submitter": "Michael Brim", "authors": "Joel Reed, Jeremy Archuleta, Michael J. Brim, Joshua Lothian", "title": "Evaluating Dynamic File Striping For Lustre", "comments": "International Workshop on the Lustre Ecosystem: Challenges and\n  Opportunities, March 2015, Annapolis MD", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We define dynamic striping as the ability to assign different Lustre striping\ncharacteristics to contiguous segments of a file as it grows. In this paper, we\nevaluate the effects of dynamic striping using a watermark-based strategy where\nthe stripe count or width is increased once a file's size exceeds one of the\nchosen watermarks. To measure the performance of this strategy we used a\nmodified version of the IOR benchmark, a netflow analysis workload, and the\nblastn algorithm from NCBI BLAST. The results indicate that dynamic striping is\nbeneficial to tasks with unpredictable data file size and large sequential\nreads, but are less conclusive for workloads with significant random read\nphases.\n", "versions": [{"version": "v1", "created": "Sun, 26 Apr 2015 14:44:00 GMT"}], "update_date": "2015-04-28", "authors_parsed": [["Reed", "Joel", ""], ["Archuleta", "Jeremy", ""], ["Brim", "Michael J.", ""], ["Lothian", "Joshua", ""]]}, {"id": "1504.06836", "submitter": "Michael Brim", "authors": "Michael J. Brim, Joshua K. Lothian", "title": "Monitoring Extreme-scale Lustre Toolkit", "comments": "International Workshop on the Lustre Ecosystem: Challenges and\n  Opportunities, March 2015, Annapolis MD", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We discuss the design and ongoing development of the Monitoring Extreme-scale\nLustre Toolkit (MELT), a unified Lustre performance monitoring and analysis\ninfrastructure that provides continuous, low-overhead summary information on\nthe health and performance of Lustre, as well as on-demand, in- depth problem\ndiagnosis and root-cause analysis. The MELT infrastructure leverages a\ndistributed overlay network to enable monitoring of center-wide Lustre\nfilesystems where clients are located across many network domains. We preview\ninteractive command-line utilities that help administrators and users to\nobserve Lustre performance at various levels of resolution, from individual\nservers or clients to whole filesystems, including job-level reporting.\nFinally, we discuss our future plans for automating the root-cause analysis of\ncommon Lustre performance problems.\n", "versions": [{"version": "v1", "created": "Sun, 26 Apr 2015 14:57:05 GMT"}], "update_date": "2015-04-28", "authors_parsed": [["Brim", "Michael J.", ""], ["Lothian", "Joshua K.", ""]]}, {"id": "1504.07070", "submitter": "Bryan Ford", "authors": "Weiyi Wu and Bryan Ford", "title": "Deterministically Deterring Timing Attacks in Deterland", "comments": "15 pages, 15 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The massive parallelism and resource sharing embodying today's cloud business\nmodel not only exacerbate the security challenge of timing channels, but also\nundermine the viability of defenses based on resource partitioning. We propose\nhypervisor-enforced timing mitigation to control timing channels in cloud\nenvironments. This approach closes \"reference clocks\" internal to the cloud by\nimposing a deterministic view of time on guest code, and uses timing mitigators\nto pace I/O and rate-limit potential information leakage to external observers.\nOur prototype hypervisor is the first system to mitigate timing-channel leakage\nacross full-scale existing operating systems such as Linux and applications in\narbitrary languages. Mitigation incurs a varying performance cost, depending on\nworkload and tunable leakage-limiting parameters, but this cost may be\njustified for security-critical cloud applications and data.\n", "versions": [{"version": "v1", "created": "Mon, 27 Apr 2015 13:08:26 GMT"}, {"version": "v2", "created": "Mon, 30 May 2016 13:35:25 GMT"}], "update_date": "2016-05-31", "authors_parsed": [["Wu", "Weiyi", ""], ["Ford", "Bryan", ""]]}, {"id": "1504.07481", "submitter": "Blake Caldwell", "authors": "Blake Caldwell", "title": "Improving Block-level Efficiency with scsi-mq", "comments": "International Workshop on the Lustre Ecosystem: Challenges and\n  Opportunities, March 2015, Annapolis MD", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Current generation solid-state storage devices are exposing a new bottlenecks\nin the SCSI and block layers of the Linux kernel, where IO throughput is\nlimited by lock contention, inefficient interrupt handling, and poor memory\nlocality. To address these limitations, the Linux kernel block layer underwent\na major rewrite with the blk-mq project to move from a single request queue to\na multi-queue model. The Linux SCSI subsystem rework to make use of this new\nmodel, known as scsi-mq, has been merged into the Linux kernel and work is\nunderway for dm-multipath support in the upcoming Linux 4.0 kernel. These\npieces were necessary to make use of the multi-queue block layer in a Lustre\nparallel filesystem with high availability requirements. We undertook adding\nsupport of the 3.18 kernel to Lustre with scsi-mq and dm-multipath patches to\nevaluate the potential of these efficiency improvements. In this paper we\nevaluate the block-level performance of scsi-mq with backing storage hardware\nrepresentative of a HPC-targerted Lustre filesystem. Our findings show that\nSCSI write request latency is reduced by as much as 13.6%. Additionally, when\nprofiling the CPU usage of our prototype Lustre filesystem, we found that CPU\nidle time increased by a factor of 7 with Linux 3.18 and blk-mq as compared to\na standard 2.6.32 Linux kernel. Our findings demonstrate increased efficiency\nof the multi-queue block layer even with disk-based caching storage arrays used\nin existing parallel filesystems.\n", "versions": [{"version": "v1", "created": "Tue, 28 Apr 2015 14:05:59 GMT"}], "update_date": "2015-04-29", "authors_parsed": [["Caldwell", "Blake", ""]]}]