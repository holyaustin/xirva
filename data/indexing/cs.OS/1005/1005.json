[{"id": "1005.3450", "submitter": "Bryan Ford", "authors": "Amittai Aviram, Shu-Chun Weng, Sen Hu, Bryan Ford (Yale University)", "title": "Efficient System-Enforced Deterministic Parallelism", "comments": "14 pages, 12 figures, 3 tables", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Deterministic execution offers many benefits for debugging, fault tolerance,\nand security. Running parallel programs deterministically is usually difficult\nand costly, however - especially if we desire system-enforced determinism,\nensuring precise repeatability of arbitrarily buggy or malicious software.\nDeterminator is a novel operating system that enforces determinism on both\nmultithreaded and multi-process computations. Determinator's kernel provides\nonly single-threaded, \"shared-nothing\" address spaces interacting via\ndeterministic synchronization. An untrusted user-level runtime uses distributed\ncomputing techniques to emulate familiar abstractions such as Unix processes,\nfile systems, and shared memory multithreading. The system runs parallel\napplications deterministically both on multicore PCs and across nodes in a\ncluster. Coarse-grained parallel benchmarks perform and scale comparably to -\nsometimes better than - conventional systems, though determinism is costly for\nfine-grained parallel applications.\n", "versions": [{"version": "v1", "created": "Wed, 19 May 2010 14:17:56 GMT"}], "update_date": "2010-05-20", "authors_parsed": [["Aviram", "Amittai", "", "Yale University"], ["Weng", "Shu-Chun", "", "Yale University"], ["Hu", "Sen", "", "Yale University"], ["Ford", "Bryan", "", "Yale University"]]}, {"id": "1005.5045", "submitter": "Mario Bravetti", "authors": "Mario Bravetti", "title": "File Managing and Program Execution in Web Operating Systems", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.SE cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Web Operating Systems can be seen as an extension of traditional Operating\nSystems where the addresses used to manage files and execute programs (via the\nbasic load/execution mechanism) are extended from local filesystem path-names\nto URLs. A first consequence is that, similarly as in traditional web\ntechnologies, executing a program at a given URL, can be done in two\nmodalities: either the execution is performed client-side at the invoking\nmachine (and relative URL addressing in the executed program set to refer to\nthe invoked URL) or it is performed server-side at the machine addressed by the\ninvoked URL (as, e.g., for a web service). Moreover in this context, user\nidentification for access to programs and files and workflow-based composition\nof service programs is naturally based on token/session-like mechanisms. We\npropose a middleware based on client-server protocols and on a set primitives,\nfor managing files/resources and executing programs (in the form of\nclient-side/server-side components/services) in Web Operating Systems. We\nformally define the semantics of such middleware via a process algebraic\napproach.\n", "versions": [{"version": "v1", "created": "Thu, 27 May 2010 12:28:51 GMT"}], "update_date": "2010-05-28", "authors_parsed": [["Bravetti", "Mario", ""]]}, {"id": "1005.5241", "submitter": "Jalil Boukhobza", "authors": "Jalil Boukhobza (LESTER), Timsit Claude (PRISM)", "title": "Simulation de traces r\\'eelles d'E/S disque de PC", "comments": null, "journal-ref": "RenPar'17 / SympA'2006 / CFSE'5 / JC'2006, Canet en Roussillon :\n  France (2006)", "doi": null, "report-no": null, "categories": "cs.PF cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Under Windows operating system, existing I/O benchmarking tools does not\nallow a developer to efficiently define a file access strategy according to the\napplications' constraints. This is essentially due to the fact that the\nexisting tools do allow only a restricted set of I/O workloads that does not\ngenerally correspond to the target applications. To cope with this problem, we\ndesigned and implemented a precise I/O simulator allowing to simulate whatever\nreal I/O trace on a given defined architecture, and in which most of file and\ndisk cache strategies, their interactions and the detailed storage system\narchitecture are implemented. Simulation results on different workloads and\narchitectures show a very high degree of precision. In fact, the mean error\nrate as compared to real measures is of about 6% with a maximum of 10% on\nglobal throughput.\n", "versions": [{"version": "v1", "created": "Fri, 28 May 2010 08:55:12 GMT"}], "update_date": "2010-07-26", "authors_parsed": [["Boukhobza", "Jalil", "", "LESTER"], ["Claude", "Timsit", "", "PRISM"]]}]