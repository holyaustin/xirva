[{"id": "1308.0698", "submitter": "Meisam Booshehri", "authors": "Meisam Booshehri, Abbas Malekpour, Peter Luksch", "title": "An Improving Method for Loop Unrolling", "comments": "4 pages, International Journal of Computer Science and Information\n  Security", "journal-ref": "International Journal of Computer Science and Information\n  Security, Vol. 11, No. 5, pp. 73-76 , 2013", "doi": null, "report-no": null, "categories": "cs.PL cs.OS", "license": "http://creativecommons.org/licenses/by-nc-sa/3.0/", "abstract": "  In this paper we review main ideas mentioned in several other papers which\ntalk about optimization techniques used by compilers. Here we focus on loop\nunrolling technique and its effect on power consumption, energy usage and also\nits impact on program speed up by achieving ILP (Instruction-level\nparallelism). Concentrating on superscalar processors, we discuss the idea of\ngeneralized loop unrolling presented by J.C. Hang and T. Leng and then we\npresent a new method to traverse a linked list to get a better result of loop\nunrolling in that case. After that we mention the results of some experiments\ncarried out on a Pentium 4 processor (as an instance of super scalar\narchitecture). Furthermore, the results of some other experiments on\nsupercomputer (the Alliat FX/2800 System) containing superscalar node\nprocessors would be mentioned. These experiments show that loop unrolling has a\nslight measurable effect on energy usage as well as power consumption. But it\ncould be an effective way for program speed up.\n", "versions": [{"version": "v1", "created": "Sat, 3 Aug 2013 14:09:23 GMT"}], "update_date": "2013-08-13", "authors_parsed": [["Booshehri", "Meisam", ""], ["Malekpour", "Abbas", ""], ["Luksch", "Peter", ""]]}, {"id": "1308.1199", "submitter": "Abhijat Vichare", "authors": "Abhijat Vichare", "title": "Intensional view of General Single Processor Operating Systems", "comments": "17 pages, 3 figures. Condensed and improved version of\n  http://arxiv.org/abs/1112.4451 for submission to SOSP'13. arXiv admin note:\n  substantial text overlap with arXiv:1112.4451", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Operating systems are currently viewed ostensively. As a result they mean\ndifferent things to different people. The ostensive character makes it is hard\nto understand OSes formally. An intensional view can enable better formal work,\nand also offer constructive support for some important problems, e.g. OS\narchitecture. This work argues for an intensional view of operating systems. It\nproposes to overcome the current ostensive view by defining an OS based on\nformal models of computation, and also introduces some principles. Together\nthese are used to develop a framework of algorithms of single processor OS\nstructure using an approach similar to function level programming. In this\nabridged paper we illustrate the essential approach, discuss some advantages\nand limitations and point out some future possibilities.\n", "versions": [{"version": "v1", "created": "Tue, 6 Aug 2013 07:54:19 GMT"}], "update_date": "2013-08-07", "authors_parsed": [["Vichare", "Abhijat", ""]]}, {"id": "1308.2881", "submitter": "Holger Machens", "authors": "Holger Machens and Volker Turau", "title": "Opacity of Memory Management in Software Transactional Memory", "comments": "Keywords: transactional memory, opacity, privatization, memory\n  reclamation", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Opacity of Transactional Memory is proposed to be established by incremental\nvalidation. Quiescence in terms of epoch-based memory reclamation is applied to\ndeal with doomed transactions causing memory access violations. This method\nunfortunately involves increased memory consumption and does not cover\nreclamations outside of transactions. This paper introduces a different method\nwhich combines incremental validation with elements of sandboxing to solve\nthese issues.\n", "versions": [{"version": "v1", "created": "Tue, 13 Aug 2013 14:37:51 GMT"}], "update_date": "2013-08-14", "authors_parsed": [["Machens", "Holger", ""], ["Turau", "Volker", ""]]}]