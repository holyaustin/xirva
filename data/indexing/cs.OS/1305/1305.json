[{"id": "1305.1459", "submitter": "Pier Stanislao Paolucci", "authors": "Pier Stanislao Paolucci, Iuliana Bacivarov, Gert Goossens, Rainer\n  Leupers, Fr\\'ed\\'eric Rousseau, Christoph Schumacher, Lothar Thiele, Piero\n  Vicini", "title": "EURETILE 2010-2012 summary: first three years of activity of the\n  European Reference Tiled Experiment", "comments": "56 pages", "journal-ref": null, "doi": "10.12837/2013T01", "report-no": null, "categories": "cs.DC cs.AR cs.NE cs.OS cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This is the summary of first three years of activity of the EURETILE FP7\nproject 247846. EURETILE investigates and implements brain-inspired and\nfault-tolerant foundational innovations to the system architecture of massively\nparallel tiled computer architectures and the corresponding programming\nparadigm. The execution targets are a many-tile HW platform, and a many-tile\nsimulator. A set of SW process - HW tile mapping candidates is generated by the\nholistic SW tool-chain using a combination of analytic and bio-inspired\nmethods. The Hardware dependent Software is then generated, providing OS\nservices with maximum efficiency/minimal overhead. The many-tile simulator\ncollects profiling data, closing the loop of the SW tool chain. Fine-grain\nparallelism inside processes is exploited by optimized intra-tile compilation\ntechniques, but the project focus is above the level of the elementary tile.\nThe elementary HW tile is a multi-processor, which includes a fault tolerant\nDistributed Network Processor (for inter-tile communication) and ASIP\naccelerators. Furthermore, EURETILE investigates and implements the innovations\nfor equipping the elementary HW tile with high-bandwidth, low-latency\nbrain-like inter-tile communication emulating 3 levels of connection hierarchy,\nnamely neural columns, cortical areas and cortex, and develops a dedicated\ncortical simulation benchmark: DPSNN-STDP (Distributed Polychronous Spiking\nNeural Net with synaptic Spiking Time Dependent Plasticity). EURETILE leverages\non the multi-tile HW paradigm and SW tool-chain developed by the FET-ACA SHAPES\nIntegrated Project (2006-2009).\n", "versions": [{"version": "v1", "created": "Tue, 7 May 2013 10:22:31 GMT"}], "update_date": "2013-06-24", "authors_parsed": [["Paolucci", "Pier Stanislao", ""], ["Bacivarov", "Iuliana", ""], ["Goossens", "Gert", ""], ["Leupers", "Rainer", ""], ["Rousseau", "Fr\u00e9d\u00e9ric", ""], ["Schumacher", "Christoph", ""], ["Thiele", "Lothar", ""], ["Vicini", "Piero", ""]]}, {"id": "1305.2553", "submitter": "Jun Wang", "authors": "Jun Wang, Xi Xiong, Peng Liu", "title": "Practical Fine-grained Privilege Separation in Multithreaded\n  Applications", "comments": null, "journal-ref": null, "doi": null, "report-no": "PSU-S2-13-051", "categories": "cs.OS cs.CR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  An inherent security limitation with the classic multithreaded programming\nmodel is that all the threads share the same address space and, therefore, are\nimplicitly assumed to be mutually trusted. This assumption, however, does not\ntake into consideration of many modern multithreaded applications that involve\nmultiple principals which do not fully trust each other. It remains challenging\nto retrofit the classic multithreaded programming model so that the security\nand privilege separation in multi-principal applications can be resolved.\n  This paper proposes ARBITER, a run-time system and a set of security\nprimitives, aimed at fine-grained and data-centric privilege separation in\nmultithreaded applications. While enforcing effective isolation among\nprincipals, ARBITER still allows flexible sharing and communication between\nthreads so that the multithreaded programming paradigm can be preserved. To\nrealize controlled sharing in a fine-grained manner, we created a novel\nabstraction named ARBITER Secure Memory Segment (ASMS) and corresponding OS\nsupport. Programmers express security policies by labeling data and principals\nvia ARBITER's API following a unified model. We ported a widely-used, in-memory\ndatabase application (memcached) to ARBITER system, changing only around 100\nLOC. Experiments indicate that only an average runtime overhead of 5.6% is\ninduced to this security enhanced version of application.\n", "versions": [{"version": "v1", "created": "Sun, 12 May 2013 02:44:15 GMT"}], "update_date": "2013-05-22", "authors_parsed": [["Wang", "Jun", ""], ["Xiong", "Xi", ""], ["Liu", "Peng", ""]]}, {"id": "1305.3345", "submitter": "Weibin Sun", "authors": "Weibin Sun and Robert Ricci", "title": "Augmenting Operating Systems With the GPU", "comments": "5 pages, 2 figures, old white paper submitted for KGPU citation", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The most popular heterogeneous many-core platform, the CPU+GPU combination,\nhas received relatively little attention in operating systems research. This\nplatform is already widely deployed: GPUs can be found, in some form, in most\ndesktop and laptop PCs. Used for more than just graphics processing, modern\nGPUs have proved themselves versatile enough to be adapted to other\napplications as well. Though GPUs have strengths that can be exploited in\nsystems software, this remains a largely untapped resource. We argue that\naugmenting the OS kernel with GPU computing power opens the door to a number of\nnew opportunities. GPUs can be used to speed up some kernel functions, make\nother scale better, and make it feasible to bring some computation-heavy\nfunctionality into the kernel. We present our framework for using the GPU as a\nco-processor from an OS kernel, and demonstrate a prototype in Linux.\n", "versions": [{"version": "v1", "created": "Wed, 15 May 2013 02:53:19 GMT"}], "update_date": "2013-05-21", "authors_parsed": [["Sun", "Weibin", ""], ["Ricci", "Robert", ""]]}, {"id": "1305.3849", "submitter": "Jo\\\"el Goossens", "authors": "Emmanuel Grolleau (1), Jo\\\"el Goossens (2), Liliana Cucu-Grosjean (3)\n  ((1) LIAS-ISAE/ENSMA, (2) ULB, (3) INRIA)", "title": "On the periodic behavior of real-time schedulers on identical\n  multiprocessor platforms", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper is proposing a general periodicity result concerning any\ndeterministic and memoryless scheduling algorithm (including\nnon-work-conserving algorithms), for any context, on identical multiprocessor\nplatforms. By context we mean the hardware architecture (uniprocessor,\nmulticore), as well as task constraints like critical sections, precedence\nconstraints, self-suspension, etc. Since the result is based only on the\nreleases and deadlines, it is independent from any other parameter. Note that\nwe do not claim that the given interval is minimal, but it is an upper bound\nfor any cycle of any feasible schedule provided by any deterministic and\nmemoryless scheduler.\n", "versions": [{"version": "v1", "created": "Thu, 16 May 2013 15:54:12 GMT"}], "update_date": "2013-05-17", "authors_parsed": [["Grolleau", "Emmanuel", "", "LIAS-ISAE/ENSMA"], ["Goossens", "Jo\u00ebl", "", "ULB"], ["Cucu-Grosjean", "Liliana", "", "INRIA"]]}]