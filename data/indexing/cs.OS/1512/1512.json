[{"id": "1512.00727", "submitter": "Roy Friedman", "authors": "Gil Einziger, Roy Friedman, Ben Manes", "title": "TinyLFU: A Highly Efficient Cache Admission Policy", "comments": "A much earlier and shorter version of this work appeared in the\n  Euromicro PDP 2014 conference", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper proposes to use a frequency based cache admission policy in order\nto boost the effectiveness of caches subject to skewed access distributions.\nGiven a newly accessed item and an eviction candidate from the cache, our\nscheme decides, based on the recent access history, whether it is worth\nadmitting the new item into the cache at the expense of the eviction candidate.\n  Realizing this concept is enabled through a novel approximate LFU structure\ncalled TinyLFU, which maintains an approximate representation of the access\nfrequency of a large sample of recently accessed items. TinyLFU is very compact\nand light-weight as it builds upon Bloom filter theory.\n  We study the properties of TinyLFU through simulations of both synthetic\nworkloads as well as multiple real traces from several sources. These\nsimulations demonstrate the performance boost obtained by enhancing various\nreplacement policies with the TinyLFU eviction policy. Also, a new combined\nreplacement and eviction policy scheme nicknamed W-TinyLFU is presented.\nW-TinyLFU is demonstrated to obtain equal or better hit-ratios than other state\nof the art replacement policies on these traces. It is the only scheme to\nobtain such good results on all traces.\n", "versions": [{"version": "v1", "created": "Wed, 2 Dec 2015 15:05:46 GMT"}, {"version": "v2", "created": "Thu, 3 Dec 2015 10:38:11 GMT"}], "update_date": "2015-12-04", "authors_parsed": [["Einziger", "Gil", ""], ["Friedman", "Roy", ""], ["Manes", "Ben", ""]]}, {"id": "1512.01978", "submitter": "Giuseppe Lipari", "authors": "Giuseppe Lipari and Luigi Palopoli", "title": "Real-Time scheduling: from hard to soft real-time systems", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  Real-time systems are traditionally classified into hard real-time and soft\nreal-time: in the first category we have safety critical real-time systems\nwhere missing a deadline can have catastrophic consequences, whereas in the\nsecond class we find systems or which we need to optimise the Quality of\nservice provided to the user. However, the frontier between these two classes\nis thinner than one may think, and many systems that were considered as hard\nreal-time in the past should now be reconsidered under a different light. In\nthis paper we shall first recall the fundamental notion of time-predictability\nand criticality, in order to understand where the real-time deadlines that we\nuse in our theoretical models come from. We shall then introduce the model of a\nsoft real-time system and present one popular method for scheduling hard and\nsoft real-time tasks, the resource reservation framework. Finally, we shall\nshow how resource reservation techniques can be successfully applied to the\ndesign of classical control systems, thus adding robustness to the system and\nincreasing resource utilisation and performance.\n", "versions": [{"version": "v1", "created": "Mon, 7 Dec 2015 11:05:05 GMT"}], "update_date": "2015-12-08", "authors_parsed": [["Lipari", "Giuseppe", ""], ["Palopoli", "Luigi", ""]]}, {"id": "1512.01984", "submitter": "Giuseppe Lipari", "authors": "Luca Abeni and Giuseppe Lipari and Andrea Parri and Youcheng Sun", "title": "Parallel and sequential reclaiming in multicore real-time global\n  scheduling", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  When integrating hard, soft and non-real-time tasks in general purpose\noperating systems, it is necessary to provide temporal isolation so that the\ntiming properties of one task do not depend on the behaviour of the others.\nHowever, strict budget enforcement can lead to inefficient use of the\ncomputational resources in the presence of tasks with variable workload. Many\nresource reclaiming algorithms have been proposed in the literature for single\nprocessor scheduling, but not enough work exists for global scheduling in\nmultiprocessor systems. In this report, we propose two reclaiming algorithms\nfor multiprocessor global scheduling and we prove their correctness.\n", "versions": [{"version": "v1", "created": "Mon, 7 Dec 2015 11:16:43 GMT"}, {"version": "v2", "created": "Thu, 10 Mar 2016 11:04:54 GMT"}], "update_date": "2016-03-11", "authors_parsed": [["Abeni", "Luca", ""], ["Lipari", "Giuseppe", ""], ["Parri", "Andrea", ""], ["Sun", "Youcheng", ""]]}, {"id": "1512.06908", "submitter": "Yan Cui", "authors": "Yan Cui", "title": "Research on Scalability of Operating Systems on Multicore Processors", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Large number of cores and hardware resource sharing are two characteristics\non multicore processors, which bring new challenges for the design of operating\nsystems. How to locate and analyze the speedup restrictive factors in operating\nsystems, how to simulate and avoid the phenomenon that speedup decreases with\nthe number of cores because of lock contention (i.e., lock thrashing) and how\nto avoid the contention of shared resources such as the last level cache are\nkey challenges for the operating system scalability research on multicore\nsystems.\n", "versions": [{"version": "v1", "created": "Mon, 21 Dec 2015 23:35:42 GMT"}], "update_date": "2015-12-23", "authors_parsed": [["Cui", "Yan", ""]]}, {"id": "1512.07351", "submitter": "Yao Guo", "authors": "Yao Guo, Junyang Lu", "title": "Energy-aware Fixed-Priority Multi-core Scheduling for Real-time Systems", "comments": "conference extension", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Multi-core processors are becoming more and more popular in embedded and\nreal-time systems. While fixed-priority scheduling with task-splitting in\nreal-time systems are widely applied, current approaches have not taken into\nconsideration energy-aware aspects such as dynamic voltage/frequency scheduling\n(DVS). In this paper, we propose two strategies to apply dynamic voltage\nscaling (DVS) to fixed-priority scheduling algorithms with task-splitting for\nperiodic real-time tasks on multi-core processors. The first strategy\ndetermines voltage scales for each processor after scheduling (Static DVS),\nwhich ensures all tasks meet the timing requirements on synchronization. The\nsecond strategy adaptively determines the frequency of each task before\nscheduling (Adaptive DVS) according to the total utilization of task-set and\nnumber of cores available. The combination of frequency pre-allocation and\ntask-splitting makes it possible to maximize energy savings with DVS.\nSimulation results show that it is possible to achieve significant energy\nsavings with DVS while preserving the schedulability requirements of real-time\nschedulers for multi-core processors.\n", "versions": [{"version": "v1", "created": "Wed, 23 Dec 2015 04:39:00 GMT"}], "update_date": "2015-12-24", "authors_parsed": [["Guo", "Yao", ""], ["Lu", "Junyang", ""]]}, {"id": "1512.07654", "submitter": "Eric Missimer", "authors": "Eric Missimer, Katherine Zhao and Richard West", "title": "Mixed-Criticality Scheduling with I/O", "comments": "Second version has replaced simulation experiments with real machine\n  experiments, third version fixed minor error in Equation 5 (missing a plus\n  sign)", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper addresses the problem of scheduling tasks with different\ncriticality levels in the presence of I/O requests. In mixed-criticality\nscheduling, higher criticality tasks are given precedence over those of lower\ncriticality when it is impossible to guarantee the schedulability of all tasks.\nWhile mixed-criticality scheduling has gained attention in recent years, most\napproaches typically assume a periodic task model. This assumption does not\nalways hold in practice, especially for real-time and embedded systems that\nperform I/O. For example, many tasks block on I/O requests until devices signal\ntheir completion via interrupts; both the arrival of interrupts and the waking\nof blocked tasks can be aperiodic. In our prior work, we developed a scheduling\ntechnique in the Quest real-time operating system, which integrates the\ntime-budgeted management of I/O operations with Sporadic Server scheduling of\ntasks. This paper extends our previous scheduling approach with support for\nmixed-criticality tasks and I/O requests on the same processing core. Results\nshow the effective schedulability of different task sets in the presence of I/O\nrequests is superior in our approach compared to traditional methods that\nmanage I/O using techniques such as Sporadic Servers.\n", "versions": [{"version": "v1", "created": "Wed, 23 Dec 2015 22:41:04 GMT"}, {"version": "v2", "created": "Thu, 3 Mar 2016 01:01:11 GMT"}, {"version": "v3", "created": "Sat, 12 Mar 2016 18:13:31 GMT"}], "update_date": "2016-03-15", "authors_parsed": [["Missimer", "Eric", ""], ["Zhao", "Katherine", ""], ["West", "Richard", ""]]}]