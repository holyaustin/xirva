[{"id": "1505.01448", "submitter": "Thomas Leibovici", "authors": "Thomas Leibovici", "title": "Taking back control of HPC file systems with Robinhood Policy Engine", "comments": "International Workshop on the Lustre Ecosystem: Challenges and\n  Opportunities, March 2015, Annapolis MD", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Today, the largest Lustre file systems store billions of entries. On such\nsystems, classic tools based on namespace scanning become unusable. Operations\nsuch as managing file lifetime, scheduling data copies, and generating overall\nfilesystem statistics become painful as they require collecting, sorting and\naggregating information for billions of records. Robinhood Policy Engine is an\nopen source software developed to address these challenges. It makes it\npossible to schedule automatic actions on huge numbers of filesystem entries.\nIt also gives a synthetic understanding of file systems contents by providing\noverall statistics about data ownership, age and size profiles. Even if it can\nbe used with any POSIX filesystem, Robinhood supports Lustre specific features\nlike OSTs, pools, HSM, ChangeLogs, and DNE. It implements specific support for\nthese features, and takes advantage of them to manage Lustre file systems\nefficiently.\n", "versions": [{"version": "v1", "created": "Wed, 6 May 2015 18:14:56 GMT"}], "update_date": "2015-05-07", "authors_parsed": [["Leibovici", "Thomas", ""]]}, {"id": "1505.01765", "submitter": "Weikuan Yu", "authors": "Teng Wang, Sarp Oral, Michael Pritchard, Kevin Vasko, Weikuan Yu", "title": "Development of a Burst Buffer System for Data-Intensive Applications", "comments": "International Workshop on the Lustre Ecosystem: Challenges and\n  Opportunities, March 2015, Annapolis MD", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Modern parallel filesystems such as Lustre are designed to provide high,\nscalable I/O bandwidth in response to growing I/O requirements; however, the\nbursty I/O characteristics of many data-intensive scientific applications make\nit difficult for back-end parallel filesystems to efficiently handle I/O\nrequests. A burst buffer system, through which data can be temporarily buffered\nvia high-performance storage mediums, allows for gradual flushing of data to\nback-end filesystems. In this paper, we explore issues surrounding the\ndevelopment of a burst buffer system for data-intensive scientific\napplications. Our initial results demonstrate that utilizing a burst buffer\nsystem on top of the Lustre filesystem shows promise for dealing with the\nintense I/O traffic generated by application checkpointing.\n", "versions": [{"version": "v1", "created": "Thu, 7 May 2015 16:31:21 GMT"}], "update_date": "2015-05-08", "authors_parsed": [["Wang", "Teng", ""], ["Oral", "Sarp", ""], ["Pritchard", "Michael", ""], ["Vasko", "Kevin", ""], ["Yu", "Weikuan", ""]]}, {"id": "1505.02155", "submitter": "Jian-Jia Chen", "authors": "Jian-Jia Chen, Wen-Hung Huang, Cong Liu", "title": "Evaluate and Compare Two Utilization-Based Schedulability-Test\n  Frameworks for Real-Time Systems", "comments": "arXiv admin note: text overlap with arXiv:1501.07084", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DS cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This report summarizes two general frameworks, namely k2Q and k2U, that have\nbeen recently developed by us. The purpose of this report is to provide\ndetailed evaluations and comparisons of these two frameworks. These two\nframeworks share some similar characteristics, but they are useful for\ndifferent application cases. These two frameworks together provide\ncomprehensive means for the users to automatically convert the pseudo\npolynomial-time tests (or even exponential-time tests) into polynomial-time\ntests with closed mathematical forms. With the quadratic and hyperbolic forms,\nk2Q and k2U frameworks can be used to provide many quantitive features to be\nmeasured and evaluated, like the total utilization bounds, speed-up factors,\netc., not only for uniprocessor scheduling but also for multiprocessor\nscheduling. These frameworks can be viewed as \"blackbox\" interfaces for\nproviding polynomial-time schedulability tests and response time analysis for\nreal-time applications. We have already presented their advantages for being\napplied in some models in the previous papers. However, it was not possible to\npresent a more comprehensive comparison between these two frameworks. We hope\nthis report can help the readers and users clearly understand the difference of\nthese two frameworks, their unique characteristics, and their advantages. We\ndemonstrate their differences and properties by using the traditional sporadic\nrealtime task models in uniprocessor scheduling and multiprocessor global\nscheduling.\n", "versions": [{"version": "v1", "created": "Fri, 8 May 2015 19:52:46 GMT"}, {"version": "v2", "created": "Mon, 14 Sep 2015 21:39:47 GMT"}, {"version": "v3", "created": "Fri, 23 Sep 2016 07:13:59 GMT"}], "update_date": "2016-09-26", "authors_parsed": [["Chen", "Jian-Jia", ""], ["Huang", "Wen-Hung", ""], ["Liu", "Cong", ""]]}, {"id": "1505.05269", "submitter": "Alok Ranjan", "authors": "Alok Ranjan, H.B.Sahu, Prasant Misra", "title": "A Survey Report on Operating Systems for Tiny Networked Sensors", "comments": "12 pages, Submitted to Journal", "journal-ref": "Journal of Advanced Research in Networking and Communication\n  Engineering, Vol(1) issue 1, 2014", "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://creativecommons.org/licenses/by-nc-sa/3.0/", "abstract": "  Wireless sensor network (WSN) has attracted researchers worldwide to explore\nthe research opportunities, with application mainly in health monitoring,\nindustry automation, battlefields, home automation and environmental\nmonitoring. A WSN is highly resource constrained in terms of energy,\ncomputation and memory. WSNs deployment ranges from the normal working\nenvironment up to hostile and hazardous environment such as in volcano\nmonitoring and underground mines. These characteristics of WSNs hold additional\nset of challenges in front of the operating system designer. The objective of\nthis survey is to highlight the features and weakness of the opearting system\navailable for WSNs, with the focus on the current application demands. The\npaper also discusses the operating system design issues in terms of\narchitecture, programming model, scheduling and memory management and support\nfor real time applications.\n", "versions": [{"version": "v1", "created": "Wed, 20 May 2015 07:47:20 GMT"}], "update_date": "2015-05-21", "authors_parsed": [["Ranjan", "Alok", ""], ["Sahu", "H. B.", ""], ["Misra", "Prasant", ""]]}]