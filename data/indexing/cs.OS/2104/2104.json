[{"id": "2104.02393", "submitter": "Ilja Behnke", "authors": "Robert Danicki, Martin Haug, Ilja Behnke, Laurenz M\\\"adje, Lauritz\n  Thamsen", "title": "Detecting and Mitigating Network Packet Overloads on Real-Time Devices\n  in IoT Systems", "comments": "EdgeSys '21", "journal-ref": null, "doi": "10.1145/3434770.3459733", "report-no": null, "categories": "cs.NI cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Manufacturing, automotive, and aerospace environments use embedded systems\nfor control and automation and need to fulfill strict real-time guarantees. To\nfacilitate more efficient business processes and remote control, such devices\nare being connected to IP networks. Due to the difficulty in predicting network\npackets and the interrelated workloads of interrupt handlers and drivers,\ndevices controlling time critical processes stand under the risk of missing\nprocess deadlines when under high network loads. Additionally, devices at the\nedge of large networks and the internet are subject to a high risk of load\nspikes and network packet overloads.\n  In this paper, we investigate strategies to detect network packet overloads\nin real-time and present four approaches to adaptively mitigate local deadline\nmisses. In addition to two strategies mitigating network bursts with and\nwithout hysteresis, we present and discuss two novel mitigation algorithms,\ncalled Budget and Queue Mitigation. In an experimental evaluation, all\nalgorithms showed mitigating effects, with the Queue Mitigation strategy\nenabling most packet processing while preventing lateness of critical tasks.\n", "versions": [{"version": "v1", "created": "Tue, 6 Apr 2021 09:49:56 GMT"}], "update_date": "2021-04-07", "authors_parsed": [["Danicki", "Robert", ""], ["Haug", "Martin", ""], ["Behnke", "Ilja", ""], ["M\u00e4dje", "Laurenz", ""], ["Thamsen", "Lauritz", ""]]}, {"id": "2104.04528", "submitter": "Jiyang Chen", "authors": "Jiyang Chen, Tomasz Kloda, Ayoosh Bansal, Rohan Tabish, Chien-Ying\n  Chen, Bo Liu, Sibin Mohan, Marco Caccamo and Lui Sha", "title": "SchedGuard: Protecting against Schedule Leaks Using Linux Containers", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CR cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Real-time systems have recently been shown to be vulnerable to timing\ninference attacks, mainly due to their predictable behavioral patterns.\nExisting solutions such as schedule randomization lack the ability to protect\nagainst such attacks, often limited by the system's real-time nature. This\npaper presents SchedGuard: a temporal protection framework for Linux-based hard\nreal-time systems that protects against posterior scheduler side-channel\nattacks by preventing untrusted tasks from executing during specific time\nsegments. SchedGuard is integrated into the Linux kernel using cgroups, making\nit amenable to use with container frameworks. We demonstrate the effectiveness\nof our system using a realistic radio-controlled rover platform and\nsynthetically generated workloads. Not only is SchedGuard able to protect\nagainst the attacks mentioned above, but it also ensures that the real-time\ntasks/containers meet their temporal requirements.\n", "versions": [{"version": "v1", "created": "Fri, 9 Apr 2021 13:16:06 GMT"}], "update_date": "2021-04-13", "authors_parsed": [["Chen", "Jiyang", ""], ["Kloda", "Tomasz", ""], ["Bansal", "Ayoosh", ""], ["Tabish", "Rohan", ""], ["Chen", "Chien-Ying", ""], ["Liu", "Bo", ""], ["Mohan", "Sibin", ""], ["Caccamo", "Marco", ""], ["Sha", "Lui", ""]]}, {"id": "2104.05306", "submitter": "Chaos Dong", "authors": "Chaos Dong, Fang Wang, Jianshun Zhang", "title": "WLFC: Write Less in Flash-based Cache", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Flash-based disk caches, for example Bcache and Flashcache, has gained\ntremendous popularity in industry in the last decade because of its low energy\nconsumption, non-volatile nature and high I/O speed. But these cache systems\nhave a worse write performance than the read performance because of the\nasymmetric I/O costs and the the internal GC mechanism. In addition to the\nperformance issues, since the NAND flash is a type of EEPROM device, the\nlifespan is also limited by the Program/Erase (P/E) cycles. So how to improve\nthe performance and the lifespan of flash-based caches in write-intensive\nscenarios has always been a hot issue. Benefiting from Open-Channel SSDs\n(OCSSDs), we propose a write-friendly flash-based disk cache system, which is\ncalled WLFC (Write Less in the Flash-based Cache). In WLFC, a strictly\nsequential writing method is used to minimize the write amplification. A new\nreplacement algorithm for the write buffer is designed to minimize the erase\ncount caused by the evicting. And a new data layout strategy is designed to\nminimize the metadata size persisted in SSDs. As a result, the Over-Provisioned\n(OP) space is completely removed, the erase count of the flash is greatly\nreduced, and the metadata size is 1/10 or less than that in BCache. Even with a\nsmall amount of metadata, the data consistency after the crash is still\nguaranteed. Compared with the existing mechanism, WLFC brings a 7%-80%\nreduction in write latency, a 1.07*-4.5* increment in write throughput, and a\n50%-88.9% reduction in erase count, with a moderate overhead in read\nperformance.\n", "versions": [{"version": "v1", "created": "Mon, 12 Apr 2021 09:26:04 GMT"}, {"version": "v2", "created": "Wed, 21 Jul 2021 02:09:03 GMT"}], "update_date": "2021-07-22", "authors_parsed": [["Dong", "Chaos", ""], ["Wang", "Fang", ""], ["Zhang", "Jianshun", ""]]}, {"id": "2104.05456", "submitter": "Marek \\v{S}uppa", "authors": "Marek \\v{S}uppa, Ondrej Jariabka, Adri\\'an Matejov, and Marek Nagy", "title": "TermAdventure: Interactively Teaching UNIX Command Line, Text Adventure\n  Style", "comments": "Accepted at ITiCSE 2021", "journal-ref": null, "doi": "10.1145/3430665.3456387", "report-no": null, "categories": "cs.CY cs.HC cs.OS", "license": "http://creativecommons.org/licenses/by-sa/4.0/", "abstract": "  Introductory UNIX courses are typically organized as lectures, accompanied by\na set of exercises, whose solutions are submitted to and reviewed by the\nlecturers. While this arrangement has become standard practice, it often\nrequires the use of an external tool or interface for submission and does not\nautomatically check its correctness. That in turn leads to increased workload\nand makes it difficult to deal with potential plagiarism.\n  In this work we present TermAdventure (TA), a suite of tools for creating\ninteractive UNIX exercises. These resemble text adventure games, which immerse\nthe user in a text environment and let them interact with it using textual\ncommands. In our case the ''adventure'' takes place inside a UNIX system and\nthe user interaction happens via the standard UNIX command line. The adventure\nis a set of exercises, which are presented and automatically evaluated by the\nsystem, all from within the command line environment. The suite is released\nunder an open source license, has minimal dependencies and can be used either\non a UNIX-style server or a desktop computer running any major OS platform\nthrough Docker.\n  We also reflect on our experience of using the presented suite as the primary\nteaching tool for an introductory UNIX course for Data Scientists and discuss\nthe implications of its deployment in similar courses. The suite is released\nunder the terms of an open-source license at\n\\url{https://github.com/NaiveNeuron/TermAdventure}.\n", "versions": [{"version": "v1", "created": "Mon, 12 Apr 2021 13:23:58 GMT"}], "update_date": "2021-04-13", "authors_parsed": [["\u0160uppa", "Marek", ""], ["Jariabka", "Ondrej", ""], ["Matejov", "Adri\u00e1n", ""], ["Nagy", "Marek", ""]]}, {"id": "2104.06366", "submitter": "Kuan-Hsun Chen", "authors": "Junjie Shi, Jan Duy Thien Pham, Malte M\\\"unch, Jan Viktor Hafemeister,\n  Jian-Jia Chen, Kuan-Hsun Chen", "title": "Supporting Multiprocessor Resource Synchronization Protocols in RTEMS", "comments": "6 pages, 5 figures, submitted to RTCSA 2021", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  When considering recurrent tasks in real-time systems, concurrent accesses to\nshared resources, can cause race conditions or data corruptions. Such a problem\nhas been extensively studied since the 1990s, and numerous resource\nsynchronization protocols have been developed for both uni-processor and\nmultiprocessor real-time systems, with the assumption that the implementation\noverheads are negligible. However, in practice, the implementation overheads\nmay impact the performance of different protocols depending upon the practiced\nscenarios, e.g., resources are accessed locally or remotely, and tasks spin or\nsuspend themselves when the requested resources are not available. In this\npaper, to show the applicability of different protocols in real-world systems,\nwe detail the implementation of several state-of-the-art multiprocessor\nresource synchronization protocols in RTEMS. To study the impact of the\nimplementation overheads, we deploy these implemented protocols on a real\nplatform with synthetic task set. The measured results illustrate that the\ndeveloped resource synchronization protocols in RTEMS are comparable to the\nexisted protocol, i.e., MrsP.\n", "versions": [{"version": "v1", "created": "Tue, 13 Apr 2021 17:23:21 GMT"}], "update_date": "2021-04-14", "authors_parsed": [["Shi", "Junjie", ""], ["Pham", "Jan Duy Thien", ""], ["M\u00fcnch", "Malte", ""], ["Hafemeister", "Jan Viktor", ""], ["Chen", "Jian-Jia", ""], ["Chen", "Kuan-Hsun", ""]]}, {"id": "2104.09487", "submitter": "Mayank Goel", "authors": "Mayank Goel and Gourav Singal", "title": "Android OS CASE STUDY", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.AR", "license": "http://creativecommons.org/licenses/by-sa/4.0/", "abstract": "  Android is a mobile operating system based on a modified version of the Linux\nkernel and other open source software, designed primarily for touchscreen\nmobile devices such as smartphones and tablets. It is an operating system for\nlow powered devices that run on battery and are full of hardware like Global\nPositioning System (GPS) receivers, cameras, light and orientation sensors,\nWi-Fi and LTE (4G telephony) connectivity and a touch screen. Like all\noperating systems, Android enables applications to make use of the hardware\nfeatures through abstraction and provide a defined environment for\napplications. The study includes following topic: Background And History\nAndroid Architecture Kernel And StartUp Process Process Management Deadlock CPU\nScheduling Memory Management Storage Management I/O Battery Optimization\n", "versions": [{"version": "v1", "created": "Mon, 19 Apr 2021 17:46:29 GMT"}], "update_date": "2021-04-20", "authors_parsed": [["Goel", "Mayank", ""], ["Singal", "Gourav", ""]]}, {"id": "2104.12721", "submitter": "Alexander Jung", "authors": "Simon Kuenzer and Vlad-Andrei B\\u{a}doiu and Hugo Lefeuvre and Sharan\n  Santhanam and Alexander Jung and Gaulthier Gain and Cyril Soldani and Costin\n  Lupu and \\c{S}tefan Teodorescu and Costi R\\u{a}ducanu and Cristian Banu and\n  Laurent Mathy and R\\u{a}zvan Deaconescu and Costin Raiciu and Felipe Huici", "title": "Unikraft: Fast, Specialized Unikernels the Easy Way", "comments": "19 pages, 22 figures, 7 tables, conference proceedings", "journal-ref": null, "doi": "10.1145/3447786.3456248", "report-no": null, "categories": "cs.OS", "license": "http://creativecommons.org/licenses/by-nc-sa/4.0/", "abstract": "  Unikernels are famous for providing excellent performance in terms of boot\ntimes, throughput and memory consumption, to name a few metrics. However, they\nare infamous for making it hard and extremely time consuming to extract such\nperformance, and for needing significant engineering effort in order to port\napplications to them. We introduce Unikraft, a novel micro-library OS that (1)\nfully modularizes OS primitives so that it is easy to customize the unikernel\nand include only relevant components and (2) exposes a set of composable,\nperformance-oriented APIs in order to make it easy for developers to obtain\nhigh performance.\n  Our evaluation using off-the-shelf applications such as nginx, SQLite, and\nRedis shows that running them on Unikraft results in a 1.7x-2.7x performance\nimprovement compared to Linux guests. In addition, Unikraft images for these\napps are around 1MB, require less than 10MB of RAM to run, and boot in around\n1ms on top of the VMM time (total boot time 3ms-40ms). Unikraft is a Linux\nFoundation open source project and can be found at www.unikraft.org.\n", "versions": [{"version": "v1", "created": "Mon, 26 Apr 2021 17:07:07 GMT"}], "update_date": "2021-04-27", "authors_parsed": [["Kuenzer", "Simon", ""], ["B\u0103doiu", "Vlad-Andrei", ""], ["Lefeuvre", "Hugo", ""], ["Santhanam", "Sharan", ""], ["Jung", "Alexander", ""], ["Gain", "Gaulthier", ""], ["Soldani", "Cyril", ""], ["Lupu", "Costin", ""], ["Teodorescu", "\u015etefan", ""], ["R\u0103ducanu", "Costi", ""], ["Banu", "Cristian", ""], ["Mathy", "Laurent", ""], ["Deaconescu", "R\u0103zvan", ""], ["Raiciu", "Costin", ""], ["Huici", "Felipe", ""]]}, {"id": "2104.13671", "submitter": "Pritam Majumder", "authors": "Pritam Majumder, Jiayi Huang, Sungkeun Kim, Abdullah Muzahid, Dylan\n  Siegers, Chia-Che Tsai, and Eun Jung Kim", "title": "Continual Learning Approach for Improving the Data and Computation\n  Mapping in Near-Memory Processing System", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.AR cs.LG cs.NI cs.OS", "license": "http://creativecommons.org/licenses/by-nc-nd/4.0/", "abstract": "  The resurgence of near-memory processing (NMP) with the advent of big data\nhas shifted the computation paradigm from processor-centric to memory-centric\ncomputing. To meet the bandwidth and capacity demands of memory-centric\ncomputing, 3D memory has been adopted to form a scalable memory-cube network.\nAlong with NMP and memory system development, the mapping for placing data and\nguiding computation in the memory-cube network has become crucial in driving\nthe performance improvement in NMP. However, it is very challenging to design a\nuniversal optimal mapping for all applications due to unique application\nbehavior and intractable decision space. In this paper, we propose an\nartificially intelligent memory mapping scheme, AIMM, that optimizes data\nplacement and resource utilization through page and computation remapping. Our\nproposed technique involves continuously evaluating and learning the impact of\nmapping decisions on system performance for any application. AIMM uses a neural\nnetwork to achieve a near-optimal mapping during execution, trained using a\nreinforcement learning algorithm that is known to be effective for exploring a\nvast design space. We also provide a detailed AIMM hardware design that can be\nadopted as a plugin module for various NMP systems. Our experimental evaluation\nshows that AIMM improves the baseline NMP performance in single and multiple\nprogram scenario by up to 70% and 50%, respectively.\n", "versions": [{"version": "v1", "created": "Wed, 28 Apr 2021 09:50:35 GMT"}], "update_date": "2021-04-29", "authors_parsed": [["Majumder", "Pritam", ""], ["Huang", "Jiayi", ""], ["Kim", "Sungkeun", ""], ["Muzahid", "Abdullah", ""], ["Siegers", "Dylan", ""], ["Tsai", "Chia-Che", ""], ["Kim", "Eun Jung", ""]]}, {"id": "2104.14354", "submitter": "Tegg Sung", "authors": "Tegg Taekyong Sung, Bo Ryu", "title": "SoCRATES: System-on-Chip Resource Adaptive Scheduling using Deep\n  Reinforcement Learning", "comments": "8 pages, 8 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Deep Reinforcement Learning (DRL) is being increasingly applied to the\nproblem of resource allocation for emerging System-on-Chip (SoC) applications,\nand has shown remarkable promises. In this paper, we introduce SoCRATES (SoC\nResource AdapTivE Scheduler), an extremely efficient DRL-based SoC scheduler\nwhich maps a wide range of hierarchical jobs to heterogeneous resources within\nSoC using the Eclectic Interaction Matching (EIM) technique. It is noted that\nthe majority of SoC resource management approaches have been targeting makespan\nminimization with fixed number of jobs in the system. In contrast, SoCRATES\naims at minimizing average latency in a steady-state condition while assigning\ntasks in the ready queue to heterogeneous resources (processing elements). We\nfirst show that existing DRL-based schedulers developed with the makespan\nminimization objective are ineffective for the latency-minimization-driven SoC\napplications due to their characteristics such as high-frequency job workload\nand distributed/parallel job execution. We then demonstrate that through its\nEIM technique, SoCRATES successfully addresses the challenge of concurrent\nobservations caused by the task dependency inherent in the latency minimization\nobjective. Extensive tests show that SoCRATES outperforms other existing neural\nand non-neural schedulers with as high as 38% gain in latency reduction under a\nvariety of job types, queue length, and incoming rates. The resulting model is\nalso compact in size and has very favorable energy consumption behaviors,\nmaking it highly practical for deployment in future SoC systems with built-in\nneural accelerator.\n", "versions": [{"version": "v1", "created": "Wed, 28 Apr 2021 15:46:02 GMT"}, {"version": "v2", "created": "Tue, 13 Jul 2021 07:49:48 GMT"}], "update_date": "2021-07-14", "authors_parsed": [["Sung", "Tegg Taekyong", ""], ["Ryu", "Bo", ""]]}, {"id": "2104.14862", "submitter": "Wojciech Ozga", "authors": "Wojciech Ozga and Do Le Quoc and Christof Fetzer", "title": "WELES: Policy-driven Runtime Integrity Enforcement of Virtual Machines", "comments": null, "journal-ref": "Proceedings of 2021 IEEE International Conference on Cloud\n  Computing (IEEE CLOUD'21)", "doi": null, "report-no": null, "categories": "cs.CR cs.OS", "license": "http://creativecommons.org/licenses/by-nc-nd/4.0/", "abstract": "  Trust is of paramount concern for tenants to deploy their security-sensitive\nservices in the cloud. The integrity of VMs in which these services are\ndeployed needs to be ensured even in the presence of powerful adversaries with\nadministrative access to the cloud. Traditional approaches for solving this\nchallenge leverage trusted computing techniques, e.g., vTPM, or hardware CPU\nextensions, e.g., AMD SEV. But, they are vulnerable to powerful adversaries, or\nthey provide only load time (not runtime) integrity measurements of VMs.\n  We propose WELES, a protocol allowing tenants to establish and maintain trust\nin VM runtime integrity of software and its configuration. WELES is transparent\nto the VM configuration and setup. It performs an implicit attestation of VMs\nduring a secure login and binds the VM integrity state with the secure\nconnection. Our prototype's evaluation shows that WELES is practical and incurs\nlow performance overhead.\n", "versions": [{"version": "v1", "created": "Fri, 30 Apr 2021 09:37:14 GMT"}], "update_date": "2021-07-07", "authors_parsed": [["Ozga", "Wojciech", ""], ["Quoc", "Do Le", ""], ["Fetzer", "Christof", ""]]}]