[{"id": "2009.00466", "submitter": "Oliver Horst", "authors": "Oliver Horst and Uwe Baumgarten", "title": "toki: A Build- and Test-Platform for Prototyping and Evaluating\n  Operating System Concepts in Real-Time Environments", "comments": "Appeared in proceedings of the Open Demo Session of Real-Time Systems\n  (RTSS@Work) held in conjunction with the 40th IEEE Real-Time Systems\n  Symposium (RTSS)", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://creativecommons.org/licenses/by-sa/4.0/", "abstract": "  Typically, even low-level operating system concepts, such as resource sharing\nstrategies and predictability measures, are evaluated with Linux on PC\nhardware. This leaves a large gap to real industrial applications. Hence, the\ndirect transfer of the results might be difficult. As a solution, we present\ntoki, a prototyping and evaluation platform based on FreeRTOS and several\nopen-source libraries. toki comes with a unified build- and test-environment\nbased on Yocto and Qemu, which makes it well suited for rapid prototyping. With\nits architecture chosen similar to production industrial systems, toki provides\nthe ground work to implement early prototypes of real-time systems research\nresults, up to technology readiness level 7, with little effort.\n", "versions": [{"version": "v1", "created": "Tue, 1 Sep 2020 14:24:20 GMT"}], "update_date": "2020-09-02", "authors_parsed": [["Horst", "Oliver", ""], ["Baumgarten", "Uwe", ""]]}, {"id": "2009.00506", "submitter": "Oliver Horst", "authors": "Oliver Horst and Johannes Wiesb\\\"ock and Raphael Wild and Uwe\n  Baumgarten", "title": "Quantifying the Latency and Possible Throughput of External Interrupts\n  on Cyber-Physical Systems", "comments": "Appeared in proceedings of the 3rd Workshop on Benchmarking\n  Cyber-Physical Systems and Internet of Things (CPS-IoTBench) held in\n  conjunction with the 26th Annual International Conference on Mobile Computing\n  and Networking (MobiCom)", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://creativecommons.org/licenses/by-sa/4.0/", "abstract": "  An important characteristic of cyber-physical systems is their capability to\nrespond, in-time, to events from their physical environment. However, to the\nbest of our knowledge there exists no benchmark for assessing and comparing the\ninterrupt handling performance of different software stacks. Hence, we present\na flexible evaluation method for measuring the interrupt latency and throughput\non ARMv8-A based platforms. We define and validate seven test-cases that stress\nindividual parts of the overall process and combine them to three benchmark\nfunctions that provoke the minimal and maximal interrupt latency, and maximal\ninterrupt throughput.\n", "versions": [{"version": "v1", "created": "Tue, 1 Sep 2020 15:08:31 GMT"}], "update_date": "2020-09-02", "authors_parsed": [["Horst", "Oliver", ""], ["Wiesb\u00f6ck", "Johannes", ""], ["Wild", "Raphael", ""], ["Baumgarten", "Uwe", ""]]}, {"id": "2009.01869", "submitter": "Zahra Tarkhani", "authors": "Zahra Tarkhani, Anil Madhavapeddy", "title": "Enclave-Aware Compartmentalization and Secure Sharing with Sirius", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CR cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Hardware-assisted trusted execution environments (TEEs) are critical building\nblocks of many modern applications. However, they have a one-way isolation\nmodel that introduces a semantic gap between a TEE and its outside world. This\nlack of information causes an ever-increasing set of attacks on TEE-enabled\napplications that exploit various insecure interactions with the host OSs,\napplications, or other enclaves. We introduce Sirius, the first\ncompartmentalization framework that achieves strong isolation and secure\nsharing in TEE-assisted applications by controlling the dataflows within\nprimary kernel objects (e.g. threads, processes, address spaces, files,\nsockets, pipes) in both the secure and normal worlds. Sirius replaces ad-hoc\ninteractions in current TEE systems with a principled approach that adds strong\ninter- and intra-address space isolation and effectively eliminates a wide\nrange of attacks. We evaluate Sirius on ARM platforms and find that it is\nlightweight ($\\approx 15K$ LoC) and only adds $\\approx 10.8\\%$ overhead to\nenable TEE support on applications such as httpd, and improves the performance\nof existing TEE-enabled applications such as the Darknet ML framework and ARM's\nLibDDSSec by $0.05\\%-5.6\\%$.\n", "versions": [{"version": "v1", "created": "Thu, 3 Sep 2020 18:30:02 GMT"}, {"version": "v2", "created": "Wed, 9 Sep 2020 11:52:52 GMT"}, {"version": "v3", "created": "Mon, 23 Nov 2020 14:19:30 GMT"}], "update_date": "2020-11-24", "authors_parsed": [["Tarkhani", "Zahra", ""], ["Madhavapeddy", "Anil", ""]]}, {"id": "2009.02737", "submitter": "Reto Achermann", "authors": "Reto Achermann, Nora Hossle, Lukas Humbel, Daniel Schwyn, David Cock,\n  Timothy Roscoe", "title": "Secure Memory Management on Modern Hardware", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Almost all modern hardware, from phone SoCs to high-end servers with\naccelerators, contain memory translation and protection hardware like IOMMUs,\nfirewalls, and lookup tables which make it impossible to reason about, and\nenforce protection and isolation based solely on the processor's MMUs. This has\nled to numerous bugs and security vulnerabilities in today's system software.\n  In this paper we regain the ability to reason about and enforce access\ncontrol using the proven concept of a reference monitor mediating accesses to\nmemory resources. We present a fine-grained, realistic memory protection model\nthat makes this traditional concept applicable today, and bring system software\nin line with the complexity of modern, heterogeneous hardware.\n  Our design is applicable to any operating system, regardless of architecture.\nWe show that it not only enforces the integrity properties of a system, but\ndoes so with no inherent performance overhead and it is even amenable to\nautomation through code generation from trusted hardware specifications.\n", "versions": [{"version": "v1", "created": "Sun, 6 Sep 2020 13:56:40 GMT"}], "update_date": "2020-09-08", "authors_parsed": [["Achermann", "Reto", ""], ["Hossle", "Nora", ""], ["Humbel", "Lukas", ""], ["Schwyn", "Daniel", ""], ["Cock", "David", ""], ["Roscoe", "Timothy", ""]]}, {"id": "2009.06988", "submitter": "Maksym Planeta", "authors": "Maksym Planeta, Jan Bierbaum, Leo Sahaya Daphne Antony, Torsten\n  Hoefler, Hermann H\\\"artig", "title": "MigrOS: Transparent Operating Systems Live Migration Support for\n  Containerised RDMA-applications", "comments": "16 pages, 13 figures, 4 tables, 1 listing", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.DC cs.NI", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Major data centre providers are introducing RDMA-based networks for their\ntenants, as well as for operating the underlying infrastructure. In comparison\nto traditional socket-based network stacks, RDMA-based networks offer higher\nthroughput, lower latency and reduced CPU overhead. However, transparent\ncheckpoint and migration operations become much more difficult. The key reason\nis that the OS is removed from the critical path of communication. As a result,\nsome of the communication state itself resides in the NIC hardware and is no\nmore under the direct control of the OS. This control includes especially the\nsupport for virtualisation of communication which is needed for live migration\nof communication partners. In this paper, we propose the basic principles\nrequired to implement a migration-capable RDMA-based network. We recommend some\nchanges at the software level and small changes at the hardware level. As a\nproof of concept, we integrate the proposed changes into SoftRoCE, an\nopen-source kernel-level implementation of the RoCE protocol. We claim that\nthese changes introduce no runtime overhead when migration does not happen.\nFinally, we develop a proof-of-concept implementation for migrating\ncontainerised applications that use RDMA-based networks.\n", "versions": [{"version": "v1", "created": "Tue, 15 Sep 2020 11:15:25 GMT"}, {"version": "v2", "created": "Fri, 23 Oct 2020 12:21:28 GMT"}], "update_date": "2020-10-26", "authors_parsed": [["Planeta", "Maksym", ""], ["Bierbaum", "Jan", ""], ["Antony", "Leo Sahaya Daphne", ""], ["Hoefler", "Torsten", ""], ["H\u00e4rtig", "Hermann", ""]]}, {"id": "2009.09104", "submitter": "Esmail Asyabi", "authors": "Esmail Asyabi, Azer Bestavros, Renato Mancuso, Richard West, Erfan\n  Sharafzadeh", "title": "Akita: A CPU scheduler for virtualized Clouds", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Clouds inherit CPU scheduling policies of operating systems. These policies\nenforce fairness while leveraging best-effort mechanisms to enhance\nresponsiveness of all schedulable entities, irrespective of their service level\nobjectives (SLOs). This leads to unpredictable performance that forces cloud\nproviders to enforce strict reservation and isolation policies to prevent\nhigh-criticality services (e.g., Memcached) from being impacted by\nlow-criticality ones (e.g., logging), which results in low utilization.\n  In this paper, we present Akita, a hypervisor CPU scheduler that delivers\npredictable performance at high utilization. Akita allows virtual machines\n(VMs) to be categorized into high- and low-criticality VMs. Akita provides\nstrong guarantees on the ability of cloud providers to meet SLOs of\nhigh-criticality VMs, by temporarily slowing down low-criticality VMs if\nnecessary. Akita, therefore, allows the co-existence of high and\nlow-criticality VMs on the same physical machine, leading to higher\nutilization. The effectiveness of Akita is demonstrated by a prototype\nimplementation in the Xen hypervisor. We present experimental results that show\nthe many advantages of adopting Akita as the hypervisor CPU scheduler. In\nparticular, we show that high-criticality Memcached VMs are able to deliver\npredictable performance despite being co-located with low-criticality CPU-bound\nVMs.\n", "versions": [{"version": "v1", "created": "Fri, 18 Sep 2020 22:07:17 GMT"}], "update_date": "2020-09-22", "authors_parsed": [["Asyabi", "Esmail", ""], ["Bestavros", "Azer", ""], ["Mancuso", "Renato", ""], ["West", "Richard", ""], ["Sharafzadeh", "Erfan", ""]]}, {"id": "2009.09206", "submitter": "Ayush Mangal", "authors": "Ayush Mangal, Jitesh Jain, Keerat Kaur Guliani, Omkar Bhalerao", "title": "DEAP Cache: Deep Eviction Admission and Prefetching for Cache", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.AI cs.LG stat.ML", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Recent approaches for learning policies to improve caching, target just one\nout of the prefetching, admission and eviction processes. In contrast, we\npropose an end to end pipeline to learn all three policies using machine\nlearning. We also take inspiration from the success of pretraining on large\ncorpora to learn specialized embeddings for the task. We model prefetching as a\nsequence prediction task based on past misses. Following previous works\nsuggesting that frequency and recency are the two orthogonal fundamental\nattributes for caching, we use an online reinforcement learning technique to\nlearn the optimal policy distribution between two orthogonal eviction\nstrategies based on them. While previous approaches used the past as an\nindicator of the future, we instead explicitly model the future frequency and\nrecency in a multi-task fashion with prefetching, leveraging the abilities of\ndeep networks to capture futuristic trends and use them for learning eviction\nand admission. We also model the distribution of the data in an online fashion\nusing Kernel Density Estimation in our approach, to deal with the problem of\ncaching non-stationary data. We present our approach as a \"proof of concept\" of\nlearning all three components of cache strategies using machine learning and\nleave improving practical deployment for future work.\n", "versions": [{"version": "v1", "created": "Sat, 19 Sep 2020 10:23:15 GMT"}], "update_date": "2020-09-22", "authors_parsed": [["Mangal", "Ayush", ""], ["Jain", "Jitesh", ""], ["Guliani", "Keerat Kaur", ""], ["Bhalerao", "Omkar", ""]]}, {"id": "2009.09845", "submitter": "Johann Schleier-Smith", "authors": "Johann Schleier-Smith and Leonhard Holz and Nathan Pemberton and\n  Joseph M. Hellerstein", "title": "A FaaS File System for Serverless Computing", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Serverless computing with cloud functions is quickly gaining adoption, but\nconstrains programmers with its limited support for state management. We\nintroduce a shared file system for cloud functions. It offers familiar POSIX\nsemantics while taking advantage of distinctive aspects of cloud functions to\nachieve scalability and performance beyond what traditional shared file systems\ncan offer. We take advantage of the function-grained fault tolerance model of\ncloud functions to proceed optimistically using local state, safe in the\nknowledge that we can restart if cache reads or lock activity cannot be\nreconciled upon commit. The boundaries of cloud functions provide implicit\ncommit and rollback points, giving us the flexibility to use transaction\nprocessing techniques without changing the programming model or API. This\nallows a variety of stateful sever-based applications to benefit from the\nsimplicity and scalability of serverless computing, often with little or no\nmodification.\n", "versions": [{"version": "v1", "created": "Wed, 16 Sep 2020 08:16:27 GMT"}], "update_date": "2020-09-22", "authors_parsed": [["Schleier-Smith", "Johann", ""], ["Holz", "Leonhard", ""], ["Pemberton", "Nathan", ""], ["Hellerstein", "Joseph M.", ""]]}]