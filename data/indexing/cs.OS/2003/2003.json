[{"id": "2003.01107", "submitter": "Prajoy Podder", "authors": "Arnab Paul, Mamdudul Haque Khan, M. Muktadir Rahman, Tanvir Zaman\n  Khan, Prajoy Podder and Md. Yeasir Akram Khan", "title": "Reconfigurable Parallel Architecture of High Speed Round Robin Arbiter", "comments": "Published in 2015 International Conference on Electrical,\n  Electronics, Signals, Communication and Optimization (EESCO)", "journal-ref": "2015 International Conference on Electrical, Electronics, Signals,\n  Communication and Optimization (EESCO)", "doi": "10.1109/EESCO.2015.7253744", "report-no": "15438813", "categories": "cs.DC cs.NI cs.OS", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  With a view to managing the increasing traffic in computer networks, round\nrobin arbiter has been proposed to work with packet switching system to have\nincreased speed in providing access and scheduling. Round robin arbiter is a\ndoorway to a particular bus based on request along with equal priority and\ngives turns to devices connected to it in a cyclic order. Considering the rapid\ngrowth in computer networking and the emergence of computer automation which\nwill need much more access to the existing limited resources, this paper\nemphasizes on designing a reconfigurable round robin arbiter over FPGA which\ntakes parallel requests and processes them with high efficiency and less delay\nthan existing designs. Proposed round robin arbiter encounters with 4 to 12\ndevices. Results show that with 200% increment in the number of connected\ndevices, only 2.69% increment has been found in the delay. With less delay,\nproposed round robin arbiter exhibits high speed performance with higher\ntraffic, which is a new feature in comparison with the existing designs.\n", "versions": [{"version": "v1", "created": "Tue, 3 Mar 2020 05:33:23 GMT"}], "update_date": "2020-04-27", "authors_parsed": [["Paul", "Arnab", ""], ["Khan", "Mamdudul Haque", ""], ["Rahman", "M. Muktadir", ""], ["Khan", "Tanvir Zaman", ""], ["Podder", "Prajoy", ""], ["Khan", "Md. Yeasir Akram", ""]]}, {"id": "2003.05025", "submitter": "David Dice", "authors": "Dave Dice and Alex Kogan", "title": "Fissile Locks", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Classic test-and-test (TS) mutual exclusion locks are simple, and enjoy high\nperformance and low latency of ownership transfer under light or no contention.\nHowever, they do not scale gracefully under high contention and do not provide\nany admission order guarantees. Such concerns led to the development of\nscalable queue-based locks, such as a recent Compact NUMA-aware (CNA) lock, a\nvariant of another popular queue-based MCS lock. CNA scales well under load and\nprovides certain admission guarantees, but has more complicated lock handover\noperations than TS and incurs higher latencies at low contention. We propose\nFissile locks, which capture the most desirable properties of both TS and CNA.\nA Fissile lock consists of two underlying locks: a TS lock, which serves as a\nfast path, and a CNA lock, which serves as a slow path. The key feature of\nFissile locks is the ability of threads on the fast path to bypass threads\nenqueued on the slow path, and acquire the lock with less overhead than CNA.\nBypass is bounded (by a tunable parameter) to avoid starvation and ensure\nlong-term fairness. The result is a highly scalable NUMA-aware lock with\nprogress guarantees that performs like TS at low contention and like CNA at\nhigh contention.\n", "versions": [{"version": "v1", "created": "Tue, 10 Mar 2020 22:51:16 GMT"}, {"version": "v2", "created": "Fri, 1 May 2020 21:24:00 GMT"}], "update_date": "2020-05-05", "authors_parsed": [["Dice", "Dave", ""], ["Kogan", "Alex", ""]]}, {"id": "2003.05160", "submitter": "Arvind Easwaran", "authors": "Xiaozhe Gu, Arvind Easwaran", "title": "Efficient Schedulability Test for Dynamic-Priority Scheduling of\n  Mixed-Criticality Real-Time Systems", "comments": "Publication rights licensed to ACM", "journal-ref": "ACM Transactions on Embedded Computing Systems, Volume 17, Issue\n  1, Pages 24:1-24:24, November 2017", "doi": "10.1145/3105922", "report-no": null, "categories": "cs.OS cs.SY eess.SY", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Systems in many safety-critical application domains are subject to\ncertification requirements. In such a system, there are typically different\napplications providing functionalities that have varying degrees of\ncriticality. Consequently, the certification requirements for functionalities\nat these different criticality levels are also varying, with very high levels\nof assurance required for a highly critical functionality, whereas relatively\nlow levels of assurance required for a less critical functionality. Considering\nthe timing assurance given to various applications in the form of guaranteed\nbudgets within deadlines, a theory of real-time scheduling for such\nmulti-criticality systems has been under development in the recent past. In\nparticular, an algorithm called Earliest Deadline First with Virtual Deadlines\n(EDF-VD) has shown a lot of promise for systems with two criticality levels,\nespecially in terms of practical performance demonstrated through experiment\nresults. In this paper we design a new schedulability test for EDF-VD that\nextend these performance benefits to multi-criticality systems. We propose a\nnew test based on demand bound functions and also present a novel virtual\ndeadline assignment strategy. Through extensive experiments we show that the\nproposed technique significantly outperforms existing strategies for a variety\nof generic real-time systems.\n", "versions": [{"version": "v1", "created": "Wed, 11 Mar 2020 08:38:34 GMT"}], "update_date": "2020-03-12", "authors_parsed": [["Gu", "Xiaozhe", ""], ["Easwaran", "Arvind", ""]]}, {"id": "2003.05168", "submitter": "Arvind Easwaran", "authors": "Saravanan Ramanathan, Arvind Easwaran, Hyeonjoong Cho", "title": "Multi-Rate Fluid Scheduling of Mixed-Criticality Systems on\n  Multiprocessors", "comments": "This is a post-peer-review, pre-copyedit version of an article\n  published in Real-Time Systems. The final authenticated version is available\n  online at the below DOI", "journal-ref": "Springer Real-Time Systems, Issue 54, pages 247-277, April 2018", "doi": "10.1007/s11241-017-9296-1", "report-no": null, "categories": "cs.OS cs.SY eess.SY", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this paper we consider the problem of mixed-criticality (MC) scheduling of\nimplicit-deadline sporadic task systems on a homogenous multiprocessor\nplatform. Focusing on dual-criticality systems, algorithms based on the fluid\nscheduling model have been proposed in the past. These algorithms use a\ndual-rate execution model for each high-criticality task depending on the\nsystem mode. Once the system switches to the high-criticality mode, the\nexecution rates of such tasks are increased to meet their increased demand.\nAlthough these algorithms are speed-up optimal, they are unable to schedule\nseveral feasible dual-criticality task systems. This is because a single fixed\nexecution rate for each high-criticality task after the mode switch is not\nefficient to handle the high variability in demand during the transition period\nimmediately following the mode switch. This demand variability exists as long\nas the carry-over jobs of high-criticality tasks, that is jobs released before\nthe mode switch, have not completed. Addressing this shortcoming, we propose a\nmulti-rate fluid execution model for dual-criticality task systems in this\npaper. Under this model, high-criticality tasks are allocated varying execution\nrates in the transition period after the mode switch to efficiently handle the\ndemand variability. We derive a sufficient schedulability test for the proposed\nmodel and show its dominance over the dual-rate fluid execution model. Further,\nwe also present a speed-up optimal rate assignment strategy for the multi-rate\nmodel, and experimentally show that the proposed model outperforms all the\nexisting MC scheduling algorithms with known speed-up bounds.\n", "versions": [{"version": "v1", "created": "Wed, 11 Mar 2020 08:58:29 GMT"}], "update_date": "2020-03-12", "authors_parsed": [["Ramanathan", "Saravanan", ""], ["Easwaran", "Arvind", ""], ["Cho", "Hyeonjoong", ""]]}, {"id": "2003.05442", "submitter": "Arvind Easwaran", "authors": "Jalil Boudjadar, Saravanan Ramanathan, Arvind Easwaran, Ulrik Nyman", "title": "Combining Task-level and System-level Scheduling Modes for Mixed\n  Criticality Systems", "comments": "\\copyright 2019 IEEE. Personal use of this material is permitted.\n  Permission from IEEE must be obtained for all other uses, in any current or\n  future media, including reprinting/republishing this material for advertising\n  or promotional purposes, creating new collective works, for resale or\n  redistribution to servers or lists, or reuse of any copyrighted component of\n  this work in other works", "journal-ref": "IEEE/ACM International Symposium on Distributed Simulation and\n  Real Time Applications (DS-RT), Cosenza, Italy, 2019, pages 1-10", "doi": "10.1109/DS-RT47707.2019.8958666", "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Different scheduling algorithms for mixed criticality systems have been\nrecently proposed. The common denominator of these algorithms is to discard low\ncritical tasks whenever high critical tasks are in lack of computation\nresources. This is achieved upon a switch of the scheduling mode from Normal to\nCritical. We distinguish two main categories of the algorithms: system-level\nmode switch and task-level mode switch. System-level mode algorithms allow low\ncriticality (LC) tasks to execute only in normal mode. Task-level mode switch\nalgorithms enable to switch the mode of an individual high criticality task\n(HC), from low (LO) to high (HI), to obtain priority over all LC tasks. This\npaper investigates an online scheduling algorithm for mixed-criticality systems\nthat supports dynamic mode switches for both task level and system level. When\na HC task job overruns its LC budget, then only that particular job is switched\nto HI mode. If the job cannot be accommodated, then the system switches to\nCritical mode. To accommodate for resource availability of the HC jobs, the LC\ntasks are degraded by stretching their periods until the Critical mode\nexhibiting job complete its execution. The stretching will be carried out until\nthe resource availability is met. We have mechanized and implemented the\nproposed algorithm using Uppaal. To study the efficiency of our scheduling\nalgorithm, we examine a case study and compare our results to the state of the\nart algorithms.\n", "versions": [{"version": "v1", "created": "Wed, 11 Mar 2020 03:32:55 GMT"}], "update_date": "2020-03-13", "authors_parsed": [["Boudjadar", "Jalil", ""], ["Ramanathan", "Saravanan", ""], ["Easwaran", "Arvind", ""], ["Nyman", "Ulrik", ""]]}, {"id": "2003.05444", "submitter": "Arvind Easwaran", "authors": "Arvind Easwaran", "title": "Demand-based Scheduling of Mixed-Criticality Sporadic Tasks on One\n  Processor", "comments": "\\copyright 2013 IEEE. Personal use of this material is permitted.\n  Permission from IEEE must be obtained for all other uses, in any current or\n  future media, including reprinting/republishing this material for advertising\n  or promotional purposes, creating new collective works, for resale or\n  redistribution to servers or lists, or reuse of any copyrighted component of\n  this work in other works", "journal-ref": "IEEE Real-Time Systems Symposium (RTSS), Vancouver, Canada, 2013,\n  pages 78-87", "doi": "10.1109/RTSS.2013.16", "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Strategies that artificially tighten high-criticality task deadlines in\nlow-criticality behaviors have been successfully employed for scheduling\nmixed-criticality systems. Although efficient scheduling algorithms have been\ndeveloped for implicit deadline task systems, the same is not true for more\ngeneral sporadic tasks. In this paper we develop a new demand-based\nschedulability test for such general mixed-criticality task systems, in which\nwe collectively bound the low- and high-criticality demand of tasks. We show\nthat the new test strictly dominates the only other known demand-based test for\nsuch systems. We also propose a new deadline tightening strategy based on this\ntest, and show through simulations that the strategy significantly outperforms\nall known scheduling algorithms for a variety of sporadic task systems.\n", "versions": [{"version": "v1", "created": "Wed, 11 Mar 2020 05:00:53 GMT"}], "update_date": "2020-03-13", "authors_parsed": [["Easwaran", "Arvind", ""]]}, {"id": "2003.05445", "submitter": "Arvind Easwaran", "authors": "Saravanan Ramanathan, Arvind Easwaran", "title": "Utilization Difference Based Partitioned Scheduling of Mixed-Criticality\n  Systems", "comments": "\\copyright 2017 IEEE. Personal use of this material is permitted.\n  Permission from IEEE must be obtained for all other uses, in any current or\n  future media, including reprinting/republishing this material for advertising\n  or promotional purposes, creating new collective works, for resale or\n  redistribution to servers or lists, or reuse of any copyrighted component of\n  this work in other works", "journal-ref": "Design, Automation & Test in Europe Conference & Exhibition\n  (DATE), 2017, Lausanne, 2017, pages 238-243", "doi": "10.23919/DATE.2017.7926989", "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Mixed-Criticality (MC) systems consolidate multiple functionalities with\ndifferent criticalities onto a single hardware platform. Such systems improve\nthe overall resource utilization while guaranteeing resources to critical\ntasks. In this paper, we focus on the problem of partitioned multiprocessor MC\nscheduling, in particular the problem of designing efficient partitioning\nstrategies. We develop two new partitioning strategies based on the principle\nof evenly distributing the difference between total high-critical utilization\nand total low-critical utilization for the critical tasks among all processors.\nBy balancing this difference, we are able to reduce the pessimism in\nuniprocessor MC schedulability tests that are applied on each processor, thus\nimproving overall schedulability. To evaluate the schedulability performance of\nthe proposed strategies, we compare them against existing partitioned\nalgorithms using extensive experiments. We show that the proposed strategies\nare effective with both dynamic-priority Earliest Deadline First with Virtual\nDeadlines (EDF-VD) and fixed-priority Adaptive Mixed-Criticality (AMC)\nalgorithms. Specifically, our results show that the proposed strategies improve\nschedulability by as much as 28.1% and 36.2% for implicit and\nconstrained-deadline task systems respectively.\n", "versions": [{"version": "v1", "created": "Wed, 11 Mar 2020 05:11:33 GMT"}], "update_date": "2020-03-13", "authors_parsed": [["Ramanathan", "Saravanan", ""], ["Easwaran", "Arvind", ""]]}, {"id": "2003.07945", "submitter": "Yang Hu", "authors": "Soroush Bateni, Zhendong Wang, Yuankun Zhu, Yang Hu, Cong Liu", "title": "Co-Optimizing Performance and Memory FootprintVia Integrated CPU/GPU\n  Memory Management, anImplementation on Autonomous Driving Platform", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.OS", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  Cutting-edge embedded system applications, such as self-driving cars and\nunmanned drone software, are reliant on integrated CPU/GPU platforms for their\nDNNs-driven workload, such as perception and other highly parallel components.\nIn this work, we set out to explore the hidden performance implication of GPU\nmemory management methods of integrated CPU/GPU architecture. Through a series\nof experiments on micro-benchmarks and real-world workloads, we find that the\nperformance under different memory management methods may vary according to\napplication characteristics. Based on this observation, we develop a\nperformance model that can predict system overhead for each memory management\nmethod based on application characteristics. Guided by the performance model,\nwe further propose a runtime scheduler. By conducting per-task memory\nmanagement policy switching and kernel overlapping, the scheduler can\nsignificantly relieve the system memory pressure and reduce the multitasking\nco-run response time. We have implemented and extensively evaluated our system\nprototype on the NVIDIA Jetson TX2, Drive PX2, and Xavier AGX platforms, using\nboth Rodinia benchmark suite and two real-world case studies of drone software\nand autonomous driving software.\n", "versions": [{"version": "v1", "created": "Tue, 17 Mar 2020 21:09:24 GMT"}, {"version": "v2", "created": "Thu, 19 Mar 2020 02:43:49 GMT"}], "update_date": "2020-03-20", "authors_parsed": [["Bateni", "Soroush", ""], ["Wang", "Zhendong", ""], ["Zhu", "Yuankun", ""], ["Hu", "Yang", ""], ["Liu", "Cong", ""]]}, {"id": "2003.08364", "submitter": "Arvind Easwaran", "authors": "Xiaozhe Gu, Arvind Easwaran", "title": "Dynamic Budget Management with Service Guarantees for Mixed-Criticality\n  Systems", "comments": "\\copyright 2016 IEEE. Personal use of this material is permitted.\n  Permission from IEEE must be obtained for all other uses, in any current or\n  future media, including reprinting/republishing this material for advertising\n  or promotional purposes, creating new collective works, for resale or\n  redistribution to servers or lists, or reuse of any copyrighted component of\n  this work in other works", "journal-ref": "IEEE Real-Time Systems Symposium (RTSS), Porto, Portugal, 2016,\n  pages 47-56", "doi": "10.1109/RTSS.2016.014", "report-no": null, "categories": "cs.DC cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Many existing studies on mixed-criticality (MC) scheduling assume that\nlow-criticality budgets for high-criticality applications are known apriori.\nThese budgets are primarily used as guidance to determine when the scheduler\nshould switch the system mode from low to high. Based on this key observation,\nin this paper we propose a dynamic MC scheduling model under which\nlow-criticality budgets for individual high-criticality applications are\ndetermined at runtime as opposed to being fixed offline. To ensure sufficient\nbudget for high-criticality applications at all times, we use offline\nschedulability analysis to determine a system-wide total low-criticality budget\nallocation for all the high-criticality applications combined. This total\nbudget is used as guidance in our model to determine the need for a\nmode-switch. The runtime strategy then distributes this total budget among the\nvarious applications depending on their execution requirement and with the\nobjective of postponing mode-switch as much as possible. We show that this\nruntime strategy is able to postpone mode-switches for a longer time than any\nstrategy that uses a fixed low-criticality budget allocation for each\napplication. Finally, since we are able to control the total budget allocation\nfor high-criticality applications before mode-switch, we also propose\ntechniques to determine these budgets considering system-wide objectives such\nas schedulability and service guarantee for low-criticality applications.\n", "versions": [{"version": "v1", "created": "Wed, 11 Mar 2020 04:03:40 GMT"}], "update_date": "2020-03-19", "authors_parsed": [["Gu", "Xiaozhe", ""], ["Easwaran", "Arvind", ""]]}, {"id": "2003.12452", "submitter": "George K. Thiruvathukal", "authors": "Jack West and Neil Kingensmith and George K. Thiruvathukal", "title": "FLIC: A Distributed Fog Cache for City-Scale Applications", "comments": "Accepted at 2020 IEEE International Conference on Fog Computing", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.OS", "license": "http://creativecommons.org/licenses/by-nc-sa/4.0/", "abstract": "  We present FLIC, a distributed software data caching framework for fogs that\nreduces network traffic and latency. FLICis targeted toward city-scale\ndeployments of cooperative IoT devices in which each node gathers and shares\ndata with surrounding devices. As machine learning and other data processing\ntechniques that require large volumes of training data are ported to low-cost\nand low-power IoT systems, we expect that data analysis will be moved away from\nthe cloud. Separation from the cloud will reduce reliance on power-hungry\ncentralized cloud-based infrastructure. However, city-scale deployments of\ncooperative IoT devices often connect to the Internet with cellular service, in\nwhich service charges are proportional to network usage. IoT system architects\nmust be clever in order to keep costs down in these scenarios. To reduce the\nnetwork bandwidth required to operate city-scale deployments of cooperative IoT\nsystems, FLIC implements a distributed cache on the IoT nodes in the fog. FLIC\nallows the IoT network to share its data without repetitively interacting with\na simple cloud storage service reducing calls out to a backing store. Our\nresults displayed a less than 2% miss rate on reads. Thus, allowing for only 5%\nof requests needing the backing store. We were also able to achieve more than\n50% reduction in bytes transmitted per second.\n", "versions": [{"version": "v1", "created": "Wed, 25 Mar 2020 00:37:56 GMT"}], "update_date": "2020-03-30", "authors_parsed": [["West", "Jack", ""], ["Kingensmith", "Neil", ""], ["Thiruvathukal", "George K.", ""]]}]