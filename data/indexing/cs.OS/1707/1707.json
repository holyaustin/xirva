[{"id": "1707.05082", "submitter": "Yue Chen", "authors": "Yue Chen, Yulong Zhang, Zhi Wang, Tao Wei", "title": "Downgrade Attack on TrustZone", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CR cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Security-critical tasks require proper isolation from untrusted software.\nChip manufacturers design and include trusted execution environments (TEEs) in\ntheir processors to secure these tasks. The integrity and security of the\nsoftware in the trusted environment depend on the verification process of the\nsystem.\n  We find a form of attack that can be performed on the current implementations\nof the widely deployed ARM TrustZone technology. The attack exploits the fact\nthat the trustlet (TA) or TrustZone OS loading verification procedure may use\nthe same verification key and may lack proper rollback prevention across\nversions. If an exploit works on an out-of-date version, but the vulnerability\nis patched on the latest version, an attacker can still use the same exploit to\ncompromise the latest system by downgrading the software to an older and\nexploitable version.\n  We did experiments on popular devices on the market including those from\nGoogle, Samsung and Huawei, and found that all of them have the risk of being\nattacked. Also, we show a real-world example to exploit Qualcomm's QSEE.\n  In addition, in order to find out which device images share the same\nverification key, pattern matching schemes for different vendors are analyzed\nand summarized.\n", "versions": [{"version": "v1", "created": "Mon, 17 Jul 2017 10:38:13 GMT"}, {"version": "v2", "created": "Tue, 18 Jul 2017 05:17:14 GMT"}], "update_date": "2017-07-19", "authors_parsed": [["Chen", "Yue", ""], ["Zhang", "Yulong", ""], ["Wang", "Zhi", ""], ["Wei", "Tao", ""]]}, {"id": "1707.05260", "submitter": "Farzad Farshchi", "authors": "Farzad Farshchi, Prathap Kumar Valsan, Renato Mancuso, Heechul Yun", "title": "Deterministic Memory Abstraction and Supporting Multicore System\n  Architecture", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.AR cs.OS cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Poor time predictability of multicore processors has been a long-standing\nchallenge in the real-time systems community. In this paper, we make a case\nthat a fundamental problem that prevents efficient and predictable real-time\ncomputing on multicore is the lack of a proper memory abstraction to express\nmemory criticality, which cuts across various layers of the system: the\napplication, OS, and hardware. We, therefore, propose a new holistic resource\nmanagement approach driven by a new memory abstraction, which we call\nDeterministic Memory. The key characteristic of deterministic memory is that\nthe platform - the OS and hardware - guarantees small and tightly bounded\nworst-case memory access timing. In contrast, we call the conventional memory\nabstraction as best-effort memory in which only highly pessimistic worst-case\nbounds can be achieved. We propose to utilize both abstractions to achieve high\ntime predictability but without significantly sacrificing performance. We\npresent deterministic memory-aware OS and architecture designs, including\nOS-level page allocator, hardware-level cache, and DRAM controller designs. We\nimplement the proposed OS and architecture extensions on Linux and gem5\nsimulator. Our evaluation results, using a set of synthetic and real-world\nbenchmarks, demonstrate the feasibility and effectiveness of our approach.\n", "versions": [{"version": "v1", "created": "Mon, 17 Jul 2017 16:12:15 GMT"}, {"version": "v2", "created": "Wed, 11 Oct 2017 20:40:13 GMT"}, {"version": "v3", "created": "Fri, 9 Feb 2018 22:36:45 GMT"}, {"version": "v4", "created": "Thu, 19 Apr 2018 00:06:48 GMT"}], "update_date": "2018-04-20", "authors_parsed": [["Farshchi", "Farzad", ""], ["Valsan", "Prathap Kumar", ""], ["Mancuso", "Renato", ""], ["Yun", "Heechul", ""]]}, {"id": "1707.05405", "submitter": "Ayman Noor", "authors": "Ayman Noor", "title": "Study and Analysis of MAC/IPAD Lab Configuration", "comments": "11 pages, 15 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper is about three virtualization modes: VMware, Parallels, and Boot\nCamping. The trade off of their testing is the hardware requirements. The main\nquestion is, among the three, which is the most suitable? The answer actually\nvaries from user to user. It depends on the user needs. Moreover, it is\nnecessary to consider its performance, graphics, efficiency and reliability,\nand interoperability, and that is our major scope. In order to take the final\ndecision in choosing one of the modes it is important to run some tests, which\ncosts a lot in terms of money, complexity, and time consumption. Therefore, in\norder to overcome this trade off, most of the research has been done through\nonline benchmarking and my own anticipation. The final solution was extracted\nafter comparing all previously mentioned above and after rigorous testing made\nwhich will be introduced later in this document.\n", "versions": [{"version": "v1", "created": "Mon, 17 Jul 2017 22:26:19 GMT"}], "update_date": "2017-07-19", "authors_parsed": [["Noor", "Ayman", ""]]}, {"id": "1707.07161", "submitter": "Gal Oren", "authors": "Gal Oren", "title": "Optimizations of Management Algorithms for Multi-Level Memory Hierarchy", "comments": "Master's Thesis, Diss. The Open University (2015)", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In the near future the SCM is predicted to modify the form of new programs,\nthe access form to storage, and the way that storage devices themselves are\nbuilt. Therefore, a combination between the SCM and a designated Memory\nAllocation Manager (MAM) that will allow the programmer to manually control the\ndifferent memories in the memory hierarchy will be likely to achieve a new\nlevel of performance for memory-aware data structures. Although the manual MAM\nseems to be the optimal approach for multi-level memory hierarchy management,\nthis technique is still very far from being realistic, and the chances that it\nwould be implemented in current codes using High Performance Computing (HPC)\nplatforms is quite low. This premise means that the most reasonable way to\nintroduce the SCM into any usable and popular memory system would be by\nimplementing an automated version of the MAM using the fundamentals of paging\nalgorithms, as used for two-level memory hierarchy. Our hypothesis is that\nachieving appropriate transferability between memory levels may be possible\nusing ideas of algorithms employed in current virtual memory systems, and that\nthe adaptation of those algorithms from a two-level memory hierarchy to an\nN-level memory hierarchy is possible. In order to reach the conclusion that our\nhypothesis is correct, we investigated various paging algorithms, and found the\nones that could be adapted successfully from two-level memory hierarchy to an\nN-level memory hierarchy. We discovered that using an adaptation of the Aging\npaging algorithm to an N-level memory hierarchy results in the best\nperformances in terms of Hit/Miss ratio. In order to verify our hypothesis we\nbuild a simulator called \"DeMemory simulator\" for analyzing our algorithms as\nwell as for other algorithms that will be devised in the future.\n", "versions": [{"version": "v1", "created": "Sat, 22 Jul 2017 13:29:01 GMT"}], "update_date": "2017-07-25", "authors_parsed": [["Oren", "Gal", ""]]}, {"id": "1707.07780", "submitter": "Blake Caldwell", "authors": "Blake Caldwell, Youngbin Im, Sangtae Ha, Richard Han, and Eric Keller", "title": "FluidMem: Memory as a Service for the Datacenter", "comments": "University of Colorado Technical Report", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Disaggregating resources in data centers is an emerging trend. Recent work\nhas begun to explore memory disaggregation, but suffers limitations including\nlack of consideration of the complexity of cloud-based deployment, including\nheterogeneous hardware and APIs for cloud users and operators. In this paper,\nwe present FluidMem, a complete system to realize disaggregated memory in the\ndatacenter. Going beyond simply demonstrating remote memory is possible, we\ncreate an entire Memory as a Service. We define the requirements of Memory as a\nService and build its implementation in Linux as FluidMem. We present a\nperformance analysis of FluidMem and demonstrate that it transparently supports\nremote memory for standard applications such as MongoDB and genome sequencing\napplications.\n", "versions": [{"version": "v1", "created": "Tue, 25 Jul 2017 00:59:32 GMT"}], "update_date": "2017-07-26", "authors_parsed": [["Caldwell", "Blake", ""], ["Im", "Youngbin", ""], ["Ha", "Sangtae", ""], ["Han", "Richard", ""], ["Keller", "Eric", ""]]}, {"id": "1707.08514", "submitter": "Jayashree Mohan", "authors": "Jayashree Mohan, Rohan Kadekodi, Vijay Chidambaram", "title": "Analyzing IO Amplification in Linux File Systems", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present the first systematic analysis of read, write, and space\namplification in Linux file systems. While many researchers are tackling write\namplification in key-value stores, IO amplification in file systems has been\nlargely unexplored. We analyze data and metadata operations on five widely-used\nLinux file systems: ext2, ext4, XFS, btrfs, and F2FS. We find that data\noperations result in significant write amplification (2-32X) and that metadata\noperations have a large IO cost. For example, a single rename requires 648 KB\nwrite IO in btrfs. We also find that small random reads result in read\namplification of 2-13X. Based on these observations, we present the CReWS\nconjecture about the relationship between IO amplification, consistency, and\nstorage space utilization. We hope this paper spurs people to design future\nfile systems with less IO amplification, especially for non-volatile memory\ntechnologies.\n", "versions": [{"version": "v1", "created": "Wed, 26 Jul 2017 16:02:29 GMT"}], "update_date": "2017-07-27", "authors_parsed": [["Mohan", "Jayashree", ""], ["Kadekodi", "Rohan", ""], ["Chidambaram", "Vijay", ""]]}]