[{"id": "1208.6390", "submitter": "Jalil Boukhobza", "authors": "Pierre Olivier (Lab-STICC), Jalil Boukhobza (Lab-STICC), Eric Senn\n  (Lab-STICC)", "title": "Performance Evaluation of Flash File Systems", "comments": "Colloque du GDR SoC-SiP, Paris : France (2012)", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Today, flash memory are strongly used in the embedded system domain. NAND\nflash memories are the building block of main secondary storage systems. Such\nmemories present many benefits in terms of data density, I/O performance, shock\nresistance and power consumption. Nevertheless, flash does not come without\nconstraints: the write / erase granularity asymmetry and the limited lifetime\nbring the need for specific management. This can be done through the operating\nsystem using dedicated Flash File Systems (FFSs). In this document, we present\ngeneral concepts about FFSs, and implementations example that are JFFS2, YAFFS2\nand UBIFS, the most commonly used flash file systems. Then we give performance\nevaluation results for these FFSs.\n", "versions": [{"version": "v1", "created": "Fri, 31 Aug 2012 06:31:48 GMT"}], "update_date": "2012-09-03", "authors_parsed": [["Olivier", "Pierre", "", "Lab-STICC"], ["Boukhobza", "Jalil", "", "Lab-STICC"], ["Senn", "Eric", "", "Lab-STICC"]]}, {"id": "1208.6391", "submitter": "Jalil Boukhobza", "authors": "Pierre Olivier (Lab-STICC), Jalil Boukhobza (Lab-STICC), Eric Senn\n  (Lab-STICC)", "title": "On Benchmarking Embedded Linux Flash File Systems", "comments": "Embed With Linux, Lorient : France (2012)", "journal-ref": "ACM SIGBED Review 9(2) 43-47 9, 2 (2012) 43-47", "doi": null, "report-no": null, "categories": "cs.OS cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Due to its attractive characteristics in terms of performance, weight and\npower consumption, NAND flash memory became the main non volatile memory (NVM)\nin embedded systems. Those NVMs also present some specific\ncharacteristics/constraints: good but asymmetric I/O performance, limited\nlifetime, write/erase granularity asymmetry, etc. Those peculiarities are\neither managed in hardware for flash disks (SSDs, SD cards, USB sticks, etc.)\nor in software for raw embedded flash chips. When managed in software, flash\nalgorithms and structures are implemented in a specific flash file system\n(FFS). In this paper, we present a performance study of the most widely used\nFFSs in embedded Linux: JFFS2, UBIFS,and YAFFS. We show some very particular\nbehaviors and large performance disparities for tested FFS operations such as\nmounting, copying, and searching file trees, compression, etc.\n", "versions": [{"version": "v1", "created": "Fri, 31 Aug 2012 06:32:38 GMT"}], "update_date": "2013-12-17", "authors_parsed": [["Olivier", "Pierre", "", "Lab-STICC"], ["Boukhobza", "Jalil", "", "Lab-STICC"], ["Senn", "Eric", "", "Lab-STICC"]]}, {"id": "1208.6406", "submitter": "Sorav Bansal", "authors": "Piyus Kedia, Sorav Bansal, Deepak Deshpande, Sreekanth Iyer", "title": "Building Resilient Cloud Over Unreliable Commodity Infrastructure", "comments": "Oral presentation at IEEE \"Cloud Computing for Emerging Markets\",\n  Oct. 11-12, 2012, Bangalore, India", "journal-ref": null, "doi": "10.1109/CCEM.2012.6354601", "report-no": null, "categories": "cs.OS cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Cloud Computing has emerged as a successful computing paradigm for\nefficiently utilizing managed compute infrastructure such as high speed\nrack-mounted servers, connected with high speed networking, and reliable\nstorage. Usually such infrastructure is dedicated, physically secured and has\nreliable power and networking infrastructure. However, much of our idle compute\ncapacity is present in unmanaged infrastructure like idle desktops, lab\nmachines, physically distant server machines, and laptops. We present a scheme\nto utilize this idle compute capacity on a best-effort basis and provide high\navailability even in face of failure of individual components or facilities.\n  We run virtual machines on the commodity infrastructure and present a cloud\ninterface to our end users. The primary challenge is to maintain availability\nin the presence of node failures, network failures, and power failures. We run\nmultiple copies of a Virtual Machine (VM) redundantly on geographically\ndispersed physical machines to achieve availability. If one of the running\ncopies of a VM fails, we seamlessly switchover to another running copy. We use\nVirtual Machine Record/Replay capability to implement this redundancy and\nswitchover. In current progress, we have implemented VM Record/Replay for\nuniprocessor machines over Linux/KVM and are currently working on VM\nRecord/Replay on shared-memory multiprocessor machines. We report initial\nexperimental results based on our implementation.\n", "versions": [{"version": "v1", "created": "Fri, 31 Aug 2012 06:53:14 GMT"}], "update_date": "2016-11-17", "authors_parsed": [["Kedia", "Piyus", ""], ["Bansal", "Sorav", ""], ["Deshpande", "Deepak", ""], ["Iyer", "Sreekanth", ""]]}, {"id": "1208.6428", "submitter": "Jalil Boukhobza", "authors": "Pierre Olivier (Lab-STICC), Jalil Boukhobza (Lab-STICC)", "title": "A Hardware Time Manager Implementation for the Xenomai Real-Time Kernel\n  of Embedded Linux", "comments": "Embed With Linux (EWiLi) workshop, Lorient : France (2012)", "journal-ref": "ACM SIGBED Review 9(2) 38-42 9, 2 (2012) 38-42", "doi": null, "report-no": null, "categories": "cs.OS cs.AR cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Nowadays, the use of embedded operating systems in different embedded\nprojects is subject to a tremendous growth. Embedded Linux is becoming one of\nthose most popular EOSs due to its modularity, efficiency, reliability, and\ncost. One way to make it hard real-time is to include a real-time kernel like\nXenomai. One of the key characteristics of a Real-Time Operating System (RTOS)\nis its ability to meet execution time deadlines deterministically. So, the more\nprecise and flexible the time management can be, the better it can handle\nefficiently the determinism for different embedded applications. RTOS time\nprecision is characterized by a specific periodic interrupt service controlled\nby a software time manager. The smaller the period of the interrupt, the better\nthe precision of the RTOS, the more it overloads the CPU, and though reduces\nthe overall efficiency of the RTOS. In this paper, we propose to drastically\nreduce these overheads by migrating the time management service of Xenomai into\na configurable hardware component to relieve the CPU. The hardware component is\nimplemented in a Field Programmable Gate Array coupled to the CPU. This work\nwas achieved in a Master degree project where students could apprehend many\nfields of embedded systems: RTOS programming, hardware design, performance\nevaluation, etc.\n", "versions": [{"version": "v1", "created": "Fri, 31 Aug 2012 09:04:05 GMT"}], "update_date": "2013-12-17", "authors_parsed": [["Olivier", "Pierre", "", "Lab-STICC"], ["Boukhobza", "Jalil", "", "Lab-STICC"]]}]