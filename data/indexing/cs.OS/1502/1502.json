[{"id": "1502.01509", "submitter": "Camille Coti", "authors": "Camille Coti and Nicolas Greneche", "title": "OS-level Failure Injection with SystemTap", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Failure injection in distributed systems has been an important issue to\nexperiment with robust, resilient distributed systems. In order to reproduce\nreal-life conditions, parts of the application must be killed without letting\nthe operating system close the existing network communications in a \"clean\"\nway. When a process is simply killed, the OS closes them. SystemTap is a an\ninfrastructure that probes the Linux kernel's internal calls. If processes are\nkilled at kernel-level, they can be destroyed without letting the OS do\nanything else. In this paper, we present a kernel-level failure injection\nsystem based on SystemTap. We present how it can be used to implement\ndeterministic and probabilistic failure scenarios.\n", "versions": [{"version": "v1", "created": "Thu, 5 Feb 2015 11:36:45 GMT"}], "update_date": "2015-02-06", "authors_parsed": [["Coti", "Camille", ""], ["Greneche", "Nicolas", ""]]}, {"id": "1502.02287", "submitter": "Heechul Yun", "authors": "Heechul Yun, Santosh Gondi, Siddhartha Biswas", "title": "Protecting Memory-Performance Critical Sections in Soft Real-Time\n  Applications", "comments": "technical report", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Soft real-time applications such as multimedia applications often show bursty\nmemory access patterns---regularly requiring a high memory bandwidth for a\nshort duration of time. Such a period is often critical for timely data\nprocessing. Hence, we call it a memory-performance critical section.\nUnfortunately, in multicore architecture, non-real-time applications on\ndifferent cores may also demand high memory bandwidth at the same time, which\ncan substantially increase the time spent on the memory performance critical\nsections.\n  In this paper, we present BWLOCK, user-level APIs and a memory bandwidth\ncontrol mechanism that can protect such memory performance critical sections of\nsoft real-time applications. BWLOCK provides simple lock like APIs to declare\nmemory-performance critical sections. If an application enters a\nmemory-performance critical section, the memory bandwidth control system then\ndynamically limit other cores' memory access rates to protect memory\nperformance of the application until the critical section finishes.\n  From case studies with real-world soft real-time applications, we found (1)\nsuch memory-performance critical sections do exist and are often easy to\nidentify; and (2) applying BWLOCK for memory critical sections significantly\nimprove performance of the soft real-time applications at a small or no cost in\nthroughput of non real-time applications.\n", "versions": [{"version": "v1", "created": "Sun, 8 Feb 2015 19:09:36 GMT"}], "update_date": "2015-02-10", "authors_parsed": [["Yun", "Heechul", ""], ["Gondi", "Santosh", ""], ["Biswas", "Siddhartha", ""]]}]