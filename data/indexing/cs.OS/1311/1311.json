[{"id": "1311.2362", "submitter": "Alwen Tiu", "authors": "Hendra Gunadi and Alwen Tiu", "title": "Efficient Runtime Monitoring with Metric Temporal Logic: A Case Study in\n  the Android Operating System", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.LO cs.CR cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present a design and an implementation of a security policy specification\nlanguage based on metric linear-time temporal logic (MTL). MTL features\ntemporal operators that are indexed by time intervals, allowing one to specify\ntiming-dependent security policies. The design of the language is driven by the\nproblem of runtime monitoring of applications in mobile devices. A main case\nthe study is the privilege escalation attack in the Android operating system,\nwhere an app gains access to certain resource or functionalities that are not\nexplicitly granted to it by the user, through indirect control flow. To capture\nthese attacks, we extend MTL with recursive definitions, that are used to\nexpress call chains betwen apps. We then show how the metric operators of MTL,\nin combination with recursive definitions, can be used to specify policies to\ndetect privilege escalation, under various fine grained constraints. We present\na new algorithm, extending that of linear time temporal logic, for monitoring\nsafety policies written in our specification language. The monitor does not\nneed to store the entire history of events generated by the apps, something\nthat is crucial for practical implementations. We modified the Android OS\nkernel to allow us to insert our generated monitors modularly. We have tested\nthe modified OS on an actual device, and show that it is effective in detecting\npolicy violations.\n", "versions": [{"version": "v1", "created": "Mon, 11 Nov 2013 06:21:29 GMT"}], "update_date": "2013-11-12", "authors_parsed": [["Gunadi", "Hendra", ""], ["Tiu", "Alwen", ""]]}, {"id": "1311.3322", "submitter": "Thanh Do", "authors": "Thanh Do and Haryadi S. Gunawi", "title": "Impact of Limpware on HDFS: A Probabilistic Estimation", "comments": "9 pages, 6 figures, detailed probability calculation for SOCC 13\n  limplock paper", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  With the advent of cloud computing, thousands of machines are connected and\nmanaged collectively. This era is confronted with a new challenge: performance\nvariability, primarily caused by large-scale management issues such as hardware\nfailures, software bugs, and configuration mistakes. In our previous work we\nhighlighted one overlooked cause: limpware - hardware whose performance\ndegrades significantly compared to its specification. We showed that limpware\ncan cause severe impact in current scale-out systems. In this report, we\nquantify how often these scenarios happen in Hadoop Distributed File System.\n", "versions": [{"version": "v1", "created": "Wed, 13 Nov 2013 22:05:58 GMT"}], "update_date": "2013-11-15", "authors_parsed": [["Do", "Thanh", ""], ["Gunawi", "Haryadi S.", ""]]}, {"id": "1311.3686", "submitter": "Brijender Kahanwal Dr.", "authors": "Brijender Kahanwal, Dr. Tejinder Pal Singh and Dr. R. K. Tuteja", "title": "Performance Evaluation of Java File Security System (JFSS)", "comments": "7 pages, 5 figures, journal", "journal-ref": "Pelagia Research Library Advances in Applied Science Research,\n  Vol. 2(6), pp. 254-260, 2011", "doi": null, "report-no": null, "categories": "cs.OS cs.CR cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Security is a critical issue of the modern file and storage systems, it is\nimperative to protect the stored data from unauthorized access. We have\ndeveloped a file security system named as Java File Security System (JFSS) [1]\nthat guarantee the security to files on the demand of all users. It has been\ndeveloped on Java platform. Java has been used as programming language in order\nto provide portability, but it enforces some performance limitations. It is\ndeveloped in FUSE (File System in User space) [3]. Many efforts have been done\nover the years for developing file systems in user space (FUSE). All have their\nown merits and demerits. In this paper we have evaluated the performance of\nJava File Security System (JFSS). Over and over again, the increased security\ncomes at the expense of user convenience, performance or compatibility with\nother systems. JFSS system performance evaluations show that encryption\noverheads are modest as compared to security.\n", "versions": [{"version": "v1", "created": "Wed, 13 Nov 2013 10:53:02 GMT"}], "update_date": "2014-03-25", "authors_parsed": [["Kahanwal", "Brijender", ""], ["Singh", "Dr. Tejinder Pal", ""], ["Tuteja", "Dr. R. K.", ""]]}]