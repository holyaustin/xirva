[{"id": "1310.0901", "submitter": "Jose Gracia", "authors": "Thomas M. Baumann, Jose Gracia", "title": "Cudagrind: A Valgrind Extension for CUDA", "comments": "10 pages, 2 figures, accepted for publication in ParCo 2013", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.SE cs.OS cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Valgrind, and specifically the included tool Memcheck, offers an easy and\nreliable way for checking the correctness of memory operations in programs.\nThis works in an unintrusive way where Valgrind translates the program into\nintermediate code and executes it on an emulated CPU. The heavy weight tool\nMemcheck uses this to keep a full shadow copy of the memory used by a program\nand tracking accesses to it. This allows the detection of memory leaks and\nchecking the validity of accesses.\n  Though suited for a wide variety of programs, this approach still fails when\naccelerator based programming models are involved. The code running on these\ndevices is separate from the code running on the host. Access to memory on the\ndevice and starting of kernels is being handled by an API provided by the\ndriver being used. Hence Valgrind is unable to understand and instrument\noperations being run on the device.\n  To circumvent this limitation a new set of wrapper functions have been\nintroduced. These wrap a subset of the CUDA Driver API function that is\nresponsible for (de-)allocation memory regions on the device and the respective\nmemory copy operations. This allows to check whether memory is fully allocated\nduring a transfer and, through the functionality provided by Valgrind, whether\nthe memory transfered to the device from the host is defined and addressable.\nThrough this technique it is possible to detect a number of common programming\nmistakes, which are very difficult to debug by other means. The combination of\nthese wrappers together with the Valgrind tool Memcheck is being called\nCudagrind.\n", "versions": [{"version": "v1", "created": "Thu, 3 Oct 2013 05:51:48 GMT"}], "update_date": "2013-10-04", "authors_parsed": [["Baumann", "Thomas M.", ""], ["Gracia", "Jose", ""]]}, {"id": "1310.1588", "submitter": "Sasa Paporovic", "authors": "Sasa Paporovic", "title": "Impacting the bioscience progress by backporting software for Bio-Linux", "comments": "10 pages,2 Figures, 1 Table and 1 notice", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.SE", "license": "http://creativecommons.org/licenses/by/3.0/", "abstract": "  In year 2006 Bio-Linux with the work of Tim Booth and team gives its rising\nand provide an operating system that was and still specialized in providing a\nbioinformatic specific software environment for the working needs in this\ncorner of bioscience. It is shown that Bio-Linux is affected by a 2 year\nrelease cycle and with this the final releases of Bio-Linux will not have the\nlatest bioinformatic software on board. The paper shows how to get around this\nhuge time gap and bring new software for Bio-Linux on board through a process\nthat is called backporting. A summary of within the work to this paper just\nbackported bioinformatic tools is given. A describtion of a workflow for\ncontinuously integration of the newest bioinformatic tools gives an outlook to\nfurther concrete planned developments and the influence of speeding up\nscientific progress.\n", "versions": [{"version": "v1", "created": "Sun, 6 Oct 2013 14:27:59 GMT"}], "update_date": "2013-10-08", "authors_parsed": [["Paporovic", "Sasa", ""]]}, {"id": "1310.2148", "submitter": "Gary McGilvary Mr", "authors": "Gary A. McGilvary, Josep Rius, \\'I\\~nigo Goiri, Francesc Solsona, Adam\n  Barker and Malcolm Atkinson", "title": "C2MS: Dynamic Monitoring and Management of Cloud Infrastructures", "comments": "Proceedings of the The 5th IEEE International Conference on Cloud\n  Computing Technology and Science (CloudCom 2013), 8 pages", "journal-ref": null, "doi": "10.1109/CloudCom.2013.45", "report-no": null, "categories": "cs.DC cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Server clustering is a common design principle employed by many organisations\nwho require high availability, scalability and easier management of their\ninfrastructure. Servers are typically clustered according to the service they\nprovide whether it be the application(s) installed, the role of the server or\nserver accessibility for example. In order to optimize performance, manage load\nand maintain availability, servers may migrate from one cluster group to\nanother making it difficult for server monitoring tools to continuously monitor\nthese dynamically changing groups. Server monitoring tools are usually\nstatically configured and with any change of group membership requires manual\nreconfiguration; an unreasonable task to undertake on large-scale cloud\ninfrastructures.\n  In this paper we present the Cloudlet Control and Management System (C2MS); a\nsystem for monitoring and controlling dynamic groups of physical or virtual\nservers within cloud infrastructures. The C2MS extends Ganglia - an open source\nscalable system performance monitoring tool - by allowing system administrators\nto define, monitor and modify server groups without the need for server\nreconfiguration. In turn administrators can easily monitor group and individual\nserver metrics on large-scale dynamic cloud infrastructures where roles of\nservers may change frequently. Furthermore, we complement group monitoring with\na control element allowing administrator-specified actions to be performed over\nservers within service groups as well as introduce further customized\nmonitoring metrics. This paper outlines the design, implementation and\nevaluation of the C2MS.\n", "versions": [{"version": "v1", "created": "Thu, 3 Oct 2013 22:49:06 GMT"}], "update_date": "2016-11-17", "authors_parsed": [["McGilvary", "Gary A.", ""], ["Rius", "Josep", ""], ["Goiri", "\u00cd\u00f1igo", ""], ["Solsona", "Francesc", ""], ["Barker", "Adam", ""], ["Atkinson", "Malcolm", ""]]}, {"id": "1310.6298", "submitter": "Ye Li", "authors": "Ye Li, Richard West, Eric Missimer", "title": "The Quest-V Separation Kernel for Mixed Criticality Systems", "comments": "6 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Multi- and many-core processors are becoming increasingly popular in embedded\nsystems. Many of these processors now feature hardware virtualization\ncapabilities, such as the ARM Cortex A15, and x86 processors with Intel VT-x or\nAMD-V support. Hardware virtualization offers opportunities to partition\nphysical resources, including processor cores, memory and I/O devices amongst\nguest virtual machines. Mixed criticality systems and services can then\nco-exist on the same platform in separate virtual machines. However,\ntraditional virtual machine systems are too expensive because of the costs of\ntrapping into hypervisors to multiplex and manage machine physical resources on\nbehalf of separate guests. For example, hypervisors are needed to schedule\nseparate VMs on physical processor cores. In this paper, we discuss the design\nof the Quest-V separation kernel, that partitions services of different\ncriticalities in separate virtual machines, or sandboxes. Each sandbox\nencapsulates a subset of machine physical resources that it manages without\nrequiring intervention of a hypervisor. Moreover, a hypervisor is not needed\nfor normal operation, except to bootstrap the system and establish\ncommunication channels between sandboxes.\n", "versions": [{"version": "v1", "created": "Wed, 23 Oct 2013 17:14:25 GMT"}], "update_date": "2013-10-24", "authors_parsed": [["Li", "Ye", ""], ["West", "Richard", ""], ["Missimer", "Eric", ""]]}, {"id": "1310.6301", "submitter": "Ye Li", "authors": "Ye Li, Eric Missimer, Richard West", "title": "Predictable Migration and Communication in the Quest-V Multikernel", "comments": "10 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Quest-V is a system we have been developing from the ground up, with\nobjectives focusing on safety, predictability and efficiency. It is designed to\nwork on emerging multicore processors with hardware virtualization support.\nQuest-V is implemented as a \"distributed system on a chip\" and comprises\nmultiple sandbox kernels. Sandbox kernels are isolated from one another in\nseparate regions of physical memory, having access to a subset of processing\ncores and I/O devices. This partitioning prevents system failures in one\nsandbox affecting the operation of other sandboxes. Shared memory channels\nmanaged by system monitors enable inter-sandbox communication.\n  The distributed nature of Quest-V means each sandbox has a separate physical\nclock, with all event timings being managed by per-core local timers. Each\nsandbox is responsible for its own scheduling and I/O management, without\nrequiring intervention of a hypervisor.\n  In this paper, we formulate bounds on inter-sandbox communication in the\nabsence of a global scheduler or global system clock. We also describe how\naddress space migration between sandboxes can be guaranteed without violating\nservice constraints. Experimental results on a working system show the\nconditions under which Quest-V performs real-time communication and migration.\n", "versions": [{"version": "v1", "created": "Wed, 23 Oct 2013 17:29:42 GMT"}], "update_date": "2013-10-24", "authors_parsed": [["Li", "Ye", ""], ["Missimer", "Eric", ""], ["West", "Richard", ""]]}, {"id": "1310.6349", "submitter": "Ye Li", "authors": "Richard West, Ye Li, Eric Missimer", "title": "Quest-V: A Virtualized Multikernel for Safety-Critical Real-Time Systems", "comments": "12 pages. arXiv admin note: text overlap with arXiv:1112.5136,\n  arXiv:1310.6301", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Modern processors are increasingly featuring multiple cores, as well as\nsupport for hardware virtualization. While these processors are common in\ndesktop and server-class computing, they are less prevalent in embedded and\nreal-time systems. However, smartphones and tablet PCs are starting to feature\nmulticore processors with hardware virtualization. If the trend continues, it\nis possible that future real-time systems will feature more sophisticated\nprocessor architectures. Future automotive or avionics systems, for example,\ncould replace complex networks of uniprocessors with consolidated services on a\nsmaller number of multicore processors. Likewise, virtualization could be used\nto isolate services and increase the availability of a system even when\nfailures occur.\n  This paper investigates whether advances in modern processor technologies\noffer new opportunities to rethink the design of real-time operating systems.\nWe describe some of the design principles behind Quest-V, which is being used\nas an exploratory vehicle for real-time system design on multicore processors\nwith hardware virtualization capabilities. While not all embedded systems\nshould assume such features, a case can be made that more robust,\nsafety-critical systems can be built to use hardware virtualization without\nincurring significant overheads.\n", "versions": [{"version": "v1", "created": "Wed, 23 Oct 2013 17:35:03 GMT"}], "update_date": "2013-10-25", "authors_parsed": [["West", "Richard", ""], ["Li", "Ye", ""], ["Missimer", "Eric", ""]]}]