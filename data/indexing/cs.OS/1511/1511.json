[{"id": "1511.02498", "submitter": "Amar Ranjan Dash", "authors": "Amar Ranjan Dash, Sandipta Kumar Sahu, Sanjay Kumar Samantra and\n  Sradhanjali Sabat", "title": "Characteristic specific prioritized dynamic average burst round robin\n  scheduling for uniprocessor and multiprocessor environment", "comments": "20 Pages, 10 Figures, 18 Tables, 20 References, International Journal\n  of Computer Science, Engineering and Applications (IJCSEA) Vol.5, No.4/5,\n  October 2015", "journal-ref": null, "doi": "10.5121/ijcsea.2015.5501", "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  CPU scheduling is one of the most crucial operations performed by operating\nsystems. Different conventional algorithms like FCFS, SJF, Priority, and RR\n(Round Robin) are available for CPU Scheduling. The effectiveness of Priority\nand Round Robin scheduling algorithm completely depends on selection of\npriority features of processes and on the choice of time quantum. In this paper\na new CPU scheduling algorithm has been proposed, named as CSPDABRR\n(Characteristic specific Prioritized Dynamic Average Burst Round Robin), that\nuses seven priority features for calculating priority of processes and uses\ndynamic time quantum instead of static time quantum used in RR. The performance\nof the proposed algorithm is experimentally compared with traditional RR and\nPriority scheduling algorithm in both uni-processor and multi-processor\nenvironment. The results of our approach presented in this paper demonstrate\nimproved performance in terms of average waiting time, average turnaround time,\nand optimal priority feature.\n", "versions": [{"version": "v1", "created": "Sun, 8 Nov 2015 15:44:59 GMT"}], "update_date": "2015-11-10", "authors_parsed": [["Dash", "Amar Ranjan", ""], ["Sahu", "Sandipta Kumar", ""], ["Samantra", "Sanjay Kumar", ""], ["Sabat", "Sradhanjali", ""]]}, {"id": "1511.02528", "submitter": "EPTCS", "authors": "Rob van Glabbeek, Jan Friso Groote, Peter H\\\"ofner", "title": "Proceedings Workshop on Models for Formal Analysis of Real Systems", "comments": null, "journal-ref": "EPTCS 196, 2015", "doi": "10.4204/EPTCS.196", "report-no": null, "categories": "cs.LO cs.CR cs.OS cs.SY", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This volume contains the proceedings of MARS 2015, the first workshop on\nModels for Formal Analysis of Real Systems, held on November 23, 2015 in Suva,\nFiji, as an affiliated workshop of LPAR 2015, the 20th International Conference\non Logic for Programming, Artificial Intelligence and Reasoning.\n  The workshop emphasises modelling over verification. It aims at discussing\nthe lessons learned from making formal methods for the verification and\nanalysis of realistic systems. Examples are:\n  (1) Which formalism is chosen, and why?\n  (2) Which abstractions have to be made and why?\n  (3) How are important characteristics of the system modelled?\n  (4) Were there any complications while modelling the system?\n  (5) Which measures were taken to guarantee the accuracy of the model?\n  We invited papers that present full models of real systems, which may lay the\nbasis for future comparison and analysis. An aim of the workshop is to present\ndifferent modelling approaches and discuss pros and cons for each of them.\nAlternative formal descriptions of the systems presented at this workshop are\nencouraged, which should foster the development of improved specification\nformalisms.\n", "versions": [{"version": "v1", "created": "Sun, 8 Nov 2015 21:12:17 GMT"}], "update_date": "2015-11-10", "authors_parsed": [["van Glabbeek", "Rob", ""], ["Groote", "Jan Friso", ""], ["H\u00f6fner", "Peter", ""]]}, {"id": "1511.04169", "submitter": "EPTCS", "authors": "Sidney Amani, Toby Murray (NICTA and University of New South Wales,\n  Australia)", "title": "Specifying a Realistic File System", "comments": "In Proceedings MARS 2015, arXiv:1511.02528", "journal-ref": "EPTCS 196, 2015, pp. 1-9", "doi": "10.4204/EPTCS.196.1", "report-no": null, "categories": "cs.LO cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present the most interesting elements of the correctness specification of\nBilbyFs, a performant Linux flash file system. The BilbyFs specification\nsupports asynchronous writes, a feature that has been overlooked by several\nfile system verification projects, and has been used to verify the correctness\nof BilbyFs's fsync() C implementation. It makes use of nondeterminism to be\nconcise and is shallowly-embedded in higher-order logic.\n", "versions": [{"version": "v1", "created": "Fri, 13 Nov 2015 06:27:39 GMT"}], "update_date": "2015-11-16", "authors_parsed": [["Amani", "Sidney", "", "NICTA and University of New South Wales,\n  Australia"], ["Murray", "Toby", "", "NICTA and University of New South Wales,\n  Australia"]]}, {"id": "1511.04170", "submitter": "EPTCS", "authors": "June Andronick (NICTA and UNSW), Corey Lewis (NICTA), Carroll Morgan\n  (NICTA and UNSW)", "title": "Controlled Owicki-Gries Concurrency: Reasoning about the Preemptible\n  eChronos Embedded Operating System", "comments": "In Proceedings MARS 2015, arXiv:1511.02528", "journal-ref": "EPTCS 196, 2015, pp. 10-24", "doi": "10.4204/EPTCS.196.2", "report-no": null, "categories": "cs.LO cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We introduce a controlled concurrency framework, derived from the\nOwicki-Gries method, for describing a hardware interface in detail sufficient\nto support the modelling and verification of small, embedded operating systems\n(OS's) whose run-time responsiveness is paramount. Such real-time systems run\nwith interrupts mostly enabled, including during scheduling. That differs from\nmany other successfully modelled and verified OS's that typically reduce the\ncomplexity of concurrency by running on uniprocessor platforms and by switching\ninterrupts off as much as possible. Our framework builds on the traditional\nOwicki-Gries method, for its fine-grained concurrency is needed for\nhigh-performance system code. We adapt it to support explicit concurrency\ncontrol, by providing a simple, faithful representation of the hardware\ninterface that allows software to control the degree of interleaving between\nuser code, OS code, interrupt handlers and a scheduler that controls context\nswitching. We then apply this framework to model the interleaving behavior of\nthe eChronos OS, a preemptible real-time OS for embedded micro-controllers. We\ndiscuss the accuracy and usability of our approach when instantiated to model\nthe eChronos OS. Both our framework and the eChronos model are formalised in\nthe Isabelle/HOL theorem prover, taking advantage of the high level of\nautomation in modern reasoning tools.\n", "versions": [{"version": "v1", "created": "Fri, 13 Nov 2015 06:27:48 GMT"}], "update_date": "2015-11-16", "authors_parsed": [["Andronick", "June", "", "NICTA and UNSW"], ["Lewis", "Corey", "", "NICTA"], ["Morgan", "Carroll", "", "NICTA and UNSW"]]}]