[{"id": "2010.07833", "submitter": "Jonas H\\\"ochst", "authors": "Jonas H\\\"ochst, Alvar Penning, Patrick Lampe, Bernd Freisleben", "title": "PIMOD: A Tool for Configuring Single-Board Computer Operating System\n  Images", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.CY", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Computer systems used in the field of humanitarian technology are often based\non general-purpose single-board computers, such as Raspberry Pis. While these\nsystems offer great flexibility for developers and users, configuration and\ndeployment either introduces overhead by executing scripts on multiple devices\nor requires deeper technical understanding when building operating system\nimages for such small computers from scratch. In this paper, we present PIMOD,\na software tool for configuring operating system images for single-board\ncomputer systems. We propose a simple yet comprehensive configuration language.\nIn a configuration profile, called Pifile, a small set of commands is used to\ndescribe the configuration of an operating system image. Virtualization\ntechniques are used during the execution of the profile in order to be\ndistribution and platform independent. Commands can be issued in the guest\noperating system, providing access to the distribution specific tools, e.g., to\nconfigure hardware parameters. The implementation of PIMOD is made public under\na free and open source license. PIMOD is evaluated in terms of user benefits,\nperformance compared to on-system configuration, and applicability across\ndifferent hardware platforms and operating systems.\n", "versions": [{"version": "v1", "created": "Thu, 15 Oct 2020 15:52:25 GMT"}], "update_date": "2020-10-16", "authors_parsed": [["H\u00f6chst", "Jonas", ""], ["Penning", "Alvar", ""], ["Lampe", "Patrick", ""], ["Freisleben", "Bernd", ""]]}, {"id": "2010.08741", "submitter": "Yanliang Zou", "authors": "Yanliang Zou, Tongliang Deng, Jian Zhang, Chen Chen, Shu Yin", "title": "Stage Lookup: Accelerating Path Lookup using Directory Shortcuts", "comments": "8 pages, 9 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The lookup procedure in Linux costs a significant portion of file accessing\ntime as the virtual file system (VFS) traverses the file path components one\nafter another. The lookup procedure becomes more time consuming when\napplications frequently access files, especially those with small sizes. We\npropose Stage Lookup, which dynamically caches popular directories to speed up\nlookup procedures and further reduce file accessing latency. The core of Stage\nLookup is to cache popular dentries as shortcuts, so that path walks do not\nbother to traverse directory trees from the root. Furthermore, Stage Lookup\nenriches backward path walks as it treats the directory tree in a VFS as an\nundirected map. We implement a Stage Lookup prototype and integrate it into\nLinux Kernel v3.14. Our extensive performance evaluation studies show that\nStage Lookup offers up to 46.9% performance gain compared to ordinary path\nlookup schemes. Furthermore, Stage Lookup shows smaller performance overheads\nin rename and chmod operations compared to the original method of the kernel.\n", "versions": [{"version": "v1", "created": "Sat, 17 Oct 2020 08:34:08 GMT"}], "update_date": "2020-10-20", "authors_parsed": [["Zou", "Yanliang", ""], ["Deng", "Tongliang", ""], ["Zhang", "Jian", ""], ["Chen", "Chen", ""], ["Yin", "Shu", ""]]}, {"id": "2010.12400", "submitter": "Yajin Zhou", "authors": "Yuan Chen, Jiaqi Li, Guorui Xu, Yajin Zhou, Zhi Wang, Cong Wang, Kui\n  Ren", "title": "Towards Efficiently Establishing Mutual Distrust Between Host\n  Application and Enclave for SGX", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CR cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Since its debut, SGX has been used in many applications, e.g., secure data\nprocessing. However, previous systems usually assume a trusted enclave and\nignore the security issues caused by an untrusted enclave. For instance, a\nvulnerable (or even malicious) third-party enclave can be exploited to attack\nthe host application and the rest of the system. In this paper, we propose an\nefficient mechanism to confine an untrusted enclave's behaviors. The threats of\nan untrusted enclave come from the enclave-host asymmetries. They can be abused\nto access arbitrary memory regions of its host application, jump to any code\nlocation after leaving the enclave and forge the stack register to manipulate\nthe saved context. Our solution breaks such asymmetries and establishes mutual\ndistrust between the host application and the enclave. It leverages Intel MPK\nfor efficient memory isolation and the x86 single-step debugging mechanism to\ncapture the event when an enclave is existing. It then performs the integrity\ncheck for the jump target and the stack pointer. We have solved two practical\nchallenges and implemented a prototype system. The evaluation with multiple\nmicro-benchmarks and representative real-world applications demonstrated the\nefficiency of our system, with less than 4% performance overhead.\n", "versions": [{"version": "v1", "created": "Fri, 23 Oct 2020 13:43:45 GMT"}], "update_date": "2020-10-26", "authors_parsed": [["Chen", "Yuan", ""], ["Li", "Jiaqi", ""], ["Xu", "Guorui", ""], ["Zhou", "Yajin", ""], ["Wang", "Zhi", ""], ["Wang", "Cong", ""], ["Ren", "Kui", ""]]}, {"id": "2010.13594", "submitter": "Ryousei Takano", "authors": "Ryousei Takano and Kuniyasu Suzaki", "title": "Disaggregated Accelerator Management System for Cloud Data Centers", "comments": "To appear in IEICE Transactions on Information and Systems, 2020", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  A conventional data center that consists of monolithic-servers is confronted\nwith limitations including lack of operational flexibility, low resource\nutilization, low maintainability, etc. Resource disaggregation is a promising\nsolution to address the above issues. We propose a concept of disaggregated\ncloud data center architecture called Flow-in-Cloud (FiC) that enables an\nexisting cluster computer system to expand an accelerator pool through a\nhigh-speed network. FlowOS-RM manages the entire pool resources, and deploys a\nuser job on a dynamically constructed slice according to a user request. This\nslice consists of compute nodes and accelerators where each accelerator is\nattached to the corresponding compute node. This paper demonstrates the\nfeasibility of FiC in a proof of concept experiment running a distributed deep\nlearning application on the prototype system. The result successfully warrants\nthe applicability of the proposed system.\n", "versions": [{"version": "v1", "created": "Mon, 26 Oct 2020 14:07:06 GMT"}], "update_date": "2020-10-27", "authors_parsed": [["Takano", "Ryousei", ""], ["Suzaki", "Kuniyasu", ""]]}, {"id": "2010.15572", "submitter": "Taichi Miya", "authors": "Taichi Miya, Kohta Ohshima, Yoshiaki Kitaguchi and Katsunori Yamaoka", "title": "Experimental Analysis of Communication Relaying Delay in Low-Energy\n  Ad-hoc Networks", "comments": "6 pages, 19 figures, IEEE Consumer Communications & Networking\n  Conference 2021", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.NI cs.OS cs.PF", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  In recent years, more and more applications use ad-hoc networks for local M2M\ncommunications, but in some cases such as when using WSNs, the software\nprocessing delay induced by packets relaying may not be negligible. In this\npaper, we planned and carried out a delay measurement experiment using\nRaspberry Pi Zero W. The results demonstrated that, in low-energy ad-hoc\nnetworks, processing delay of the application is always too large to ignore; it\nis at least ten times greater than the kernel routing and corresponds to 30% of\nthe transmission delay. Furthermore, if the task is CPU-intensive, such as\npacket encryption, the processing delay can be greater than the transmission\ndelay and its behavior is represented by a simple linear model. Our findings\nindicate that the key factor for achieving QoS in ad-hoc networks is an\nappropriate node-to-node load balancing that takes into account the CPU\nperformance and the amount of traffic passing through each node.\n", "versions": [{"version": "v1", "created": "Thu, 29 Oct 2020 13:44:58 GMT"}, {"version": "v2", "created": "Thu, 10 Dec 2020 09:37:11 GMT"}], "update_date": "2020-12-11", "authors_parsed": [["Miya", "Taichi", ""], ["Ohshima", "Kohta", ""], ["Kitaguchi", "Yoshiaki", ""], ["Yamaoka", "Katsunori", ""]]}]