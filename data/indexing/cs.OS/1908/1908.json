[{"id": "1908.01167", "submitter": "Amar Ranjan Dash", "authors": "Amar Ranjan Dash, Sandipta Kumar Sahu, B Kewal", "title": "An Optimized Disk Scheduling Algorithm With Bad-Sector Management", "comments": "21 pages, 21 figures, 3 table, International Journal of Computer\n  Science, Engineering and Applications (IJCSEA)", "journal-ref": "International Journal of Computer Science, Engineering and\n  Applications (IJCSEA), AIRCC, 2019, Vol. 9(3), pp 1-21, DOI\n  :10.5012/ijcsea.2019.9301", "doi": "10.5012/ijcsea.2019.9301", "report-no": null, "categories": "cs.OS cs.DS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In high performance computing, researchers try to optimize the CPU Scheduling\nalgorithms, for faster and efficient working of computers. But a process needs\nboth CPU bound and I/O bound for completion of its execution. With\nmodernization of computers the speed of processor, hard-disk, and I/O devices\nincreases gradually. Still the data access speed of hard-disk is much less than\nthe speed of the processor. So when processor receives a data from secondary\nmemory it executes immediately and again it have to wait for receiving another\ndata. So the slowness of the hard-disk becomes a bottleneck in the performance\nof processor. Researchers try to develop and optimize the traditional disk\nscheduling algorithms for faster data transfer to and from secondary data\nstorage devices. In this paper we try to evolve an optimized scheduling\nalgorithm by reducing the seek time, the rotational latency, and the data\ntransfer time in runtime. This algorithm has the feature to manage the\nbad-sectors of the hard-disk. It also attempts to reduce power consumption and\nheat reduction by minimizing bad sector reading time.\n", "versions": [{"version": "v1", "created": "Sat, 3 Aug 2019 13:16:51 GMT"}], "update_date": "2019-08-06", "authors_parsed": [["Dash", "Amar Ranjan", ""], ["Sahu", "Sandipta Kumar", ""], ["Kewal", "B", ""]]}, {"id": "1908.03638", "submitter": "Wei Zhou", "authors": "Wei Zhou, Le Guan, Peng Liu, Yuqing Zhang", "title": "Good Motive but Bad Design: Why ARM MPU Has Become an Outcast in\n  Embedded Systems", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CR cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  As more and more embedded devices are connected to the Internet, leading to\nthe emergence of Internet-of-Things (IoT), previously less tested (and\ninsecure) devices are exposed to miscreants. To prevent them from being\ncompromised, the memory protection unit (MPU), which is readily available on\nmany devices, has the potential to become a free lunch for the defenders. To\nour surprise, the MPU is seldom used by real-world products. The reasons are\nmulti-fold. While there are non-technical reasons such as compatibility issues,\nmore importantly, we found that MPU brings virtually no security enhancement at\nthe expense of decreased performance and responsiveness. In this work, we\ninvestigate the MPU adoption in major real-time operating systems (RTOSs), in\nparticular, the FreeRTOS, and try to pinpoint the fundamental reasons to\nexplain why MPU is not favored. We hope our findings can inspire new remedial\nsolutions to change the situation. We also review the latest MPU design and\nprovide technical suggestions to build more secure embedded systems.\n", "versions": [{"version": "v1", "created": "Fri, 9 Aug 2019 21:33:33 GMT"}], "update_date": "2019-08-13", "authors_parsed": [["Zhou", "Wei", ""], ["Guan", "Le", ""], ["Liu", "Peng", ""], ["Zhang", "Yuqing", ""]]}, {"id": "1908.06211", "submitter": "Soham Sinha", "authors": "Soham Sinha and Richard West and Ahmad Golchin", "title": "PAStime: Progress-aware Scheduling for Time-critical Computing", "comments": "24 pages", "journal-ref": null, "doi": "10.4230/LIPIcs.ECRTS.2020.3", "report-no": null, "categories": "cs.OS", "license": "http://creativecommons.org/licenses/by-nc-sa/4.0/", "abstract": "  Over-estimation of worst-case execution times (WCETs) of real-time tasks\nleads to poor resource utilization. In a mixed-criticality system (MCS), the\nover-provisioning of CPU time to accommodate the WCETs of highly critical tasks\nmay lead to degraded service for less critical tasks. In this paper, we present\nPAStime, a novel approach to monitor and adapt the runtime progress of highly\ntime-critical applications, to allow for improved service to lower criticality\ntasks. In PAStime, CPU time is allocated to time-critical tasks according to\nthe delays they experience as they progress through their control flow graphs.\nThis ensures that as much time as possible is made available to improve the\nQuality-of-Service of less critical tasks, while high-criticality tasks are\ncompensated after their delays.\n  In this paper, we integrate PAStime with Adaptive Mixed-criticality (AMC)\nscheduling. The LO-mode budget of a high-criticality task is adjusted according\nto the delay observed at execution checkpoints. This is the first\nimplementation of AMC in the scheduling framework Using LITMUS-RT, which is\nextended with our PAStime runtime policy and tested with real-time Linux\napplications such as object classification and detection. We observe in our\nexperimental evaluation that AMC-PAStime significantly improves the utilization\nof the low-criticality tasks while guaranteeing service to high-criticality\ntasks.\n", "versions": [{"version": "v1", "created": "Sat, 17 Aug 2019 00:24:07 GMT"}, {"version": "v2", "created": "Mon, 31 May 2021 15:53:06 GMT"}], "update_date": "2021-06-01", "authors_parsed": [["Sinha", "Soham", ""], ["West", "Richard", ""], ["Golchin", "Ahmad", ""]]}, {"id": "1908.06807", "submitter": "Ahmad Golchin", "authors": "Ahmad Golchin, Soham Sinha, Richard West", "title": "Boomerang: Real-Time I/O Meets Legacy Systems", "comments": "This paper is now accepted for publication in Proceedings of the 26th\n  IEEE Real-Time and Embedded Technology and Applications Symposium (RTAS),\n  Sydney, Australia, April 21-24, 2020", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper presents Boomerang, an I/O system that integrates a legacy\nnon-real-time OS with one that is customized for timing-sensitive tasks. A\nrelatively small RTOS benefits from the pre-existing libraries, drivers and\nservices of the legacy system. Additionally, timing-critical tasks are isolated\nfrom less critical tasks by securely partitioning machine resources among the\nseparate OSes. Boomerang guarantees end-to-end processing delays on input data\nthat requires outputs to be generated within specific time bounds.\n  We show how to construct composable task pipelines in Boomerang that combine\nfunctionality spanning a custom RTOS and a legacy Linux system. By dedicating\ntime-critical I/O to the RTOS, we ensure that complementary services provided\nby Linux are sufficiently predictable to meet end-to-end service guarantees.\nWhile Boomerang benefits from spatial isolation, it also outperforms a\nstandalone Linux system using deadline-based CPU reservations for pipeline\ntasks. We also show how Boomerang outperforms a virtualized system called ACRN,\ndesigned for automotive systems.\n", "versions": [{"version": "v1", "created": "Mon, 19 Aug 2019 13:55:44 GMT"}, {"version": "v2", "created": "Mon, 23 Mar 2020 20:52:02 GMT"}], "update_date": "2020-03-25", "authors_parsed": [["Golchin", "Ahmad", ""], ["Sinha", "Soham", ""], ["West", "Richard", ""]]}, {"id": "1908.07159", "submitter": "Shijun Zhao", "authors": "Dongxu Ji, Qianying Zhang, Shijun Zhao, Zhiping Shi and Yong Guan", "title": "MicroTEE: Designing TEE OS Based on the Microkernel Architecture", "comments": "8 pages, 8 figures", "journal-ref": null, "doi": "10.1109/TrustCom/BigDataSE.2019.00014", "report-no": null, "categories": "cs.CR cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  ARM TrustZone technology is widely used to provide Trusted Execution\nEnvironments (TEE) for mobile devices. However, most TEE OSes are implemented\nas monolithic kernels. In such designs, device drivers, kernel services and\nkernel modules all run in the kernel, which results in large size of the\nkernel. It is difficult to guarantee that all components of the kernel have no\nsecurity vulnerabilities in the monolithic kernel architecture, such as the\ninteger overflow vulnerability in Qualcomm QSEE TrustZone and the TZDriver\nvulnerability in HUAWEI Hisilicon TEE architecture. This paper presents\nMicroTEE, a TEE OS based on the microkernel architecture. In MicroTEE, the\nmicrokernel provides strong isolation for TEE OS's basic services, such as\ncrypto service and platform key management service. The kernel is only\nresponsible for providing core services such as address space management,\nthread management, and inter-process communication. Other fundamental services,\nsuch as crypto service and platform key management service are implemented as\napplications at the user layer. Crypto Services and Key Management are used to\nprovide Trusted Applications (TAs) with sensitive information encryption, data\nsigning, and platform attestation functions. Our design avoids the compromise\nof the whole TEE OS if only one kernel service is vulnerable. A monitor has\nalso been added to perform the switch between the secure world and the normal\nworld. Finally, we implemented a MicroTEE prototype on the Freescale i.MX6Q\nSabre Lite development board and tested its performance. Evaluation results\nshow that the performance of cryptographic operations in MicroTEE is better\nthan it in Linux when the size of data is small.\n", "versions": [{"version": "v1", "created": "Tue, 20 Aug 2019 04:22:58 GMT"}], "update_date": "2019-08-22", "authors_parsed": [["Ji", "Dongxu", ""], ["Zhang", "Qianying", ""], ["Zhao", "Shijun", ""], ["Shi", "Zhiping", ""], ["Guan", "Yong", ""]]}, {"id": "1908.08707", "submitter": "Reto Achermann", "authors": "Reto Achermann, Nora Hossle, Lukas Humbel, Daniel Schwyn, David Cock,\n  Timothy Roscoe", "title": "A Least-Privilege Memory Protection Model for Modern Hardware", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present a new least-privilege-based model of addressing on which to base\nmemory management functionality in an OS for modern computers like phones or\nserver-based accelerators. Existing software assumptions do not account for\nheterogeneous cores with different views of the address space, leading to the\nrelated problems of numerous security bugs in memory management code (for\nexample programming IOMMUs), and an inability of mainstream OSes to securely\nmanage the complete set of hardware resources on, say, a phone System-on-Chip.\n  Our new work is based on a recent formal model of address translation\nhardware which views the machine as a configurable network of address spaces.\nWe refine this to capture existing address translation hardware from modern\nSoCs and accelerators at a sufficiently fine granularity to model minimal\nrights both to access memory and configure translation hardware. We then build\nan executable specification in Haskell, which expresses the model and metadata\nstructures in terms of partitioned capabilities. Finally, we show a fully\nfunctional implementation of the model in C created by extending the capability\nsystem of the Barrelfish research OS.\n  Our evaluation shows that our unoptimized implementation has comparable (and\nin some cases) better performance than the Linux virtual memory system, despite\nboth capturing all the functionality of modern hardware addressing and enabling\nleast-privilege, decentralized authority to access physical memory and devices.\n", "versions": [{"version": "v1", "created": "Fri, 23 Aug 2019 08:00:38 GMT"}], "update_date": "2019-08-26", "authors_parsed": [["Achermann", "Reto", ""], ["Hossle", "Nora", ""], ["Humbel", "Lukas", ""], ["Schwyn", "Daniel", ""], ["Cock", "David", ""], ["Roscoe", "Timothy", ""]]}, {"id": "1908.09922", "submitter": "Rajat Kateja", "authors": "Rajat Kateja, Nathan Beckmann, Gregory R. Ganger", "title": "Tvarak: Software-managed hardware offload for DAX NVM storage redundancy", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.AR cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Tvarak efficiently implements system-level redundancy for direct-access (DAX)\nNVM storage. Production storage systems complement device-level ECC (which\ncovers media errors) with system-checksums and cross-device parity. This\nsystem-level redundancy enables detection of and recovery from data corruption\ndue to device firmware bugs (e.g., reading data from the wrong physical\nlocation). Direct access to NVM penalizes software-only implementations of\nsystem-level redundancy, forcing a choice between lack of data protection or\nsignificant performance penalties. Offloading the update and verification of\nsystem-level redundancy to Tvarak, a hardware controller co-located with the\nlast-level cache, enables efficient protection of data from such bugs in memory\ncontroller and NVM DIMM firmware. Simulation-based evaluation with seven\ndata-intensive applications shows Tvarak's performance and energy efficiency.\nFor example, Tvarak reduces Redis set-only performance by only 3%, compared to\n50% reduction for a state-of-the-art software-only approach.\n", "versions": [{"version": "v1", "created": "Mon, 26 Aug 2019 21:04:37 GMT"}], "update_date": "2019-08-28", "authors_parsed": [["Kateja", "Rajat", ""], ["Beckmann", "Nathan", ""], ["Ganger", "Gregory R.", ""]]}, {"id": "1908.10740", "submitter": "Youmin Chen", "authors": "Youmin Chen, Youyou Lu, Bohong Zhu, Jiwu Shu", "title": "Kernel/User-level Collaborative Persistent Memory File System with\n  Efficiency and Protection", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Emerging high performance non-volatile memories recall the importance of\nefficient file system design. To avoid the virtual file system (VFS) and\nsyscall overhead as in these kernel-based file systems, recent works deploy\nfile systems directly in user level. Unfortunately, a userlevel file system can\neasily be corrupted by a buggy program with misused pointers, and is hard to\nscale on multi-core platforms which incorporates a centralized coordination\nservice. In this paper, we propose KucoFS, a Kernel and user-level\ncollaborative file system. It consists of two parts: a user-level library with\ndirect-access interfaces, and a kernel thread, which performs metadata updates\nand enforces write protection by toggling the permission bits in the page\ntable. Hence, KucoFS achieves both direct-access of user-level designs and\nfine-grained write protection of kernel-level ones. We further explore its\nscalability to multicores: For metadata scalability, KucoFS rebalances the\npathname resolution overhead between the kernel and userspace, by adopting the\nindex offloading technique. For data access efficiency, it coordinates the data\nallocation between kernel and userspace, and uses range-lock write and\nlock-free read to improve concurrency. Experiments on Optane DC persistent\nmemory show that KucoFS significantly outperforms existing file systems and\nshows better scalability.\n", "versions": [{"version": "v1", "created": "Wed, 28 Aug 2019 14:15:21 GMT"}], "update_date": "2019-08-29", "authors_parsed": [["Chen", "Youmin", ""], ["Lu", "Youyou", ""], ["Zhu", "Bohong", ""], ["Shu", "Jiwu", ""]]}, {"id": "1908.11143", "submitter": "Huanzhou Zhu", "authors": "Christian Priebe, Divya Muthukumaran, Joshua Lind, Huanzhou Zhu,\n  Shujie Cui, Vasily A. Sartakov, Peter Pietzuch", "title": "SGX-LKL: Securing the Host OS Interface for Trusted Execution", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.CR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Hardware support for trusted execution in modern CPUs enables tenants to\nshield their data processing workloads in otherwise untrusted cloud\nenvironments. Runtime systems for the trusted execution must rely on an\ninterface to the untrusted host OS to use external resources such as storage,\nnetwork, and other functions. Attackers may exploit this interface to leak data\nor corrupt the computation.\n  We describe SGX-LKL, a system for running Linux binaries inside of Intel SGX\nenclaves that only exposes a minimal, protected and oblivious host interface:\nthe interface is (i) minimal because SGX-LKL uses a complete library OS inside\nthe enclave, including file system and network stacks, which requires a host\ninterface with only 7 calls; (ii) protected because SGX-LKL transparently\nencrypts and integrity-protects all data passed via low-level I/O operations;\nand (iii) oblivious because SGX-LKL performs host operations independently of\nthe application workload. For oblivious disk I/O, SGX-LKL uses an encrypted\next4 file system with shuffled disk blocks. We show that SGX-LKL protects\nTensorFlow training with a 21% overhead.\n", "versions": [{"version": "v1", "created": "Thu, 29 Aug 2019 10:25:37 GMT"}, {"version": "v2", "created": "Thu, 10 Oct 2019 21:03:13 GMT"}, {"version": "v3", "created": "Mon, 20 Jan 2020 12:10:51 GMT"}], "update_date": "2020-01-22", "authors_parsed": [["Priebe", "Christian", ""], ["Muthukumaran", "Divya", ""], ["Lind", "Joshua", ""], ["Zhu", "Huanzhou", ""], ["Cui", "Shujie", ""], ["Sartakov", "Vasily A.", ""], ["Pietzuch", "Peter", ""]]}, {"id": "1908.11648", "submitter": "Shubhendra Singhal Mr.", "authors": "Shubhendra Pal Singhal, M. Sridevi, N Sathya Narayanan, M J Shankar\n  Raman", "title": "Porting of eChronos RTOS on RISC-V Architecture", "comments": "11 pages, 3 figures, Accepted for Publication for Springer LNCS\n  Germany", "journal-ref": null, "doi": null, "report-no": "Submission Id - 205", "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  eChronos is a formally verified Real Time Operating System(RTOS) designed for\nembedded micro-controllers. eChronos was targeted for tightly constrained\ndevices without memory management units. Currently, eChronos is available on\nproprietary designs like ARM, PowerPC and Intel architectures. eChronos is\nadopted in safety critical systems like aircraft control system and medical\nimplant devices. eChronos is one of the very few system software not been\nported to RISC-V. RISC-V is an open-source Instruction Set Architecture (ISA)\nthat enables new era of processor development. Many standard Operating Systems,\nsoftware tool chain have migrated to the RISC-V architecture. According to the\nlatest trends, RISC-V is replacing many proprietary chips. As a secure RTOS, it\nis attractive to port on an open-source ISA. SHAKTI and PicoRV32 are some of\nthe proven open-source RISC-V designs available. Now having a secure RTOS on an\nopen-source hardware design, designed based on an open-source ISA makes it more\ninteresting. In addition to this, the current architectures supported by\neChronos are all proprietary designs, and porting eChronos to the RISC-V\narchitecture increases the secure system development as a whole. This paper,\npresents an idea of porting eChronos on a chip which is open-source and\neffective, thus reducing the cost of embedded systems. Designing a open-source\nsystem that is completely open-source reduces the overall cost, increased the\nsecurity and can be critically reviewed. This paper explores the design and\narchitecture aspect involved in porting eChronos to RISC-V. The authors have\nsuccessfully ported eChronos to RISC-V architecture and verified it on spike.\nThe port of RISC-V to eChronos is made available open-source by authors. Along\nwith that, the safe removal of architectural dependencies and subsequent\nchanges in eChronos are also analyzed.\n", "versions": [{"version": "v1", "created": "Fri, 30 Aug 2019 10:53:00 GMT"}, {"version": "v2", "created": "Tue, 24 Dec 2019 10:31:55 GMT"}, {"version": "v3", "created": "Thu, 26 Dec 2019 05:58:49 GMT"}], "update_date": "2019-12-30", "authors_parsed": [["Singhal", "Shubhendra Pal", ""], ["Sridevi", "M.", ""], ["Narayanan", "N Sathya", ""], ["Raman", "M J Shankar", ""]]}]