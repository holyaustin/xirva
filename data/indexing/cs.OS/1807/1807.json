[{"id": "1807.03546", "submitter": "Oskar Schirmer", "authors": "Oskar Schirmer", "title": "Parallel Architecture Hardware and General Purpose Operating System\n  Co-design", "comments": "66 pages, 30 figures and tables", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Because most optimisations to achieve higher computational performance\neventually are limited, parallelism that scales is required. Parallelised\nhardware alone is not sufficient, but software that matches the architecture is\nrequired to gain best performance. For decades now, hardware design has been\nguided by the basic design of existing software, to avoid the higher cost to\nredesign the latter. In doing so, however, quite a variety of superior concepts\nis excluded a priori. Consequently, co-design of both hardware and software is\ncrucial where highest performance is the goal. For special purpose application,\nthis co-design is common practice. For general purpose application, however, a\nprecondition for usability of a computer system is an operating system which is\nboth comprehensive and dynamic. As no such operating system has ever been\ndesigned, a sketch for a comprehensive dynamic operating system is presented,\nbased on a straightforward hardware architecture to demonstrate how design\ndecisions regarding software and hardware do coexist and harmonise.\n", "versions": [{"version": "v1", "created": "Tue, 10 Jul 2018 09:24:33 GMT"}], "update_date": "2018-07-11", "authors_parsed": [["Schirmer", "Oskar", ""]]}, {"id": "1807.05308", "submitter": "Jeremy Kepner", "authors": "Jeremy Kepner, Ron Brightwell, Alan Edelman, Vijay Gadepally, Hayden\n  Jananthan, Michael Jones, Sam Madden, Peter Michaleas, Hamed Okhravi, Kevin\n  Pedretti, Albert Reuther, Thomas Sterling, Mike Stonebraker", "title": "TabulaROSA: Tabular Operating System Architecture for Massively Parallel\n  Heterogeneous Compute Engines", "comments": "8 pages, 6 figures, accepted at IEEE HPEC 2018", "journal-ref": null, "doi": "10.1109/HPEC.2018.8547577", "report-no": null, "categories": "cs.DC cs.DB cs.OS cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The rise in computing hardware choices is driving a reevaluation of operating\nsystems. The traditional role of an operating system controlling the execution\nof its own hardware is evolving toward a model whereby the controlling\nprocessor is distinct from the compute engines that are performing most of the\ncomputations. In this context, an operating system can be viewed as software\nthat brokers and tracks the resources of the compute engines and is akin to a\ndatabase management system. To explore the idea of using a database in an\noperating system role, this work defines key operating system functions in\nterms of rigorous mathematical semantics (associative array algebra) that are\ndirectly translatable into database operations. These operations possess a\nnumber of mathematical properties that are ideal for parallel operating systems\nby guaranteeing correctness over a wide range of parallel operations. The\nresulting operating system equations provide a mathematical specification for a\nTabular Operating System Architecture (TabulaROSA) that can be implemented on\nany platform. Simulations of forking in TabularROSA are performed using an\nassociative array implementation and compared to Linux on a 32,000+ core\nsupercomputer. Using over 262,000 forkers managing over 68,000,000,000\nprocesses, the simulations show that TabulaROSA has the potential to perform\noperating system functions on a massively parallel scale. The TabulaROSA\nsimulations show 20x higher performance as compared to Linux while managing\n2000x more processes in fully searchable tables.\n", "versions": [{"version": "v1", "created": "Sat, 14 Jul 2018 00:02:55 GMT"}], "update_date": "2018-12-17", "authors_parsed": [["Kepner", "Jeremy", ""], ["Brightwell", "Ron", ""], ["Edelman", "Alan", ""], ["Gadepally", "Vijay", ""], ["Jananthan", "Hayden", ""], ["Jones", "Michael", ""], ["Madden", "Sam", ""], ["Michaleas", "Peter", ""], ["Okhravi", "Hamed", ""], ["Pedretti", "Kevin", ""], ["Reuther", "Albert", ""], ["Sterling", "Thomas", ""], ["Stonebraker", "Mike", ""]]}, {"id": "1807.09696", "submitter": "Daniel Waddington", "authors": "Daniel G. Waddington", "title": "Fast & Flexible IO : A Compositional Approach to Storage Construction\n  for High-Performance Devices", "comments": "7 pages, 4 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.SE cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Building storage systems has remained the domain of systems experts for many\nyears. They are complex and difficult to implement. Extreme care is needed to\nensure necessary guarantees of performance and operational correctness.\nFurthermore, because of restrictions imposed by kernel-based designs, many\nlegacy implementations have traded software flexibility for performance. Their\nimplementation is restricted to compiled languages such as C and assembler, and\nreuse tends to be difficult or constrained. Nevertheless, storage systems are\nimplicitly well-suited to software reuse and compositional software\nconstruction. There are many logical functions, such as block allocation,\ncaching, partitioning, metadata management and so forth, that are common across\nmost variants of storage. In this paper, we present Comanche, an open-source\nproject that considers, as first-class concerns, both compositional design and\nreuse, and the need for high-performance.\n", "versions": [{"version": "v1", "created": "Wed, 25 Jul 2018 16:15:01 GMT"}], "update_date": "2018-07-26", "authors_parsed": [["Waddington", "Daniel G.", ""]]}]