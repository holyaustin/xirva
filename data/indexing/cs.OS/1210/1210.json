[{"id": "1210.1039", "submitter": "Frederic Le Mouel", "authors": "Julien Ponge (CITI), Fr\\'ed\\'eric Le Mou\\\"el (CITI)", "title": "JooFlux: Hijacking Java 7 InvokeDynamic To Support Live Code\n  Modifications", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Changing functional and non-functional software implementation at runtime is\nuseful and even sometimes critical both in development and production\nenvironments. JooFlux is a JVM agent that allows both the dynamic replacement\nof method implementations and the application of aspect advices. It works by\ndoing bytecode transformation to take advantage of the new invokedynamic\ninstruction added in Java SE 7 to help implementing dynamic languages for the\nJVM. JooFlux can be managed using a JMX agent so as to operate dynamic\nmodifications at runtime, without resorting to a dedicated domain-specific\nlanguage. We compared JooFlux with existing AOP platforms and dynamic\nlanguages. Results demonstrate that JooFlux performances are close to the Java\nones --- with most of the time a marginal overhead, and sometimes a gain ---\nwhere AOP platforms and dynamic languages present significant overheads. This\npaves the way for interesting future evolutions and applications of JooFlux.\n", "versions": [{"version": "v1", "created": "Wed, 3 Oct 2012 09:15:19 GMT"}], "update_date": "2012-10-04", "authors_parsed": [["Ponge", "Julien", "", "CITI"], ["Mou\u00ebl", "Fr\u00e9d\u00e9ric Le", "", "CITI"]]}, {"id": "1210.2882", "submitter": "Oumair Naseer", "authors": "Oumair Naseer and Rana Atif Ali Khan", "title": "Online Adaptive Fault Tolerant based Feedback Control Scheduling\n  Algorithm for Multiprocessor Embedded Systems", "comments": "9 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.SY cs.OS", "license": "http://creativecommons.org/licenses/by/3.0/", "abstract": "  Since some years ago, use of Feedback Control Scheduling Algorithm (FCSA) in\nthe control scheduling co-design of multiprocessor embedded system has\nincreased. FCSA provides Quality of Service (QoS) in terms of overall system\nperformance and resource allocation in open and unpredictable environment. FCSA\nuses quality control feedback loop to keep CPU utilization under desired\nunitization bound by avoiding overloading and deadline miss ratio. Integrated\nFault tolerance (FT) based FCSA design methodology guarantees that the Safety\nCritical (SC) tasks will meet their deadlines in the presence of faults.\nHowever, current FCSA design model does not provide the optimal solution with\ndynamic load fluctuation. This paper presented a novel methodology of designing\nan online adaptive fault tolerant based feedback control algorithm for\nmultiprocessor embedded systems. This procedure is important for control\nscheduling co-design for multiprocessor embedded systems.\n", "versions": [{"version": "v1", "created": "Wed, 10 Oct 2012 12:13:30 GMT"}], "update_date": "2012-10-11", "authors_parsed": [["Naseer", "Oumair", ""], ["Khan", "Rana Atif Ali", ""]]}, {"id": "1210.6447", "submitter": "Om Prakash", "authors": "S. Yashvir, Om Prakash", "title": "Disk Scheduling: Selection of Algorithm", "comments": "9 pages; http://www.ijascse.in/publications-2012--2", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The objective of this paper is to take some aspects of disk scheduling and\nscheduling algorithms. The disk scheduling is discussed with a sneak peak in\ngeneral and selection of algorithm in particular.\n", "versions": [{"version": "v1", "created": "Wed, 24 Oct 2012 07:56:48 GMT"}], "update_date": "2012-10-25", "authors_parsed": [["Yashvir", "S.", ""], ["Prakash", "Om", ""]]}]