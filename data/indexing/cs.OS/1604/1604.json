[{"id": "1604.00320", "submitter": "Giuseppe Petracca", "authors": "Giuseppe Petracca, Yuqiong Sun, Ahmad Atamli and Trent Jaeger", "title": "AuDroid: Preventing Attacks on Audio Channels in Mobile Devices", "comments": "2015 Annual Computer Security Applications Conference", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CR cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Voice control is a popular way to operate mobile devices, enabling users to\ncommunicate requests to their devices. However, adversaries can leverage voice\ncontrol to trick mobile devices into executing commands to leak secrets or to\nmodify critical information. Contemporary mobile operating systems fail to\nprevent such attacks because they do not control access to the speaker at all\nand fail to control when untrusted apps may use the microphone, enabling\nauthorized apps to create exploitable communication channels. In this paper, we\npropose a security mechanism that tracks the creation of audio communication\nchannels explicitly and controls the information flows over these channels to\nprevent several types of attacks.We design and implement AuDroid, an extension\nto the SELinux reference monitor integrated into the Android operating system\nfor enforcing lattice security policies over the dynamically changing use of\nsystem audio resources. To enhance flexibility, when information flow errors\nare detected, the device owner, system apps and services are given the\nopportunity to resolve information flow errors using known methods, enabling\nAuDroid to run many configurations safely. We evaluate our approach on 17\nwidely-used apps that make extensive use of the microphone and speaker, finding\nthat AuDroid prevents six types of attack scenarios on audio channels while\npermitting all 17 apps to run effectively. AuDroid shows that it is possible to\nprevent attacks using audio channels without compromising functionality or\nintroducing significant performance overhead.\n", "versions": [{"version": "v1", "created": "Fri, 1 Apr 2016 16:32:47 GMT"}], "update_date": "2016-04-04", "authors_parsed": [["Petracca", "Giuseppe", ""], ["Sun", "Yuqiong", ""], ["Atamli", "Ahmad", ""], ["Jaeger", "Trent", ""]]}, {"id": "1604.01378", "submitter": "Gang Lu", "authors": "Gang Lu, Jianfeng Zhan, Chongkang Tan, Xinlong Lin, Defei Kong, Chen\n  Zheng, Fei Tang, Cheng Huang, Lei Wang, and Tianshu Hao", "title": "Isolate First, Then Share: a New OS Architecture for Datacenter\n  Computing", "comments": "14 pages, 13 figures, 5 tables", "journal-ref": null, "doi": null, "report-no": "TR-BAFST-OS-2017102501", "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper presents the \"isolate first, then share\" OS model in which the\nprocessor cores, memory, and devices are divided up between disparate OS\ninstances and a new abstraction, subOS, is proposed to encapsulate an OS\ninstance that can be created, destroyed, and resized on-the-fly. The intuition\nis that this avoids shared kernel states between applications, which in turn\nreduces performance loss caused by contention. We decompose the OS into the\nsupervisor and several subOSes running at the same privilege level: a subOS\ndirectly manages physical resources, while the supervisor can create, destroy,\nresize a subOS on-the-fly. The supervisor and subOSes have few state sharing,\nbut fast inter-subOS communication mechanisms are provided on demand.\n  We present the first implementation, RainForest, which supports unmodified\nLinux binaries. Our comprehensive evaluation shows RainForest outperforms Linux\nwith four different kernels, LXC, and Xen in terms of worst-case and average\nperformance most of time when running a large number of benchmarks. The source\ncode is available soon.\n", "versions": [{"version": "v1", "created": "Tue, 5 Apr 2016 19:33:27 GMT"}, {"version": "v2", "created": "Thu, 23 Feb 2017 01:34:13 GMT"}, {"version": "v3", "created": "Mon, 24 Jul 2017 02:43:35 GMT"}, {"version": "v4", "created": "Mon, 31 Jul 2017 02:13:45 GMT"}, {"version": "v5", "created": "Thu, 26 Oct 2017 03:27:40 GMT"}], "update_date": "2017-10-27", "authors_parsed": [["Lu", "Gang", ""], ["Zhan", "Jianfeng", ""], ["Tan", "Chongkang", ""], ["Lin", "Xinlong", ""], ["Kong", "Defei", ""], ["Zheng", "Chen", ""], ["Tang", "Fei", ""], ["Huang", "Cheng", ""], ["Wang", "Lei", ""], ["Hao", "Tianshu", ""]]}, {"id": "1604.02171", "submitter": "Giuseppe Petracca", "authors": "Giuseppe Petracca, Ahmad Atamli, Yuqiong Sun, Jens Grossklags and\n  Trent Jaeger", "title": "Aware: Controlling App Access to I/O Devices on Mobile Platforms", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Smartphones' cameras, microphones, and device displays enable users to\ncapture and view memorable moments of their lives. However, adversaries can\ntrick users into authorizing malicious apps that exploit weaknesses in current\nmobile platforms to misuse such on-board I/O devices to stealthily capture\nphotos, videos, and screen content without the users' consent. Contemporary\nmobile operating systems fail to prevent such misuse of I/O devices by\nauthorized apps due to lack of binding between users' interactions and accesses\nto I/O devices performed by these apps. In this paper, we propose Aware, a\nsecurity framework for authorizing app requests to perform operations using I/O\ndevices, which binds app requests with user intentions to make all uses of\ncertain I/O devices explicit. We evaluate our defense mechanisms through\nlaboratory-based experimentation and a user study, involving 74 human subjects,\nwhose ability to identify undesired operations targeting I/O devices increased\nsignificantly. Without Aware, only 18% of the participants were able to\nidentify attacks from tested RAT apps. Aware systematically blocks all the\nattacks in absence of user consent and supports users in identifying 82% of\nsocial-engineering attacks tested to hijack approved requests, including some\nmore sophisticated forms of social engineering not yet present in available\nRATs. Aware introduces only 4.79% maximum performance overhead over operations\ntargeting I/O devices. Aware shows that a combination of system defenses and\nuser interface can significantly strengthen defenses for controlling the use of\non-board I/O devices.\n", "versions": [{"version": "v1", "created": "Thu, 7 Apr 2016 20:38:51 GMT"}], "update_date": "2016-04-11", "authors_parsed": [["Petracca", "Giuseppe", ""], ["Atamli", "Ahmad", ""], ["Sun", "Yuqiong", ""], ["Grossklags", "Jens", ""], ["Jaeger", "Trent", ""]]}, {"id": "1604.07371", "submitter": "Srikanth Kandula", "authors": "Robert Grandl, Srikanth Kandula, Sriram Rao, Aditya Akella and\n  Janardhan Kulkarni", "title": "Do the Hard Stuff First: Scheduling Dependent Computations in\n  Data-Analytics Clusters", "comments": null, "journal-ref": null, "doi": null, "report-no": "MSR-TR-2016-19", "categories": "cs.DC cs.DB cs.OS cs.PF cs.SY", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present a scheduler that improves cluster utilization and job completion\ntimes by packing tasks having multi-resource requirements and\ninter-dependencies. While the problem is algorithmically very hard, we achieve\nnear-optimality on the job DAGs that appear in production clusters at a large\nenterprise and in benchmarks such as TPC-DS. A key insight is that carefully\nhandling the long-running tasks and those with tough-to-pack resource needs\nwill produce good-enough schedules. However, which subset of tasks to treat\ncarefully is not clear (and intractable to discover). Hence, we offer a search\nprocedure that evaluates various possibilities and outputs a preferred schedule\norder over tasks. An online component enforces the schedule orders desired by\nthe various jobs running on the cluster. In addition, it packs tasks, overbooks\nthe fungible resources and guarantees bounded unfairness for a variety of\ndesirable fairness schemes. Relative to the state-of-the art schedulers, we\nspeed up 50% of the jobs by over 30% each.\n", "versions": [{"version": "v1", "created": "Mon, 25 Apr 2016 19:20:18 GMT"}], "update_date": "2016-04-26", "authors_parsed": [["Grandl", "Robert", ""], ["Kandula", "Srikanth", ""], ["Rao", "Sriram", ""], ["Akella", "Aditya", ""], ["Kulkarni", "Janardhan", ""]]}]