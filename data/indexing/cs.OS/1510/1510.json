[{"id": "1510.02552", "submitter": "Haryono Haryono", "authors": "Haryono Haryono", "title": "Multitasking Programming of OBDH Satellite Based On PC-104", "comments": "8 pages", "journal-ref": "International Journal of advanced studies in Computer Science and\n  Engineering IJASCSE Volume 4, Issue 8, 2015", "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  On Board Data Handling (OBDH) has functions to monitor, control, acquire,\nanalyze, take a decision, and execute the command. OBDH should organize the\ntask between sub system. OBDH like a heart which has a vital function. Because\nthe function is seriously important therefore designing and implementing the\nOBDH should be carefully, in order to have a good reliability. Many OBDHs have\nbeen made to support the satellite mission using primitive programming. In\nhandling the data from various input, OBDH should always be available to all\nsub systems, when the tasks are many, it is not easy to program using primitive\nprogramming. Sometimes the data become corrupt because the data which come to\nthe OBDH is in the same time. Therefore it is required to have a way to handle\nthe data safely and also easy in programming perspective. In this research,\nOBDH is programmed using multi tasking programming perspective has been\ncreated. The Operating System (OS) has been implemented so that can run the\ntasks simultaneously. The OS is prepared by configuring the Linux Kernel for\nthe specific processor, creating Root File System (RFS), installing the\nBusyBox. In order to do the above method, preparing the environment in our\nmachine has been done, they are installing the Cross Tool Chain, U-Boot,\nGNU-Linux Kernel Source etc. After that, programming using c code with\nmultitasking programming can be implemented. By using above method, it is found\nthat programming is easier and the corruption data because of reentrancy can be\nminimized. Keywords- Operating System, PC-104, Kernel, C Programming\n", "versions": [{"version": "v1", "created": "Fri, 9 Oct 2015 02:58:40 GMT"}], "update_date": "2015-10-12", "authors_parsed": [["Haryono", "Haryono", ""]]}, {"id": "1510.05567", "submitter": "Eric Kerrigan", "authors": "Mason Thammawichai and Eric C. Kerrigan", "title": "Energy-Efficient Scheduling for Homogeneous Multiprocessor Systems", "comments": "Corrected typos: definition of J_i in Section 2.1; (3b)-(3c);\n  definition of \\Phi_A and \\Phi_D in paragraph after (6b). Previous equations\n  were correct only for special case of p_i=d_i", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.SY math.OC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present a number of novel algorithms, based on mathematical optimization\nformulations, in order to solve a homogeneous multiprocessor scheduling\nproblem, while minimizing the total energy consumption. In particular, for a\nsystem with a discrete speed set, we propose solving a tractable linear\nprogram. Our formulations are based on a fluid model and a global scheduling\nscheme, i.e. tasks are allowed to migrate between processors. The new methods\nare compared with three global energy/feasibility optimal workload allocation\nformulations. Simulation results illustrate that our methods achieve both\nfeasibility and energy optimality and outperform existing methods for\nconstrained deadline tasksets. Specifically, the results provided by our\nalgorithm can achieve up to an 80% saving compared to an algorithm without a\nfrequency scaling scheme and up to 70% saving compared to a constant frequency\nscaling scheme for some simulated tasksets. Another benefit is that our\nalgorithms can solve the scheduling problem in one step instead of using a\nrecursive scheme. Moreover, our formulations can solve a more general class of\nscheduling problems, i.e. any periodic real-time taskset with arbitrary\ndeadline. Lastly, our algorithms can be applied to both online and offline\nscheduling schemes.\n", "versions": [{"version": "v1", "created": "Mon, 19 Oct 2015 16:26:47 GMT"}, {"version": "v2", "created": "Thu, 12 Nov 2015 12:16:11 GMT"}], "update_date": "2015-11-13", "authors_parsed": [["Thammawichai", "Mason", ""], ["Kerrigan", "Eric C.", ""]]}]