[{"id": "0706.2748", "submitter": "Royon Yvan", "authors": "Yvan Royon (INRIA Rh\\^one-Alpes), St\\'ephane Fr\\'enot (INRIA\n  Rh\\^one-Alpes)", "title": "A Survey of Unix Init Schemes", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.GL", "license": null, "abstract": "  In most modern operating systems, init (as in \"initialization\") is the\nprogram launched by the kernel at boot time. It runs as a daemon and typically\nhas PID 1. Init is responsible for spawning all other processes and scavenging\nzombies. It is also responsible for reboot and shutdown operations. This\ndocument describes existing solutions that implement the init process and/or\ninit scripts in Unix-like systems. These solutions range from the legacy and\nstill-in-use BSD and SystemV schemes, to recent and promising schemes from\nUbuntu, Apple, Sun and independent developers. Our goal is to highlight their\nfocus and compare their sets of features.\n", "versions": [{"version": "v1", "created": "Tue, 19 Jun 2007 09:44:36 GMT"}, {"version": "v2", "created": "Wed, 20 Jun 2007 07:31:38 GMT"}], "update_date": "2007-06-20", "authors_parsed": [["Royon", "Yvan", "", "INRIA Rh\u00f4ne-Alpes"], ["Fr\u00e9not", "St\u00e9phane", "", "INRIA\n  Rh\u00f4ne-Alpes"]]}, {"id": "0706.3812", "submitter": "Pierre Parrend", "authors": "Pierre Parrend (INRIA Rh\\^one-Alpes), St\\'ephane Fr\\'enot (INRIA\n  Rh\\^one-Alpes)", "title": "Java Components Vulnerabilities - An Experimental Classification\n  Targeted at the OSGi Platform", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CR cs.OS", "license": null, "abstract": "  The OSGi Platform finds a growing interest in two different applications\ndomains: embedded systems, and applications servers. However, the security\nproperties of this platform are hardly studied, which is likely to hinder its\nuse in production systems. This is all the more important that the dynamic\naspect of OSGi-based applications, that can be extended at runtime, make them\nvulnerable to malicious code injection. We therefore perform a systematic audit\nof the OSGi platform so as to build a vulnerability catalog that intends to\nreference OSGi Vulnerabilities originating in the Core Specification, and in\nbehaviors related to the use of the Java language. Standard Services are not\nconsidered. To support this audit, a Semi-formal Vulnerability Pattern is\ndefined, that enables to uniquely characterize fundamental properties for each\nvulnerability, to include verbose description in the pattern, to reference\nknown security protections, and to track the implementation status of the\nproof-of-concept OSGi Bundles that exploit the vulnerability. Based on the\nanalysis of the catalog, a robust OSGi Platform is built, and recommendations\nare made to enhance the OSGi Specifications.\n", "versions": [{"version": "v1", "created": "Tue, 26 Jun 2007 12:36:37 GMT"}, {"version": "v2", "created": "Wed, 27 Jun 2007 08:03:05 GMT"}, {"version": "v3", "created": "Fri, 27 Jul 2007 13:50:46 GMT"}], "update_date": "2011-11-10", "authors_parsed": [["Parrend", "Pierre", "", "INRIA Rh\u00f4ne-Alpes"], ["Fr\u00e9not", "St\u00e9phane", "", "INRIA\n  Rh\u00f4ne-Alpes"]]}]