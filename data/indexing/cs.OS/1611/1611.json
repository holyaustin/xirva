[{"id": "1611.07862", "submitter": "Emery Berger", "authors": "Bobby Powers, John Vilk, Emery D. Berger", "title": "Browsix: Bridging the Gap Between Unix and the Browser", "comments": "Final version published at\n  https://dl.acm.org/citation.cfm?doid=3037697.3037727", "journal-ref": "ASPLOS 2017", "doi": "10.1145/3037697.3037727", "report-no": null, "categories": "cs.OS cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Applications written to run on conventional operating systems typically\ndepend on OS abstractions like processes, pipes, signals, sockets, and a shared\nfile system. Porting these applications to the web currently requires extensive\nrewriting or hosting significant portions of code server-side because browsers\npresent a nontraditional runtime environment that lacks OS functionality.\n  This paper presents Browsix, a framework that bridges the considerable gap\nbetween conventional operating systems and the browser, enabling unmodified\nprograms expecting a Unix-like environment to run directly in the browser.\nBrowsix comprises two core parts: (1) a JavaScript-only system that makes core\nUnix features (including pipes, concurrent processes, signals, sockets, and a\nshared file system) available to web applications; and (2) extended JavaScript\nruntimes for C, C++, Go, and Node.js that support running programs written in\nthese languages as processes in the browser. Browsix supports running a POSIX\nshell, making it straightforward to connect applications together via pipes.\n  We illustrate Browsix's capabilities via case studies that demonstrate how it\neases porting legacy applications to the browser and enables new functionality.\nWe demonstrate a Browsix-enabled LaTeX editor that operates by executing\nunmodified versions of pdfLaTeX and BibTeX. This browser-only LaTeX editor can\nrender documents in seconds, making it fast enough to be practical. We further\ndemonstrate how Browsix lets us port a client-server application to run\nentirely in the browser for disconnected operation. Creating these applications\nrequired less than 50 lines of glue code and no code modifications,\ndemonstrating how easily Browsix can be used to build sophisticated web\napplications from existing parts without modification.\n", "versions": [{"version": "v1", "created": "Wed, 23 Nov 2016 16:23:40 GMT"}, {"version": "v2", "created": "Mon, 29 Apr 2019 04:32:16 GMT"}], "update_date": "2019-04-30", "authors_parsed": [["Powers", "Bobby", ""], ["Vilk", "John", ""], ["Berger", "Emery D.", ""]]}]