[{"id": "1110.4623", "submitter": "Jeff A Stuart", "authors": "Jeff A. Stuart and John D. Owens", "title": "Efficient Synchronization Primitives for GPUs", "comments": "13 pages with appendix, several figures, plans to submit to CompSci\n  conference in early 2012", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.DC cs.DS cs.GR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this paper, we revisit the design of synchronization\nprimitives---specifically barriers, mutexes, and semaphores---and how they\napply to the GPU. Previous implementations are insufficient due to the\ndiscrepancies in hardware and programming model of the GPU and CPU. We create\nnew implementations in CUDA and analyze the performance of spinning on the GPU,\nas well as a method of sleeping on the GPU, by running a set of memory-system\nbenchmarks on two of the most common GPUs in use, the Tesla- and Fermi-class\nGPUs from NVIDIA. From our results we define higher-level principles that are\nvalid for generic many-core processors, the most important of which is to limit\nthe number of atomic accesses required for a synchronization operation because\natomic accesses are slower than regular memory accesses. We use the results of\nthe benchmarks to critique existing synchronization algorithms and guide our\nnew implementations, and then define an abstraction of GPUs to classify any GPU\nbased on the behavior of the memory system. We use this abstraction to create\nsuitable implementations of the primitives specifically targeting the GPU, and\nanalyze the performance of these algorithms on Tesla and Fermi. We then predict\nperformance on future GPUs based on characteristics of the abstraction. We also\nexamine the roles of spin waiting and sleep waiting in each primitive and how\ntheir performance varies based on the machine abstraction, then give a set of\nguidelines for when each strategy is useful based on the characteristics of the\nGPU and expected contention.\n", "versions": [{"version": "v1", "created": "Thu, 20 Oct 2011 19:43:58 GMT"}], "update_date": "2011-10-21", "authors_parsed": [["Stuart", "Jeff A.", ""], ["Owens", "John D.", ""]]}, {"id": "1110.5793", "submitter": "Jo\\\"el Goossens", "authors": "Vandy Berten (1), Jo\\\"el Goossens (1) ((1) U.L.B.)", "title": "Sufficient FTP Schedulability Test for the Non-Cyclic Generalized\n  Multiframe Task Model", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Our goal is to provide a sufficient schedulability test -ideally polynomial-\nfor the scheduling of Non-Cyclic Generalized Multiframe Task Model using\nFixed-Task-Priority schedulers. We report two first results: (i) we present and\nprove correct the critical instant for the Non-Cyclic Generalized Multiframe\nTask Model then (ii) we propose an algorithm which provides a sufficient (but\npseudo-polynomial) schedulability test.\n", "versions": [{"version": "v1", "created": "Wed, 26 Oct 2011 13:53:41 GMT"}], "update_date": "2011-10-27", "authors_parsed": [["Berten", "Vandy", "", "U.L.B"], ["Goossens", "Jo\u00ebl", "", "U.L.B"]]}]