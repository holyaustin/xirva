[{"id": "1709.02746", "submitter": "Sam Silvestro", "authors": "Sam Silvestro, Hongyu Liu, Corey Crosser, Zhiqiang Lin, Tongping Liu", "title": "FreeGuard: A Faster Secure Heap Allocator", "comments": "15 pages, 4 figures, to be published at CCS'17", "journal-ref": null, "doi": "10.1145/3133956.3133957", "report-no": null, "categories": "cs.OS cs.CR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In spite of years of improvements to software security, heap-related attacks\nstill remain a severe threat. One reason is that many existing memory\nallocators fall short in a variety of aspects. For instance,\nperformance-oriented allocators are designed with very limited countermeasures\nagainst attacks, but secure allocators generally suffer from significant\nperformance overhead, e.g., running up to 10x slower. This paper, therefore,\nintroduces FreeGuard, a secure memory allocator that prevents or reduces a wide\nrange of heap-related attacks, such as heap overflows, heap over-reads,\nuse-after-frees, as well as double and invalid frees. FreeGuard has similar\nperformance to the default Linux allocator, with less than 2% overhead on\naverage, but provides significant improvement to security guarantees. FreeGuard\nalso addresses multiple implementation issues of existing secure allocators,\nsuch as the issue of scalability. Experimental results demonstrate that\nFreeGuard is very effective in defending against a variety of heap-related\nattacks.\n", "versions": [{"version": "v1", "created": "Fri, 8 Sep 2017 15:29:17 GMT"}, {"version": "v2", "created": "Mon, 25 Sep 2017 16:10:02 GMT"}], "update_date": "2017-09-26", "authors_parsed": [["Silvestro", "Sam", ""], ["Liu", "Hongyu", ""], ["Crosser", "Corey", ""], ["Lin", "Zhiqiang", ""], ["Liu", "Tongping", ""]]}, {"id": "1709.10140", "submitter": "Carlos Eduardo Arango Gutierrez", "authors": "Carlos Arango, R\\'emy Dernat, John Sanabria", "title": "Performance Evaluation of Container-based Virtualization for High\n  Performance Computing Environments", "comments": "Keywords: Container-based virtualization; Linux containers;\n  Singularity-Containers; Docker; High performance computing", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.DC cs.PF", "license": "http://creativecommons.org/licenses/by-sa/4.0/", "abstract": "  Virtualization technologies have evolved along with the development of\ncomputational environments since virtualization offered needed features at that\ntime such as isolation, accountability, resource allocation, resource fair\nsharing and so on. Novel processor technologies bring to commodity computers\nthe possibility to emulate diverse environments where a wide range of\ncomputational scenarios can be run. Along with processors evolution, system\ndevelopers have created different virtualization mechanisms where each new\ndevelopment enhanced the performance of previous virtualized environments.\nRecently, operating system-based virtualization technologies captured the\nattention of communities abroad (from industry to academy and research) because\ntheir important improvements on performance area.\n  In this paper, the features of three container-based operating systems\nvirtualization tools (LXC, Docker and Singularity) are presented. LXC, Docker,\nSingularity and bare metal are put under test through a customized single node\nHPL-Benchmark and a MPI-based application for the multi node testbed. Also the\ndisk I/O performance, Memory (RAM) performance, Network bandwidth and GPU\nperformance are tested for the COS technologies vs bare metal. Preliminary\nresults and conclusions around them are presented and discussed.\n", "versions": [{"version": "v1", "created": "Thu, 28 Sep 2017 19:30:05 GMT"}], "update_date": "2017-10-02", "authors_parsed": [["Arango", "Carlos", ""], ["Dernat", "R\u00e9my", ""], ["Sanabria", "John", ""]]}]