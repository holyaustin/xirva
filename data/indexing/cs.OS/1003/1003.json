[{"id": "1003.1336", "submitter": "Zolt\\'an K\\'asa", "authors": "Peter Fornai, Antal Ivanyi", "title": "FIFO anomaly is unbounded", "comments": null, "journal-ref": "Acta Univ. Sapientiae, Informatica, 2,1 (2010) 80-89", "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Virtual memory of computers is usually implemented by demand paging. For some\npage replacement algorithms the number of page faults may increase as the\nnumber of page frames increases. Belady, Nelson and Shedler constructed\nreference strings for which page replacement algorithm FIFO produces near twice\nmore page faults in a larger memory than in a smaller one. They formulated the\nconjecture that 2 is a general bound. We prove that this ratio can be\narbitrarily large.\n", "versions": [{"version": "v1", "created": "Fri, 5 Mar 2010 20:34:44 GMT"}, {"version": "v2", "created": "Tue, 9 Mar 2010 13:02:01 GMT"}], "update_date": "2010-03-13", "authors_parsed": [["Fornai", "Peter", ""], ["Ivanyi", "Antal", ""]]}, {"id": "1003.4088", "submitter": "William Jackson", "authors": "Richa Gupta, Sanjiv Tokekar", "title": "Proficient Pair of Replacement Algorithms on L1 and L2 Cache for Merge\n  Sort", "comments": null, "journal-ref": "Journal of Computing, Volume 2, Issue 3, March 2010,\n  https://sites.google.com/site/journalofcomputing/", "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Memory hierarchy is used to compete the processors speed. Cache memory is the\nfast memory which is used to conduit the speed difference of memory and\nprocessor. The access patterns of Level 1 cache (L1) and Level 2 cache (L2) are\ndifferent, when CPU not gets the desired data in L1 then it accesses L2. Thus\nthe replacement algorithm which works efficiently on L1 may not be as efficient\non L2. Similarly various applications such as Matrix Multiplication, Web, Fast\nFourier Transform (FFT) etc will have varying access pattern. Thus same\nreplacement algorithm for all types of application may not be efficient. This\npaper works for getting an efficient pair of replacement algorithm on L1 and L2\nfor the algorithm Merge Sort. With the memory reference string of Merge Sort,\nwe have analyzed the behavior of various existing replacement algorithms on L1.\nThe existing replacement algorithms which are taken into consideration are:\nLeast Recently Used (LRU), Least Frequently Used (LFU) and First In First Out\n(FIFO). After Analyzing the memory reference pattern of Merge Sort, we have\nproposed a Partition Based Replacement algorithm (PBR_L1)) on L1 Cache.\nFurthermore we have analyzed various pairs of algorithms on L1 and L2\nrespectively, resulting in finding a suitable pair of replacement algorithms.\nSimulation on L1 shows, among the considered existing replacement algorithms\nFIFO is performing better than others. While the proposed replacement algorithm\nPBR_L1 is working about 1.7% to 44 % better than FIFO for various cache sizes.\n", "versions": [{"version": "v1", "created": "Mon, 22 Mar 2010 06:52:12 GMT"}], "update_date": "2010-03-23", "authors_parsed": [["Gupta", "Richa", ""], ["Tokekar", "Sanjiv", ""]]}, {"id": "1003.5303", "submitter": "Bryan Ford", "authors": "Amittai Aviram, Sen Hu, Bryan Ford, and Ramakrishna Gummadi", "title": "Determinating Timing Channels in Compute Clouds", "comments": "6 pages, 4 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.CR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Timing side-channels represent an insidious security challenge for cloud\ncomputing, because: (a) massive parallelism in the cloud makes timing channels\npervasive and hard to control; (b) timing channels enable one customer to steal\ninformation from another without leaving a trail or raising alarms; (c) only\nthe cloud provider can feasibly detect and report such attacks, but the\nprovider's incentives are not to; and (d) resource partitioning schemes for\ntiming channel control undermine statistical sharing efficiency, and, with it,\nthe cloud computing business model. We propose a new approach to timing channel\ncontrol, using provider-enforced deterministic execution instead of resource\npartitioning to eliminate timing channels within a shared cloud domain.\nProvider-enforced determinism prevents execution timing from affecting the\nresults of a compute task, however large or parallel, ensuring that a task's\noutputs leak no timing information apart from explicit timing inputs and total\ncompute duration. Experiments with a prototype OS for deterministic cloud\ncomputing suggest that such an approach may be practical and efficient. The OS\nsupports deterministic versions of familiar APIs such as processes, threads,\nshared memory, and file systems, and runs coarse-grained parallel tasks as\nefficiently and scalably as current timing channel-ridden systems.\n", "versions": [{"version": "v1", "created": "Sat, 27 Mar 2010 14:44:01 GMT"}, {"version": "v2", "created": "Sun, 25 Jul 2010 15:40:38 GMT"}], "update_date": "2010-07-27", "authors_parsed": [["Aviram", "Amittai", ""], ["Hu", "Sen", ""], ["Ford", "Bryan", ""], ["Gummadi", "Ramakrishna", ""]]}, {"id": "1003.5525", "submitter": "Kees Middelburg", "authors": "C. A. Middelburg", "title": "Searching publications on operating systems", "comments": "8 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This note concerns a search for publications in which one can find statements\nthat explain the concept of an operating system, reasons for introducing\noperating systems, a formalization of the concept of an operating system or\ntheory about operating systems based on such a formalization. It reports on the\nway in which the search has been carried out and the outcome of the search. The\noutcome includes not only what the search was meant for, but also some added\nbonuses.\n", "versions": [{"version": "v1", "created": "Mon, 29 Mar 2010 12:51:23 GMT"}], "update_date": "2010-03-30", "authors_parsed": [["Middelburg", "C. A.", ""]]}]