[{"id": "1803.03951", "submitter": "Ofir Shwartz", "authors": "Ofir Shwartz, Yitzhak Birk", "title": "The Secure Machine: Efficient Secure Execution On Untrusted Platforms", "comments": "A PhD thesis, to appear at the Technion's library", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CR cs.AR cs.DC cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this work we present the Secure Machine, SeM for short, a CPU architecture\nextension for secure computing. SeM uses a small amount of in-chip additional\nhardware that monitors key communication channels inside the CPU chip, and only\nacts when required. SeM provides confidentiality and integrity for a secure\nprogram without trusting the platform software or any off-chip hardware. SeM\nsupports existing binaries of single- and multi-threaded applications running\non single- or multi-core, multi-CPU. The performance reduction caused by it is\nonly few percent, most of which is due to the memory encryption layer that is\ncommonly used in many secure architectures.\n  We also developed SeM-Prepare, a software tool that automatically instruments\nexisting applications (binaries) with additional instructions so they can be\nsecurely executed on our architecture without requiring any programming efforts\nor the availability of the desired program`s source code.\n  To enable secure data sharing in shared memory environments, we developed\nSecure Distributed Shared Memory (SDSM), an efficient (time and memory)\nalgorithm for allowing thousands of compute nodes to share data securely while\nrunning on an untrusted computing environment. SDSM shows a negligible\nreduction in performance, and it requires negligible and hardware resources. We\ndeveloped Distributed Memory Integrity Trees, a method for enhancing single\nnode integrity trees for preserving the integrity of a distributed application\nrunning on an untrusted computing environment. We show that our method is\napplicable to existing single node integrity trees such as Merkle Tree, Bonsai\nMerkle Tree, and Intel`s SGX memory integrity engine. All these building blocks\nmay be used together to form a practical secure system, and some can be used in\nconjunction with other secure systems.\n", "versions": [{"version": "v1", "created": "Sun, 11 Mar 2018 12:09:27 GMT"}], "update_date": "2018-03-13", "authors_parsed": [["Shwartz", "Ofir", ""], ["Birk", "Yitzhak", ""]]}]