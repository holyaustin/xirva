[{"id": "0910.4052", "submitter": "Andrei    Yafimau", "authors": "Andrei I. Yafimau", "title": "Virtual-Threading: Advanced General Purpose Processors Architecture", "comments": "56 pages, 5 PNG figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.AR cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The paper describes the new computers architecture, the main features of\nwhich has been claimed in the Russian Federation patent 2312388 and in the US\npatent application 11/991331. This architecture is intended to effective\nsupport of the General Purpose Parallel Computing (GPPC), the essence of which\nis extremely frequent switching of threads between states of activity and\nstates of viewed in the paper the algorithmic latency. To emphasize the same\nimpact of the architectural latency and the algorithmic latency upon GPPC, is\nintroduced the new notion of the generalized latency and is defined its\nquantitative measure - the Generalized Latency Tolerance (GLT). It is shown\nthat a well suited for GPPC implementation architecture should have high level\nof GLT and is described such architecture, which is called the Virtual-Threaded\nMachine. This architecture originates a processor virtualization in the\ndirection of activities virtualization, which is orthogonal to the well-known\ndirection of memory virtualization. The key elements of the architecture are 1)\nthe distributed fine grain representation of the architectural register file,\nwhich elements are hardware swapped through levels of a microarchitectural\nmemory, 2) the prioritized fine grain direct hardware multiprogramming, 3) the\naccess controlled virtual addressing and 4) the hardware driven semaphores. The\ncomposition of these features lets to introduce new styles of operating system\n(OS) programming, which is free of interruptions, and of applied programming\nwith a very rare using the OS services.\n", "versions": [{"version": "v1", "created": "Wed, 21 Oct 2009 11:31:14 GMT"}], "update_date": "2009-10-22", "authors_parsed": [["Yafimau", "Andrei I.", ""]]}, {"id": "0910.5046", "submitter": "Gene Cooperman", "authors": "Ana Maria Visan, Artem Polyakov, Praveen S. Solanki, Kapil Arya, Tyler\n  Denniston, Gene Cooperman", "title": "Temporal Debugging using URDB", "comments": "20 pages, 3 figures, 5 tables; software at urdb.sourceforge.net", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.SE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  A new style of temporal debugging is proposed. The new URDB debugger can\nemploy such techniques as temporal search for finding an underlying fault that\nis causing a bug. This improves on the standard iterative debugging style,\nwhich iteratively re-executes a program under debugger control in the search\nfor the underlying fault. URDB acts as a meta-debugger, with current support\nfor four widely used debuggers: gdb, MATLAB, python, and perl. Support for a\nnew debugger can be added in a few hours. Among its points of novelty are: (i)\nthe first reversible debuggers for MATLAB, python, and perl; (ii) support for\ntoday's multi-core architectures; (iii) reversible debugging of multi-process\nand distributed computations; and (iv) temporal search on changes in program\nexpressions. URDB gains its reversibility and temporal abilities through the\nfast checkpoint-restart capability of DMTCP (Distributed MultiThreaded\nCheckPointing). The recently enhanced DMTCP also adds ptrace support, enabling\none to freeze, migrate, and replicate debugging sessions.\n", "versions": [{"version": "v1", "created": "Tue, 27 Oct 2009 17:31:02 GMT"}], "update_date": "2009-10-28", "authors_parsed": [["Visan", "Ana Maria", ""], ["Polyakov", "Artem", ""], ["Solanki", "Praveen S.", ""], ["Arya", "Kapil", ""], ["Denniston", "Tyler", ""], ["Cooperman", "Gene", ""]]}, {"id": "0910.5577", "submitter": "Ilkka Norros", "authors": "Ilkka Norros, Hannu Reittu, Timo Eirola", "title": "On the stability of two-chunk file-sharing systems", "comments": "19 pages, 7 figures", "journal-ref": "Queueing Systems (2011) 67: 183", "doi": "10.1007/s11134-011-9209-2", "report-no": null, "categories": "cs.OS math.PR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We consider five different peer-to-peer file sharing systems with two chunks,\nwith the aim of finding chunk selection algorithms that have provably stable\nperformance with any input rate and assuming non-altruistic peers who leave the\nsystem immediately after downloading the second chunk. We show that many\nalgorithms that first looked promising lead to unstable or oscillating\nbehavior. However, we end up with a system with desirable properties. Most of\nour rigorous results concern the corresponding deterministic large system\nlimits, but in two simplest cases we provide proofs for the stochastic systems\nalso.\n", "versions": [{"version": "v1", "created": "Thu, 29 Oct 2009 08:38:32 GMT"}], "update_date": "2018-10-24", "authors_parsed": [["Norros", "Ilkka", ""], ["Reittu", "Hannu", ""], ["Eirola", "Timo", ""]]}]