[{"id": "1606.00111", "submitter": "Anna Lyons", "authors": "Anna Lyons and Gernot Heiser", "title": "It's Time: OS Mechanisms for Enforcing Asymmetric Temporal Integrity", "comments": "Paper submitted to OSDI 2016", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Mixed-criticality systems combine real-time components of different levels of\ncriticality, i.e. severity of failure, on the same processor, in order to\nobtain good resource utilisation. They must guarantee deadlines of\nhighly-critical tasks at the expense of lower-criticality ones in the case of\noverload. Present operating systems provide inadequate support for this kind of\nsystem, which is of growing importance in avionics and other verticals. We\npresent an approach that provides the required asymmetric integrity and its\nimplementation in the high-assurance seL4 microkernel.\n", "versions": [{"version": "v1", "created": "Wed, 1 Jun 2016 04:29:58 GMT"}, {"version": "v2", "created": "Thu, 2 Jun 2016 05:32:46 GMT"}], "update_date": "2016-06-03", "authors_parsed": [["Lyons", "Anna", ""], ["Heiser", "Gernot", ""]]}, {"id": "1606.02635", "submitter": "Eric Kerrigan", "authors": "Mason Thammawichai and Eric C. Kerrigan", "title": "Feedback Scheduling for Energy-Efficient Real-Time Homogeneous\n  Multiprocessor Systems", "comments": null, "journal-ref": "Proc. 55th IEEE Conference on Decision and Control, 2016", "doi": "10.1109/CDC.2016.7798501", "report-no": null, "categories": "cs.OS cs.DC cs.SY math.OC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Real-time scheduling algorithms proposed in the literature are often based on\nworst-case estimates of task parameters. The performance of an open-loop scheme\ncan be degraded significantly if there are uncertainties in task parameters,\nsuch as the execution times of the tasks. Therefore, to cope with such a\nsituation, a closed-loop scheme, where feedback is exploited to adjust the\nsystem parameters, can be applied. We propose an optimal control framework that\ntakes advantage of feeding back information of finished tasks to solve a\nreal-time multiprocessor scheduling problem with uncertainty in task execution\ntimes, with the objective of minimizing the total energy consumption.\nSpecifically, we propose a linear programming based algorithm to solve a\nworkload partitioning problem and adopt McNaughton's wrap around algorithm to\nfind the task execution order. The simulation results illustrate that our\nfeedback scheduling algorithm can save energy by as much as 40% compared to an\nopen-loop method for two processor models, i.e. a PowerPC 405LP and an XScale\nprocessor.\n", "versions": [{"version": "v1", "created": "Wed, 8 Jun 2016 16:52:03 GMT"}], "update_date": "2017-10-13", "authors_parsed": [["Thammawichai", "Mason", ""], ["Kerrigan", "Eric C.", ""]]}, {"id": "1606.04386", "submitter": "Bj\\\"orn Brandenburg", "authors": "Jian-Jia Chen and Bj\\\"orn B. Brandenburg", "title": "A Note on the Period Enforcer Algorithm for Self-Suspending Tasks", "comments": null, "journal-ref": null, "doi": "10.4230/LITES-v004-i001-a001", "report-no": null, "categories": "cs.DC cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The period enforcer algorithm for self-suspending real-time tasks is a\ntechnique for suppressing the \"back-to-back\" scheduling penalty associated with\ndeferred execution. Originally proposed in 1991, the algorithm has attracted\nrenewed interest in recent years. This note revisits the algorithm in the light\nof recent developments in the analysis of self-suspending tasks, carefully\nre-examines and explains its underlying assumptions and limitations, and points\nout three observations that have not been made in the literature to date: (i)\nperiod enforcement is not strictly superior (compared to the base case without\nenforcement) as it can cause deadline misses in self-suspending task sets that\nare schedulable without enforcement; (ii) to match the assumptions underlying\nthe analysis of the period enforcer, a schedulability analysis of\nself-suspending tasks subject to period enforcement requires a task set\ntransformation for which no solution is known in the general case, and which is\nsubject to exponential time complexity (with current techniques) in the limited\ncase of a single self-suspending task; and (iii) the period enforcer algorithm\nis incompatible with all existing analyses of suspension-based locking\nprotocols, and can in fact cause ever-increasing suspension times until a\ndeadline is missed.\n", "versions": [{"version": "v1", "created": "Tue, 14 Jun 2016 14:22:25 GMT"}], "update_date": "2019-09-17", "authors_parsed": [["Chen", "Jian-Jia", ""], ["Brandenburg", "Bj\u00f6rn B.", ""]]}, {"id": "1606.05794", "submitter": "Jeremy Kepner", "authors": "Mike Jones, Bill Arcand, Bill Bergeron, David Bestor, Chansup Byun,\n  Lauren Milechin, Vijay Gadepally, Matt Hubbell, Jeremy Kepner, Pete\n  Michaleas, Julie Mullen, Andy Prout, Tony Rosa, Siddharth Samsi, Charles Yee,\n  Albert Reuther", "title": "Scalability of VM Provisioning Systems", "comments": "5 pages; 6 figures; accepted to the IEEE High Performance Extreme\n  Computing (HPEC) conference 2016", "journal-ref": null, "doi": "10.1109/HPEC.2016.7761629", "report-no": null, "categories": "cs.DC cs.CY cs.OS cs.SY", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Virtual machines and virtualized hardware have been around for over half a\ncentury. The commoditization of the x86 platform and its rapidly growing\nhardware capabilities have led to recent exponential growth in the use of\nvirtualization both in the enterprise and high performance computing (HPC). The\nstartup time of a virtualized environment is a key performance metric for high\nperformance computing in which the runtime of any individual task is typically\nmuch shorter than the lifetime of a virtualized service in an enterprise\ncontext. In this paper, a methodology for accurately measuring the startup\nperformance on an HPC system is described. The startup performance overhead of\nthree of the most mature, widely deployed cloud management frameworks\n(OpenStack, OpenNebula, and Eucalyptus) is measured to determine their\nsuitability for workloads typically seen in an HPC environment. A 10x\nperformance difference is observed between the fastest (Eucalyptus) and the\nslowest (OpenNebula) framework. This time difference is primarily due to delays\nin waiting on networking in the cloud-init portion of the startup. The\nmethodology and measurements presented should facilitate the optimization of\nstartup across a variety of virtualization environments.\n", "versions": [{"version": "v1", "created": "Sat, 18 Jun 2016 18:55:42 GMT"}], "update_date": "2016-12-13", "authors_parsed": [["Jones", "Mike", ""], ["Arcand", "Bill", ""], ["Bergeron", "Bill", ""], ["Bestor", "David", ""], ["Byun", "Chansup", ""], ["Milechin", "Lauren", ""], ["Gadepally", "Vijay", ""], ["Hubbell", "Matt", ""], ["Kepner", "Jeremy", ""], ["Michaleas", "Pete", ""], ["Mullen", "Julie", ""], ["Prout", "Andy", ""], ["Rosa", "Tony", ""], ["Samsi", "Siddharth", ""], ["Yee", "Charles", ""], ["Reuther", "Albert", ""]]}]