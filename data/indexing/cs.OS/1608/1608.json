[{"id": "1608.00571", "submitter": "Daniel Sorin", "authors": "Blake A. Hechtman, Andrew D. Hilton, and Daniel J. Sorin", "title": "TREES: A CPU/GPU Task-Parallel Runtime with Explicit Epoch\n  Synchronization", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.OS cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We have developed a task-parallel runtime system, called TREES, that is\ndesigned for high performance on CPU/GPU platforms. On platforms with multiple\nCPUs, Cilk's \"work-first\" principle underlies how task-parallel applications\ncan achieve performance, but work-first is a poor fit for GPUs. We build upon\nwork-first to create the \"work-together\" principle that addresses the specific\nstrengths and weaknesses of GPUs. The work-together principle extends\nwork-first by stating that (a) the overhead on the critical path should be paid\nby the entire system at once and (b) work overheads should be paid\nco-operatively. We have implemented the TREES runtime in OpenCL, and we\nexperimentally evaluate TREES applications on a CPU/GPU platform.\n", "versions": [{"version": "v1", "created": "Mon, 1 Aug 2016 15:33:14 GMT"}], "update_date": "2016-08-03", "authors_parsed": [["Hechtman", "Blake A.", ""], ["Hilton", "Andrew D.", ""], ["Sorin", "Daniel J.", ""]]}, {"id": "1608.04303", "submitter": "R\\u{a}zvan Deaconescu", "authors": "R\\u{a}zvan Deaconescu, Luke Deshotels, Mihai Bucicoiu, William Enck,\n  Lucas Davi, Ahmad-Reza Sadeghi", "title": "SandBlaster: Reversing the Apple Sandbox", "comments": "25 pages, 9 figures, 14 listings This report is an auxiliary document\n  to the paper \"SandScout: Automatic Detection of Flaws in iOS Sandbox\n  Profiles\", to be presented at the ACM Conference on Computer and\n  Communications Security (CCS) 2016", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CR cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In order to limit the damage of malware on Mac OS X and iOS, Apple uses\nsandboxing, a kernel-level security layer that provides tight constraints for\nsystem calls. Particularly used for Apple iOS, sandboxing prevents apps from\nexecuting potentially dangerous actions, by defining rules in a sandbox\nprofile. Investigating Apple's built-in sandbox profiles is difficult as they\nare compiled and stored in binary format. We present SandBlaster, a software\nbundle that is able to reverse/decompile Apple binary sandbox profiles to their\noriginal human readable SBPL (SandBox Profile Language) format. We use\nSandBlaster to reverse all built-in Apple iOS binary sandbox profiles for iOS\n7, 8 and 9. Our tool is, to the best of our knowledge, the first to provide a\nfull reversing of the Apple sandbox, shedding light into the inner workings of\nApple sandbox profiles and providing essential support for security researchers\nand professionals interested in Apple security mechanisms.\n", "versions": [{"version": "v1", "created": "Mon, 15 Aug 2016 15:26:22 GMT"}], "update_date": "2016-08-16", "authors_parsed": [["Deaconescu", "R\u0103zvan", ""], ["Deshotels", "Luke", ""], ["Bucicoiu", "Mihai", ""], ["Enck", "William", ""], ["Davi", "Lucas", ""], ["Sadeghi", "Ahmad-Reza", ""]]}, {"id": "1608.05654", "submitter": "Min Hong Yun", "authors": "Min Hong Yun, Songtao He, Lin Zhong", "title": "POLYPATH: Supporting Multiple Tradeoffs for Interaction Latency", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Modern mobile systems use a single input-to-display path to serve all\napplications. In meeting the visual goals of all applications, the path has a\nlatency inadequate for many important interactions. To accommodate the\ndifferent latency requirements and visual constraints by different\ninteractions, we present POLYPATH, a system design in which application\ndevelopers (and users) can choose from multiple path designs for their\napplication at any time. Because a POLYPATH system asks for two or more path\ndesigns, we present a novel fast path design, called Presto. Presto reduces\nlatency by judiciously allowing frame drops and tearing.\n  We report an Android 5-based prototype of POLYPATH with two path designs:\nAndroid legacy and Presto. Using this prototype, we quantify the effectiveness,\noverhead, and user experience of POLYPATH, especially Presto, through both\nobjective measurements and subjective user assessment. We show that Presto\nreduces the latency of legacy touchscreen drawing applications by almost half;\nand more importantly, this reduction is orthogonal to that of other popular\napproaches and is achieved without any user-noticeable negative visual effect.\nWhen combined with touch prediction, Presto is able to reduce the touch latency\nbelow 10 ms, a remarkable achievement without any hardware support.\n", "versions": [{"version": "v1", "created": "Fri, 19 Aug 2016 16:23:24 GMT"}], "update_date": "2016-08-22", "authors_parsed": [["Yun", "Min Hong", ""], ["He", "Songtao", ""], ["Zhong", "Lin", ""]]}, {"id": "1608.08051", "submitter": "Zhiyong Shan", "authors": "Zhiyong Shan, Xin Wang, Tzi-cker Chiueh, Rajiv Bagai", "title": "Duplication of Windows Services", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  OS-level virtualization techniques virtualize system resources at the system\ncall interface, has the distinct advantage of smaller run-time resource\nrequirements as compared to HAL-level virtualization techniques, and thus forms\nan important building block for virtualizing parallel and distributed\napplications such as a HPC clusters. Because the Windows operating system puts\ncertain critical functionalities in privileged user-level system service\nprocesses, a complete OS-level virtualization solution for the Windows platform\nrequires duplication of such Windows service as Remote Procedure Call Server\nService (RPCSS). As many implementation details of the Windows system services\nare proprietary, duplicating Windows system services becomes the key technical\nchallenge for virtualizing the Windows platform at the OS level. Moreover, as a\ncore component of cloud computing, IIS web server-related services need to be\nduplicated in containers (i.e., OS-level virtual machines), but so far there is\nno such scheme. In this paper, we thoroughly identify all issues that affect\nservice duplication, and then propose the first known methodology to\nsystematically duplicate both system and ordinary Windows services. Our\nexperiments show that the methodology can duplicate a set of system and\nordinary services on different versions of Windows OS.\n", "versions": [{"version": "v1", "created": "Sat, 13 Aug 2016 22:14:47 GMT"}, {"version": "v2", "created": "Sat, 3 Sep 2016 22:46:29 GMT"}, {"version": "v3", "created": "Thu, 9 Apr 2020 16:32:50 GMT"}], "update_date": "2020-04-10", "authors_parsed": [["Shan", "Zhiyong", ""], ["Wang", "Xin", ""], ["Chiueh", "Tzi-cker", ""], ["Bagai", "Rajiv", ""]]}]