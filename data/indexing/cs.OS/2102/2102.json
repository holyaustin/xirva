[{"id": "2102.03863", "submitter": "David Dice", "authors": "Dave Dice and Alex Kogan", "title": "Hemlock : Compact and Scalable Mutual Exclusion", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.OS", "license": "http://creativecommons.org/licenses/by-nc-nd/4.0/", "abstract": "  We present Hemlock, a novel mutual exclusion locking algorithm that is\nextremely compact, requiring just one word per thread plus one word per lock,\nbut which still provides local spinning in most circumstances, high throughput\nunder contention, and low latency in the uncontended case. Hemlock is\ncontext-free -- not requiring any information to be passed from a lock\noperation to the corresponding unlock -- and FIFO. The performance of Hemlock\nis competitive with and often better than the best scalable spin locks.\n", "versions": [{"version": "v1", "created": "Sun, 7 Feb 2021 17:46:25 GMT"}, {"version": "v2", "created": "Thu, 18 Feb 2021 16:35:09 GMT"}, {"version": "v3", "created": "Thu, 13 May 2021 20:02:13 GMT"}], "update_date": "2021-05-17", "authors_parsed": [["Dice", "Dave", ""], ["Kogan", "Alex", ""]]}, {"id": "2102.06972", "submitter": "David Barrera", "authors": "William Findlay, David Barrera, Anil Somayaji", "title": "BPFContain: Fixing the Soft Underbelly of Container Security", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CR cs.OS", "license": "http://creativecommons.org/licenses/by-nc-sa/4.0/", "abstract": "  Linux containers currently provide limited isolation guarantees. While\ncontainers separate namespaces and partition resources, the patchwork of\nmechanisms used to ensure separation cannot guarantee consistent security\nsemantics. Even worse, attempts to ensure complete coverage results in a\nmishmash of policies that are difficult to understand or audit. Here we present\nBPFContain, a new container confinement mechanism designed to integrate with\nexisting container management systems. BPFContain combines a simple yet\nflexible policy language with an eBPF-based implementation that allows for\ndeployment on virtually any Linux system running a recent kernel. In this\npaper, we present BPFContain's policy language, describe its current\nimplementation as integrated into docker, and present benchmarks comparing it\nwith current container confinement technologies.\n", "versions": [{"version": "v1", "created": "Sat, 13 Feb 2021 18:12:34 GMT"}], "update_date": "2021-02-16", "authors_parsed": [["Findlay", "William", ""], ["Barrera", "David", ""], ["Somayaji", "Anil", ""]]}, {"id": "2102.09980", "submitter": "Maximilian Bachl", "authors": "Maximilian Bachl, Joachim Fabini, Tanja Zseby", "title": "A flow-based IDS using Machine Learning in eBPF", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CR cs.LG cs.NI cs.OS", "license": "http://creativecommons.org/publicdomain/zero/1.0/", "abstract": "  eBPF is a new technology which allows dynamically loading pieces of code into\nthe Linux kernel. It can greatly speed up networking since it enables the\nkernel to process certain packets without the involvement of a userspace\nprogram. So far eBPF has been used for simple packet filtering applications\nsuch as firewalls or Denial of Service protection. We show that it is possible\nto develop a flow based network intrusion detection system based on machine\nlearning entirely in eBPF. Our solution uses a decision tree and decides for\neach packet whether it is malicious or not, considering the entire previous\ncontext of the network flow. We achieve a performance increase of over 20\\%\ncompared to the same solution implemented as a userspace program.\n", "versions": [{"version": "v1", "created": "Fri, 19 Feb 2021 15:20:51 GMT"}], "update_date": "2021-02-22", "authors_parsed": [["Bachl", "Maximilian", ""], ["Fabini", "Joachim", ""], ["Zseby", "Tanja", ""]]}, {"id": "2102.10269", "submitter": "Zhi Zhang", "authors": "Zhi Zhang, Yueqiang Cheng, Minghua Wang, Wei He, Wenhao Wang, Nepal\n  Surya, Yansong Gao, Kang Li, Zhe Wang, Chenggang Wu", "title": "SoftTRR: Protect Page Tables Against RowHammer Attacks using\n  Software-only Target Row Refresh", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CR cs.OS cs.SE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Rowhammer attacks that corrupt level-1 page tables to gain kernel privilege\nare the most detrimental to system security and hard to mitigate. However,\nrecently proposed software-only mitigations are not effective against such\nkernel privilege escalation attacks. In this paper, we propose an effective and\npractical software-only defense, called SoftTRR, to protect page tables from\nall existing rowhammer attacks on x86. The key idea of SoftTRR is to refresh\nthe rows occupied by page tables when a suspicious rowhammer activity is\ndetected. SoftTRR is motivated by DRAM-chip-based target row refresh (ChipTRR)\nbut eliminates its main security limitation (i.e., ChipTRR tracks a limited\nnumber of rows and thus can be bypassed by many-sided hammer). Specifically,\nSoftTRR protects an unlimited number of page tables by tracking memory accesses\nto the rows that are in close proximity to page-table rows and refreshing the\npage-table rows once the tracked access count exceeds a pre-defined threshold.\nWe implement a prototype of SoftTRR as a loadable kernel module, and evaluate\nits security effectiveness, performance overhead, and memory consumption. The\nexperimental results show that SoftTRR protects page tables from real-world\nrowhammer attacks and incurs small performance overhead as well as memory cost.\n", "versions": [{"version": "v1", "created": "Sat, 20 Feb 2021 06:20:33 GMT"}], "update_date": "2021-02-23", "authors_parsed": [["Zhang", "Zhi", ""], ["Cheng", "Yueqiang", ""], ["Wang", "Minghua", ""], ["He", "Wei", ""], ["Wang", "Wenhao", ""], ["Surya", "Nepal", ""], ["Gao", "Yansong", ""], ["Li", "Kang", ""], ["Wang", "Zhe", ""], ["Wu", "Chenggang", ""]]}, {"id": "2102.11198", "submitter": "Ruslan Savchenko", "authors": "Ruslan Savchenko", "title": "Reading from External Memory", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.OS cs.PF", "license": "http://creativecommons.org/licenses/by-nc-nd/4.0/", "abstract": "  Modern external memory is represented by several device classes. At present,\nHDD, SATA SSD and NVMe SSD are widely used. Recently ultra-low latency SSD such\nas Intel Optane became available on the market. Each of these types exhibits\nit's own pattern for throughput, latency and parallelism. To achieve the\nhighest performance one has to pick an appropriate I/O interface provided by\nthe operating system. In this work we present a detailed overview and\nevaluation of modern storage reading performance with regard to available Linux\nsynchronous and asynchronous interfaces. While throughout this work we aim for\nthe highest throughput we also measure latency and CPU usage. We provide this\nreport in hope the detailed results could be interesting to both researchers\nand practitioners.\n", "versions": [{"version": "v1", "created": "Mon, 22 Feb 2021 17:24:08 GMT"}], "update_date": "2021-02-23", "authors_parsed": [["Savchenko", "Ruslan", ""]]}, {"id": "2102.12892", "submitter": "Marc Brooker", "authors": "Marc Brooker and Adrian Costin Catangiu and Mike Danilov and Alexander\n  Graf and Colm MacCarthaigh and Andrei Sandu", "title": "Restoring Uniqueness in MicroVM Snapshots", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CR cs.DC cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Code initialization -- the step of loading code, executing static code,\nfilling caches, and forming re-used connections -- tends to dominate cold-start\ntime in serverless compute systems such as AWS Lambda. Post-initialization\nmemory snapshots, cloned and restored on start, have emerged as a viable\nsolution to this problem, with incremental snapshot and fast restore support in\nVMMs like Firecracker.\n  Saving memory introduces the challenge of managing high-value memory\ncontents, such as cryptographic secrets. Cloning introduces the challenge of\nrestoring the uniqueness of the VMs, to allow them to do unique things like\ngenerate UUIDs, secrets, and nonces. This paper examines solutions to these\nproblems in the every microsecond counts context of serverless cold-start, and\ndiscusses the state-of-the-art of available solutions. We present two new\ninterfaces aimed at solving this problem -- MADV\\_WIPEONSUSPEND and SysGenId --\nand compare them to alternative solutions.\n", "versions": [{"version": "v1", "created": "Thu, 4 Feb 2021 21:56:28 GMT"}], "update_date": "2021-02-26", "authors_parsed": [["Brooker", "Marc", ""], ["Catangiu", "Adrian Costin", ""], ["Danilov", "Mike", ""], ["Graf", "Alexander", ""], ["MacCarthaigh", "Colm", ""], ["Sandu", "Andrei", ""]]}, {"id": "2102.12922", "submitter": "Asaf Cidon", "authors": "Yu Jian Wu, Hongyi Wang, Yuhong Zhong, Asaf Cidon, Ryan Stutsman, Amy\n  Tai, Junfeng Yang", "title": "BPF for storage: an exokernel-inspired approach", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.DB", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The overhead of the kernel storage path accounts for half of the access\nlatency for new NVMe storage devices. We explore using BPF to reduce this\noverhead, by injecting user-defined functions deep in the kernel's I/O\nprocessing stack. When issuing a series of dependent I/O requests, this\napproach can increase IOPS by over 2.5$\\times$ and cut latency by half, by\nbypassing kernel layers and avoiding user-kernel boundary crossings. However,\nwe must avoid losing important properties when bypassing the file system and\nblock layer such as the safety guarantees of the file system and translation\nbetween physical blocks addresses and file offsets. We sketch potential\nsolutions to these problems, inspired by exokernel file systems from the late\n90s, whose time, we believe, has finally come!\n", "versions": [{"version": "v1", "created": "Thu, 25 Feb 2021 15:22:38 GMT"}], "update_date": "2021-02-26", "authors_parsed": [["Wu", "Yu Jian", ""], ["Wang", "Hongyi", ""], ["Zhong", "Yuhong", ""], ["Cidon", "Asaf", ""], ["Stutsman", "Ryan", ""], ["Tai", "Amy", ""], ["Yang", "Junfeng", ""]]}]