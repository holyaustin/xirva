[{"id": "1910.01558", "submitter": "James Cadden", "authors": "James Cadden, Thomas Unger, Yara Awad, Han Dong, Orran Krieger,\n  Jonathan Appavoo", "title": "SEUSS: Rapid serverless deployment using environment snapshots", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Modern FaaS systems perform well in the case of repeat executions when\nfunction working sets stay small. However, these platforms are less effective\nwhen applied to more complex, large-scale and dynamic workloads. In this paper,\nwe introduce SEUSS (serverless execution via unikernel snapshot stacks), a new\nsystem-level approach for rapidly deploying serverless functions. Through our\napproach, we demonstrate orders of magnitude improvements in function start\ntimes and cacheability, which improves common re-execution paths while also\nunlocking previously-unsupported large-scale bursty workloads.\n", "versions": [{"version": "v1", "created": "Thu, 3 Oct 2019 15:48:44 GMT"}], "update_date": "2019-10-04", "authors_parsed": [["Cadden", "James", ""], ["Unger", "Thomas", ""], ["Awad", "Yara", ""], ["Dong", "Han", ""], ["Krieger", "Orran", ""], ["Appavoo", "Jonathan", ""]]}, {"id": "1910.01642", "submitter": "Shreshth Tuli", "authors": "Shreshth Tuli, Shikhar Tuli, Udit Jain, Rajkumar Buyya", "title": "APEX: Adaptive Ext4 File System for Enhanced Data Recoverability in Edge\n  Devices", "comments": null, "journal-ref": "Proceedings of the 11th IEEE International Conference on Cloud\n  Computing, Sydney, Australia, December 11-13, 2019", "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Recently Edge Computing paradigm has gained significant popularity both in\nindustry and academia. With its increased usage in real-life scenarios,\nsecurity, privacy and integrity of data in such environments have become\ncritical. Malicious deletion of mission-critical data due to ransomware,\ntrojans and viruses has been a huge menace and recovering such lost data is an\nactive field of research. As most of Edge computing devices have compute and\nstorage limitations, difficult constraints arise in providing an optimal scheme\nfor data protection. These devices mostly use Linux/Unix based operating\nsystems. Hence, this work focuses on extending the Ext4 file system to APEX\n(Adaptive Ext4): a file system based on novel on-the-fly learning model that\nprovides an Adaptive Recover-ability Aware file allocation platform for\nefficient post-deletion data recovery and therefore maintaining data integrity.\nOur recovery model and its lightweight implementation allow significant\nimprovement in recover-ability of lost data with lower compute, space, time,\nand cost overheads compared to other methods. We demonstrate the effectiveness\nof APEX through a case study of overwriting surveillance videos by CryPy\nmalware on Raspberry-Pi based Edge deployment and show 678% and 32% higher\nrecovery than Ext4 and current state-of-the-art File Systems. We also evaluate\nthe overhead characteristics and experimentally show that they are lower than\nother related works.\n", "versions": [{"version": "v1", "created": "Thu, 3 Oct 2019 09:28:35 GMT"}], "update_date": "2019-10-07", "authors_parsed": [["Tuli", "Shreshth", ""], ["Tuli", "Shikhar", ""], ["Jain", "Udit", ""], ["Buyya", "Rajkumar", ""]]}, {"id": "1910.04949", "submitter": "Wei-Ming Chen", "authors": "Wei-Ming Chen, Tei-Wei-Kuo, and Pi-Cheng Hsiu", "title": "Enabling Failure-resilient Intermittent Systems Without Runtime\n  Checkpointing", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Self-powered intermittent systems typically adopt runtime checkpointing as a\nmeans to accumulate computation progress across power cycles and recover system\nstatus from power failures. However, existing approaches based on the\ncheckpointing paradigm normally require system suspension and/or logging at\nruntime. This paper presents a design which overcomes the drawbacks of\ncheckpointing-based approaches, to enable failure-resilient intermittent\nsystems. Our design allows accumulative execution and instant system recovery\nunder frequent power failures while enforcing the serializability of concurrent\ntask execution to improve computation progress and ensuring data consistency\nwithout system suspension during runtime, by leveraging the characteristics of\ndata accessed in hybrid memory. We integrated the design into FreeRTOS running\non a Texas Instruments device. Experimental results show that our design can\nstill accumulate progress when the power source is too weak for\ncheckpointing-based approaches to make progress, and improves the computation\nprogress by up to 43% under a relatively strong power source, while reducing\nthe recovery time by at least 90%.\n", "versions": [{"version": "v1", "created": "Fri, 11 Oct 2019 02:45:20 GMT"}], "update_date": "2019-10-14", "authors_parsed": [["Chen", "Wei-Ming", ""], ["Tei-Wei-Kuo", "", ""], ["Hsiu", "Pi-Cheng", ""]]}, {"id": "1910.05106", "submitter": "Simon Peter", "authors": "Thomas E. Anderson, Marco Canini, Jongyul Kim, Dejan Kosti\\'c,\n  Youngjin Kwon, Simon Peter, Waleed Reda, Henry N. Schuh, Emmett Witchel", "title": "Assise: Performance and Availability via NVM Colocation in a Distributed\n  File System", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The adoption of very low latency persistent memory modules (PMMs) upends the\nlong-established model of disaggregated file system access. Instead, by\ncolocating computation and PMM storage, we can provide applications much higher\nI/O performance, sub-second application failover, and strong consistency. To\ndemonstrate this, we built the Assise distributed file system, based on a\npersistent, replicated coherence protocol for managing a set of\nserver-colocated PMMs as a fast, crash-recoverable cache between applications\nand slower disaggregated storage, such as SSDs. Unlike disaggregated file\nsystems, Assise maximizes locality for all file IO by carrying out IO on\ncolocated PMM whenever possible and minimizes coherence overhead by maintaining\nconsistency at IO operation granularity, rather than at fixed block sizes.\n  We compare Assise to Ceph/Bluestore, NFS, and Octopus on a cluster with Intel\nOptane DC PMMs and SSDs for common cloud applications and benchmarks, such as\nLevelDB, Postfix, and FileBench. We find that Assise improves write latency up\nto 22x, throughput up to 56x, fail-over time up to 103x, and scales up to 6x\nbetter than its counterparts, while providing stronger consistency semantics.\nAssise promises to beat the MinuteSort world record by 1.5x.\n", "versions": [{"version": "v1", "created": "Mon, 7 Oct 2019 02:13:19 GMT"}, {"version": "v2", "created": "Tue, 2 Jun 2020 02:54:13 GMT"}], "update_date": "2020-06-03", "authors_parsed": [["Anderson", "Thomas E.", ""], ["Canini", "Marco", ""], ["Kim", "Jongyul", ""], ["Kosti\u0107", "Dejan", ""], ["Kwon", "Youngjin", ""], ["Peter", "Simon", ""], ["Reda", "Waleed", ""], ["Schuh", "Henry N.", ""], ["Witchel", "Emmett", ""]]}, {"id": "1910.05398", "submitter": "Jayneel Gandhi", "authors": "Reto Achermann, Ashish Panwar, Abhishek Bhattacharjee, Timothy Roscoe,\n  Jayneel Gandhi", "title": "Mitosis: Transparently Self-Replicating Page-Tables for Large-Memory\n  Machines", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.AR cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Multi-socket machines with 1-100 TBs of physical memory are becoming\nprevalent. Applications running on multi-socket machines suffer non-uniform\nbandwidth and latency when accessing physical memory. Decades of research have\nfocused on data allocation and placement policies in NUMA settings, but there\nhave been no studies on the question of how to place page-tables amongst\nsockets. We make the case for explicit page-table allocation policies and show\nthat page-table placement is becoming crucial to overall performance. We\npropose Mitosis to mitigate NUMA effects on page-table walks by transparently\nreplicating and migrating page-tables across sockets without application\nchanges. This reduces the frequency of accesses to remote NUMA nodes when\nperforming page-table walks. Mitosis uses two components: (i) a mechanism to\nenable efficient page-table replication and migration; and (ii) policies for\nprocesses to efficiently manage and control page-table replication and\nmigration. We implement Mitosis in Linux and evaluate its benefits on real\nhardware. Mitosis improves performance for large-scale multi-socket workloads\nby up to 1.34x by replicating page-tables across sockets. Moreover, it improves\nperformance by up to 3.24x in cases when the OS migrates a process across\nsockets by enabling cross-socket page-table migration.\n", "versions": [{"version": "v1", "created": "Fri, 11 Oct 2019 20:26:14 GMT"}, {"version": "v2", "created": "Fri, 8 Nov 2019 06:36:11 GMT"}], "update_date": "2019-11-11", "authors_parsed": [["Achermann", "Reto", ""], ["Panwar", "Ashish", ""], ["Bhattacharjee", "Abhishek", ""], ["Roscoe", "Timothy", ""], ["Gandhi", "Jayneel", ""]]}, {"id": "1910.09277", "submitter": "Zhi Zhang", "authors": "Zhi Zhang, Yueqiang Cheng", "title": "PiBooster: A Light-Weight Approach to Performance Improvements in Page\n  Table Management for Paravirtual Virtual-Machines", "comments": null, "journal-ref": null, "doi": "10.1109/CLOUD.2016.0074", "report-no": null, "categories": "cs.OS cs.CR cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In paravirtualization, the page table management components of the guest\noperating systems are properly patched for the security guarantees of the\nhypervisor. However, none of them pay enough attentions to the performance\nimprovements, which results in two noticeable performance issues. First, such\nsecurity patches exacerbate the problem that the execution paths of the guest\npage table (de)allocations become extremely long, which would consequently\nincrease the latencies of process creations and exits. Second, the patches\nintroduce many additional IOTLB flushes, leading to extra IOTLB misses, and the\nmisses would have negative impacts on I/O performance of all peripheral\ndevices. In this paper, we propose PiBooster, a novel lightweight approach for\nimproving the performance in page table management. First, PiBooster shortens\nthe execution paths of the page table (de)allocations by the PiBooster cache,\nwhich maintains dedicated buffers for serving page table (de)allocations.\nSecond, PiBooster eliminates the additional IOTLB misses with a fine-grained\nvalidation scheme, which performs page table and DMA validations separately,\ninstead of doing both together. We implement a prototype on Xen with Linux as\nthe guest kernel. We do small modifications on Xen (166 SLoC) and Linux kernel\n(350 SLoC). We evaluate the I/O performance in both micro and macro ways. The\nmicro experiment results indicate that PiBooster is able to completely\neliminate the additional IOTLB flushes in the workload-stable environments, and\neffectively reduces (de)allocation time of the page table by 47% on average.\nThe macro benchmarks show that the latencies of the process creations and exits\nare expectedly reduced by 16% on average. Moreover, the SPECINT,lmbench and\nnetperf results indicate that PiBooster has no negative performance impacts on\nCPU computation, network I/O, and disk I/O.\n", "versions": [{"version": "v1", "created": "Mon, 21 Oct 2019 11:59:01 GMT"}], "update_date": "2019-10-22", "authors_parsed": [["Zhang", "Zhi", ""], ["Cheng", "Yueqiang", ""]]}, {"id": "1910.13056", "submitter": "Sebastian Angel", "authors": "Sebastian Angel, Mihir Nanavati, Siddhartha Sen", "title": "Disaggregation and the Application", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper examines disaggregated data center architectures from the\nperspective of the applications that would run on these data centers, and\nchallenges the abstractions that have been proposed to date. In particular, we\nargue that operating systems for disaggregated data centers should not abstract\ndisaggregated hardware resources, such as memory, compute, and storage away\nfrom applications, but should instead give them information about, and control\nover, these resources. To this end, we propose additional OS abstractions and\ninterfaces for disaggregation and show how they can improve data transfer in\ndata parallel frameworks and speed up failure recovery in replicated,\nfault-tolerant applications. This paper studies the technical challenges in\nproviding applications with this additional functionality and advances several\npreliminary proposals to overcome these challenges.\n", "versions": [{"version": "v1", "created": "Tue, 29 Oct 2019 02:56:07 GMT"}], "update_date": "2019-10-30", "authors_parsed": [["Angel", "Sebastian", ""], ["Nanavati", "Mihir", ""], ["Sen", "Siddhartha", ""]]}, {"id": "1910.14546", "submitter": "Ajay Rajan", "authors": "Bharath Honnesara Sreenivasa, Ajay Rajan", "title": "Debian Package usage profiler for Debian based Systems", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PF cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The embedded devices of today due to their CPU, RAM capabilities can run\nvarious Linux distributions but in most cases they are different from general\npurpose distributions as they are usually lighter and specific to the needs of\nthat particular system. In this project, we share the problems associated in\nadopting a fully heavy-weight Debian based system like Ubuntu in\nembedded/automotive platforms and provide solutions to optimize them to\nidentify unused/redundant content in the system. This helps developer to reduce\nthe hefty general purpose distribution to an application specific distribution.\nThe solution involves collecting usage data in the system in a non-invasive\nmanner (to avoid any drop in performance) to suggest users the redundant,\nunused parts of the system that can be safely removed without impacting the\nsystem functionality.\n", "versions": [{"version": "v1", "created": "Thu, 31 Oct 2019 15:47:35 GMT"}], "update_date": "2019-11-01", "authors_parsed": [["Sreenivasa", "Bharath Honnesara", ""], ["Rajan", "Ajay", ""]]}]