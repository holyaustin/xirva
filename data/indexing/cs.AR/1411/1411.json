[{"id": "1411.0863", "submitter": "Madhav Desai", "authors": "Madhav Desai", "title": "Inner Loop Optimizations in Mapping Single Threaded Programs to Hardware", "comments": "8 pages double column", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.AR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In the context of mapping high-level algorithms to hardware, we consider the\nbasic problem of generating an efficient hardware implementation of a single\nthreaded program, in particular, that of an inner loop. We describe a\ncontrol-flow mechanism which provides dynamic loop-pipelining capability in\nhardware, so that multiple iterations of an arbitrary inner loop can be made\nsimultaneously active in the generated hardware, We study the impact of this\nloop-pipelining scheme in conjunction with source-level loop-unrolling. In\nparticular, we apply this technique to some common loop kernels: regular\nkernels such as the fast-fourier transform and matrix multiplication, as well\nas an example of an inner loop whose body has branching. The resulting\nresulting hardware descriptions are synthesized to an FPGA target, and then\ncharacterized for performance and resource utilization. We observe that the use\nof dynamic loop-pipelining mechanism alone typically results in a significant\nimprovements in the performance of the hardware. If the loop is statically\nunrolled and if loop-pipelining is applied to the unrolled program, then the\nperformance improvement is still substantial. When dynamic loop pipelining is\nused in conjunction with static loop unrolling, the improvement in performance\nranges from 6X to 20X (in terms of number of clock cycles needed for the\ncomputation) across the loop kernels that we have studied. These optimizations\ndo have a hardware overhead, but, in spite of this, we observe that the joint\nuse of these loop optimizations not only improves performance, but also the\nperformance/cost ratio of the resulting hardware.\n", "versions": [{"version": "v1", "created": "Tue, 4 Nov 2014 11:26:58 GMT"}], "update_date": "2014-11-05", "authors_parsed": [["Desai", "Madhav", ""]]}, {"id": "1411.2088", "submitter": "Ali Ghorbani", "authors": "Ali Ghorbani and Ghazaleh Ghorbani", "title": "Energy Efficient Full Adder Cell Design With Using Carbon Nanotube Field\n  Effect Transistors In 32 Nanometer Technology", "comments": "8 pages, 6 figures, International Journal of VLSI design &\n  Communication Systems (VLSICS) Vol.5, No.5, October 2014", "journal-ref": null, "doi": "10.5121/vlsic.2014.5501", "report-no": null, "categories": "cs.AR", "license": "http://creativecommons.org/licenses/by/3.0/", "abstract": "  Full Adder is one of the critical parts of logical and arithmetic units. So,\npresenting a low power full adder cell reduces the power consumption of the\nentire circuit. Also, using Nano-scale transistors, because of their unique\ncharacteristics will save energy consumption and decrease the chip area. In\nthis paper we presented a low power full adder cell by using carbon nanotube\nfield effect transistors (CNTFETs). Simulation results were carried out using\nHSPICE based on the CNTFET model in 32 nanometer technology in Different values\nof temperature and VDD.\n", "versions": [{"version": "v1", "created": "Sat, 8 Nov 2014 05:57:42 GMT"}], "update_date": "2014-11-11", "authors_parsed": [["Ghorbani", "Ali", ""], ["Ghorbani", "Ghazaleh", ""]]}, {"id": "1411.2212", "submitter": "Mehdi Masoudi", "authors": "Mehdi Masoudi, Milad Mazaheri, Aliakbar Rezaei and Keivan Navi", "title": "Designing high-speed, low-power full adder cells based on carbon\n  nanotube technology", "comments": "13 Pages, 13 Figures, 2 Tables", "journal-ref": null, "doi": "10.5121/vlsic.2014.5503", "report-no": null, "categories": "cs.AR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This article presents novel high speed and low power full adder cells based\non carbon nanotube field effect transistor (CNFET). Four full adder cells are\nproposed in this article. First one (named CN9P4G) and second one (CN9P8GBUFF)\nutilizes 13 and 17 CNFETs respectively. Third design that we named CN10PFS uses\nonly 10 transistors and is full swing. Finally, CN8P10G uses 18 transistors and\ndivided into two modules, causing Sum and Cout signals are produced in a\nparallel manner. All inputs have been used straight, without inverting. These\ndesigns also used the special feature of CNFET that is controlling the\nthreshold voltage by adjusting the diameters of CNFETs to achieve the best\nperformance and right voltage levels. All simulation performed using Synopsys\nHSPICE software and the proposed designs are compared to other classical and\nmodern CMOS and CNFET-based full adder cells in terms of delay, power\nconsumption and power delay product.\n", "versions": [{"version": "v1", "created": "Sun, 9 Nov 2014 09:26:43 GMT"}], "update_date": "2014-11-11", "authors_parsed": [["Masoudi", "Mehdi", ""], ["Mazaheri", "Milad", ""], ["Rezaei", "Aliakbar", ""], ["Navi", "Keivan", ""]]}, {"id": "1411.2917", "submitter": "Sophie Spirkl", "authors": "Stephan Held and Sophie Spirkl", "title": "Fast Prefix Adders for Non-Uniform Input Arrival Times", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.AR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We consider the problem of constructing fast and small parallel prefix adders\nfor non-uniform input arrival times. This problem arises whenever the adder is\nembedded into a more complex circuit, e. g. a multiplier.\n  Most previous results are based on representing binary carry-propagate adders\nas so-called parallel prefix graphs, in which pairs of generate and propagate\nsignals are combined using complex gates known as prefix gates. Adders\nconstructed in this model usually minimize the delay in terms of these prefix\ngates. However, the delay in terms of logic gates can be worse by a factor of\ntwo.\n  In contrast, we aim to minimize the delay of the underlying logic circuit\ndirectly. We prove a lower bound on the delay of a carry bit computation\nachievable by any prefix carry bit circuit and develop an algorithm that\ncomputes a prefix carry bit circuit with optimum delay up to a small additive\nconstant. Furthermore, we use this algorithm to construct a small parallel\nprefix adder.\n  Compared to existing algorithms we simultaneously improve the delay and size\nguarantee, as well as the running time for constructing prefix carry bit and\nadder circuits.\n", "versions": [{"version": "v1", "created": "Tue, 11 Nov 2014 18:52:26 GMT"}], "update_date": "2014-11-12", "authors_parsed": [["Held", "Stephan", ""], ["Spirkl", "Sophie", ""]]}, {"id": "1411.3492", "submitter": "Marcelo Berejuck", "authors": "Marcelo Daniel Berejuck and Ant\\^onio Augusto Fr\\\"ohlich", "title": "Evaluation of silicon consumption for a connectionless Network-on-Chip", "comments": "11 pages, 9 figures and 3 tables", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.AR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present the design and evaluation of a predictable Network-on-Chip (NoC)\nto interconnect processing units running multimedia applications with\nvariable-bit-rate. The design is based on a connectionless strategy in which\nflits from different communication flows are interleaved in the same\ncommunication channel between routers. Each flit carries routing information\nused by routers to perform arbitration and scheduling of the corresponding\noutput communication channel. Analytic comparisons show that our approach keeps\naverage latency lower than a network based on resource reservation, when both\nnetworks are working over 80% of offered load. We also evaluate the proposed\nNoC on FPGA and ASIC technologies to understand the trade-off due to our\napproach, in terms of silicon consumption.\n", "versions": [{"version": "v1", "created": "Thu, 13 Nov 2014 10:37:18 GMT"}], "update_date": "2014-11-14", "authors_parsed": [["Berejuck", "Marcelo Daniel", ""], ["Fr\u00f6hlich", "Ant\u00f4nio Augusto", ""]]}, {"id": "1411.3929", "submitter": "Nihar Athreyas", "authors": "Nihar Athreyas, Zhiguo Lai, Jai Gupta and Dev Gupta", "title": "Analog Signal Processing Solution for Image Alignment", "comments": "Third International Conference on Advanced Information Technologies &\n  Applications (ICAITA-2014) November 7~8, Dubai, UAE ISBN : 978-1-921987-17-5", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.AR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Imaging and Image sensors is a field that is continuously evolving. There are\nnew products coming into the market every day. Some of these have very severe\nSize, Weight and Power constraints whereas other devices have to handle very\nhigh computational loads. Some require both these conditions to be met\nsimultaneously. Current imaging architectures and digital image processing\nsolutions will not be able to meet these ever increasing demands. There is a\nneed to develop novel imaging architectures and image processing solutions to\naddress these requirements. In this work we propose analog signal processing as\na solution to this problem. The analog processor is not suggested as a\nreplacement to a digital processor but it will be used as an augmentation\ndevice which works in parallel with the digital processor, making the system\nfaster and more efficient. In order to show the merits of analog processing the\nhighly computational Normalized Cross Correlation algorithm is implemented. We\npropose two novel modifications to the algorithm and a new imaging architecture\nwhich, significantly reduces the computation time.\n", "versions": [{"version": "v1", "created": "Fri, 14 Nov 2014 15:07:54 GMT"}], "update_date": "2014-11-17", "authors_parsed": [["Athreyas", "Nihar", ""], ["Lai", "Zhiguo", ""], ["Gupta", "Jai", ""], ["Gupta", "Dev", ""]]}, {"id": "1411.5255", "submitter": "Alex James Dr", "authors": "Alex Pappachen James, Dinesh S. Kumar, Arun Ajayan", "title": "Threshold Logic Computing: Memristive-CMOS Circuits for Fast Fourier\n  Transform and Vedic Multiplication", "comments": "5 Pages, IEEE Transactions on Very Large Scale Integration (VLSI)\n  Systems, 2014", "journal-ref": null, "doi": "10.1109/TVLSI.2014.2371857", "report-no": null, "categories": "cs.ET cs.AR", "license": "http://creativecommons.org/licenses/by-nc-sa/3.0/", "abstract": "  Brain inspired circuits can provide an alternative solution to implement\ncomputing architectures taking advantage of fault tolerance and generalisation\nability of logic gates. In this brief, we advance over the memristive threshold\ncircuit configuration consisting of memristive averaging circuit in combination\nwith operational amplifier and/or CMOS inverters in application to realizing\ncomplex computing circuits. The developed memristive threshold logic gates are\nused for designing FFT and multiplication circuits useful for modern\nmicroprocessors. Overall, the proposed threshold logic outperforms previous\nmemristive-CMOS logic cells on every aspect, however, indicate a lower chip\narea, lower THD, and controllable leakage power, but a higher power dissipation\nwith respect to CMOS logic.\n", "versions": [{"version": "v1", "created": "Wed, 19 Nov 2014 15:36:23 GMT"}], "update_date": "2014-11-20", "authors_parsed": [["James", "Alex Pappachen", ""], ["Kumar", "Dinesh S.", ""], ["Ajayan", "Arun", ""]]}, {"id": "1411.6498", "submitter": "Peter Kornerup", "authors": "Peter Kornerup", "title": "Correction to the 2005 paper: \"Digit Selection for SRT Division and\n  Square Root\"", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.AR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  It has been pointed out by counterexamples in a 2013 paper in the IEEE\nTransactions on Computers [1], that there is an error in the previously ibid.\\\nin 2005 published paper [2] on the construction of valid digit selection tables\nfor SRT type division and square root algorithms. The error has been corrected,\nand new results found on selection constants for maximally redundant digit\nsets.\n", "versions": [{"version": "v1", "created": "Mon, 24 Nov 2014 16:00:47 GMT"}], "update_date": "2014-11-25", "authors_parsed": [["Kornerup", "Peter", ""]]}]