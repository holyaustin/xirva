[{"id": "1508.06056", "submitter": "Tanmay Biswas", "authors": "Tanmay Biswas, Sudhindu Bikash Mandal, Debasree Saha, Amlan\n  Chakrabarti", "title": "A Novel Reconfigurable Hardware Design for Speech Enhancement Based on\n  Multi-Band Spectral Subtraction Involving Magnitude and Phase Components", "comments": "Yet to be published (manuscript)", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.SD cs.AR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper proposes an efficient reconfigurable hardware design for speech\nenhancement based on multi band spectral subtraction algorithm and involving\nboth magnitude and phase components. Our proposed design is novel as it\nestimates environmental noise from speech adaptively utilizing both magnitude\nand phase components of the speech spectrum. We performed multi-band spectrum\nsubtraction by dividing the noisy speech spectrum into different non-uniform\nfrequency bands having varying signal to noise ratio (SNR) and subtracting the\nestimated noise from each of these frequency bands. This results to the\nelimination of noise from both high SNR and low SNR signal components for all\nthe frequency bands. We have coined our proposed speech enhancement technique\nas Multi Band Magnitude Phase Spectral Subtraction (MBMPSS). The magnitude and\nphase operations are executed concurrently exploiting the parallel logic blocks\nof Field Programmable Gate Array (FPGA), thus increasing the throughput of the\nsystem to a great extent. We have implemented our design on Spartan6 Lx45 FPGA\nand presented the implementation result in terms of resource utilization and\ndelay information for the different blocks of our design. To the best of our\nbest knowledge, this is a new type of hardware design for speech enhancement\napplication and also a first of its kind implementation on reconfigurable\nhardware. We have used benchmark audio data for the evaluation of the proposed\nhardware and the experimental results show that our hardware shows a better SNR\nvalue compared to the existing state of the art research works.\n", "versions": [{"version": "v1", "created": "Tue, 25 Aug 2015 08:02:38 GMT"}], "update_date": "2015-08-26", "authors_parsed": [["Biswas", "Tanmay", ""], ["Mandal", "Sudhindu Bikash", ""], ["Saha", "Debasree", ""], ["Chakrabarti", "Amlan", ""]]}, {"id": "1508.06320", "submitter": "Frank Hannig", "authors": "Frank Hannig, Dirk Koch, Daniel Ziener", "title": "Proceedings of the Second International Workshop on FPGAs for Software\n  Programmers (FSP 2015)", "comments": "Website of the workshop: https://www12.cs.fau.de/ws/fsp2015/", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.AR cs.DC cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This volume contains the papers accepted at the Second International Workshop\non FPGAs for Software Programmers (FSP 2015), held in London, United Kingdom,\nSeptember 1st, 2015. FSP 2015 was co-located with the International Conference\non Field Programmable Logic and Applications (FPL).\n", "versions": [{"version": "v1", "created": "Tue, 25 Aug 2015 22:17:22 GMT"}], "update_date": "2015-08-27", "authors_parsed": [["Hannig", "Frank", ""], ["Koch", "Dirk", ""], ["Ziener", "Daniel", ""]]}, {"id": "1508.06805", "submitter": "Jeffrey Goeders", "authors": "Jeffrey Goeders, Steven J. E. Wilton", "title": "Allowing Software Developers to Debug HLS Hardware", "comments": "Presented at Second International Workshop on FPGAs for Software\n  Programmers (FSP 2015) (arXiv:1508.06320)", "journal-ref": null, "doi": null, "report-no": "FSP/2015/01", "categories": "cs.SE cs.AR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  High-Level Synthesis (HLS) is emerging as a mainstream design methodology,\nallowing software designers to enjoy the benefits of a hardware implementation.\nSignificant work has led to effective compilers that produce high-quality\nhardware designs from software specifications. However, in order to fully\nbenefit from the promise of HLS, a complete ecosystem that provides the ability\nto analyze, debug, and optimize designs is essential. This ecosystem has to be\naccessible to software designers. This is challenging, since software\ndevelopers view their designs very differently than how they are physically\nimplemented on-chip. Rather than individual sequential lines of code, the\nimplementation consists of gates operating in parallel across multiple clock\ncycles. In this paper, we report on our efforts to create an ecosystem that\nallows software designers to debug HLS-generated circuits in a familiar manner.\nWe have implemented our ideas in a debug framework that will be included in the\nnext release of the popular LegUp high-level synthesis tool.\n", "versions": [{"version": "v1", "created": "Thu, 27 Aug 2015 11:22:04 GMT"}], "update_date": "2015-08-28", "authors_parsed": [["Goeders", "Jeffrey", ""], ["Wilton", "Steven J. E.", ""]]}, {"id": "1508.06811", "submitter": "Konrad M\\\"oller", "authors": "Konrad M\\\"oller, Martin Kumm, Charles-Frederic M\\\"uller, Peter Zipf", "title": "Model-based Hardware Design for FPGAs using Folding Transformations\n  based on Subcircuits", "comments": "Presented at Second International Workshop on FPGAs for Software\n  Programmers (FSP 2015) (arXiv:1508.06320)", "journal-ref": null, "doi": null, "report-no": "FSP/2015/02", "categories": "cs.AR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present a tool flow and results for a model-based hardware design for\nFPGAs from Simulink descriptions which nicely integrates into existing\nenvironments. While current commercial tools do not exploit some high-level\noptimizations, we investigate the promising approach of using reusable\nsubcircuits for folding transformations to control embedded multiplier usage\nand to optimize logic block usage. We show that resource improvements of up to\n70% compared to the original model are possible, but it is also shown that\nsubcircuit selection is a critical task. While our tool flow provides good\nresults already, the investigation and optimization of subcircuit selection is\nclearly identified as an additional keypoint to extend high-level control on\nlow-level FPGA mapping properties.\n", "versions": [{"version": "v1", "created": "Thu, 27 Aug 2015 11:37:36 GMT"}], "update_date": "2015-08-28", "authors_parsed": [["M\u00f6ller", "Konrad", ""], ["Kumm", "Martin", ""], ["M\u00fcller", "Charles-Frederic", ""], ["Zipf", "Peter", ""]]}, {"id": "1508.06821", "submitter": "Jens Korinth", "authors": "Jens Korinth, David de la Chevallerie, Andreas Koch", "title": "ThreadPoolComposer - An Open-Source FPGA Toolchain for Software\n  Developers", "comments": "Presented at Second International Workshop on FPGAs for Software\n  Programmers (FSP 2015) (arXiv:1508.06320)", "journal-ref": null, "doi": null, "report-no": "FSP/2015/04", "categories": "cs.DC cs.AR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This extended abstract presents ThreadPoolComposer, a high-level\nsynthesis-based development framework and meta-toolchain that provides a\nuniform programming interface for FPGAs portable across multiple platforms.\n", "versions": [{"version": "v1", "created": "Thu, 27 Aug 2015 12:03:57 GMT"}], "update_date": "2015-08-28", "authors_parsed": [["Korinth", "Jens", ""], ["de la Chevallerie", "David", ""], ["Koch", "Andreas", ""]]}, {"id": "1508.06832", "submitter": "M\\'ario V\\'estias", "authors": "M\\'ario P. V\\'estias, Rui Policarpo Duarte, Hor\\'acio C. Neto", "title": "Designing Hardware/Software Systems for Embedded High-Performance\n  Computing", "comments": "Presented at Second International Workshop on FPGAs for Software\n  Programmers (FSP 2015) (arXiv:1508.06320)", "journal-ref": null, "doi": null, "report-no": "FSP/2015/08", "categories": "cs.AR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this work, we propose an architecture and methodology to design\nhardware/software systems for high-performance embedded computing on FPGA. The\nhardware side is based on a many-core architecture whose design is generated\nautomatically given a set of architectural parameters. Both the architecture\nand the methodology were evaluated running dense matrix multiplication and\nsparse matrix-vector multiplication on a ZYNQ-7020 FPGA platform. The results\nshow that using a system-level design of the system avoids complex hardware\ndesign and still provides good performance results.\n", "versions": [{"version": "v1", "created": "Thu, 27 Aug 2015 12:44:22 GMT"}], "update_date": "2015-08-28", "authors_parsed": [["V\u00e9stias", "M\u00e1rio P.", ""], ["Duarte", "Rui Policarpo", ""], ["Neto", "Hor\u00e1cio C.", ""]]}, {"id": "1508.07123", "submitter": "Kazushi Yamashina", "authors": "Kazushi Yamashina, Takeshi Ohkawa, Kanemitsu Ootsu, Takashi Yokota", "title": "Proposal of ROS-compliant FPGA Component for Low-Power Robotic Systems", "comments": "Presented at Second International Workshop on FPGAs for Software\n  Programmers (FSP 2015) (arXiv:1508.06320)", "journal-ref": null, "doi": null, "report-no": "FSP/2015/12", "categories": "cs.AR cs.DC cs.RO", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In recent years, robots are required to be autonomous and their robotic\nsoftware are sophisticated. Robots have a problem of insufficient performance,\nsince it cannot equip with a high-performance microprocessor due to\nbattery-power operation. On the other hand, FPGA devices can accelerate\nspecific functions in a robot system without increasing power consumption by\nimplementing customized circuits. But it is difficult to introduce FPGA devices\ninto a robot due to large development cost of an FPGA circuit compared to\nsoftware. Therefore, in this study, we propose an FPGA component technology for\nan easy integration of an FPGA into robots, which is compliant with ROS (Robot\nOperating System). As a case study, we designed ROS-compliant FPGA component of\nimage labeling using Xilinx Zynq platform. The developed ROS-component FPGA\ncomponent performs 1.7 times faster compared to the ordinary ROS software\ncomponent.\n", "versions": [{"version": "v1", "created": "Fri, 28 Aug 2015 08:33:15 GMT"}], "update_date": "2015-08-31", "authors_parsed": [["Yamashina", "Kazushi", ""], ["Ohkawa", "Takeshi", ""], ["Ootsu", "Kanemitsu", ""], ["Yokota", "Takashi", ""]]}, {"id": "1508.07126", "submitter": "Nicholas Doyle", "authors": "Lesley Shannon, Eric Matthews, Nicholas Doyle, Alexandra Fedorova", "title": "Performance monitoring for multicore embedded computing systems on FPGAs", "comments": "Presented at Second International Workshop on FPGAs for Software\n  Programmers (FSP 2015) (arXiv:1508.06320)", "journal-ref": null, "doi": null, "report-no": "FSP/2015/13", "categories": "cs.AR cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  When designing modern embedded computing systems, most software programmers\nchoose to use multicore processors, possibly in combination with\ngeneral-purpose graphics processing units (GPGPUs) and/or hardware\naccelerators. They also often use an embedded Linux O/S and run\nmulti-application workloads that may even be multi-threaded. Modern FPGAs are\nlarge enough to combine multicore hard/soft processors with multiple hardware\naccelerators as custom compute units, enabling entire embedded compute systems\nto be implemented on a single FPGA. Furthermore, the large FPGA vendors also\nsupport embedded Linux kernels for both their soft and embedded processors.\nWhen combined with high-level synthesis to generate hardware accelerators using\na C-to-gates flows, the necessary primitives for a framework that can enable\nsoftware designers to use FPGAs as their custom compute platform now exist.\nHowever, in order to ensure that computing resources are integrated and shared\neffectively, software developers need to be able to monitor and debug the\nruntime performance of the applications in their workload. This paper describes\nABACUS, a performance-monitoring framework that can be used to debug the\nexecution behaviours and interactions of multi-application workloads on\nmulticore systems. We also discuss how this framework is extensible for use\nwith hardware accelerators in heterogeneous systems.\n", "versions": [{"version": "v1", "created": "Fri, 28 Aug 2015 08:41:38 GMT"}], "update_date": "2015-08-31", "authors_parsed": [["Shannon", "Lesley", ""], ["Matthews", "Eric", ""], ["Doyle", "Nicholas", ""], ["Fedorova", "Alexandra", ""]]}, {"id": "1508.07127", "submitter": "Chun-Hsian Huang", "authors": "Chun-Hsian Huang, Kwuan-Wei Tseng, Chih-Cheng Lin, Fang-Yu Lin,\n  Pao-Ann Hsiung", "title": "Virtualization Architecture for NoC-based Reconfigurable Systems", "comments": "Presented at Second International Workshop on FPGAs for Software\n  Programmers (FSP 2015) (arXiv:1508.06320)", "journal-ref": null, "doi": null, "report-no": "FSP/2015/14", "categories": "cs.AR cs.OS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We propose a virtualization architecture for NoC-based reconfigurable\nsystems. The motivation of this work is to develop a service-oriented\narchitecture that includes Partial Reconfigurable Region as a Service (PRRaaS)\nand Processing Element as a Service (PEaaS) for software applications.\nAccording to the requirements of software applications, new PEs can be created\non-demand by (re)configuring the logic resource of the PRRs in the FPGA, while\nthe configured PEs can also be virtualized to support multiple application\ntasks at the same time. As a result, such a two-level virtualization mechanism,\nincluding the gate-level virtualization and the PE-level virtualization,\nenables an SoC to be dynamically adapted to changing application requirements.\nTherefore, more software applications can be performed, and system performance\ncan be further enhanced.\n", "versions": [{"version": "v1", "created": "Fri, 28 Aug 2015 08:45:35 GMT"}], "update_date": "2015-08-31", "authors_parsed": [["Huang", "Chun-Hsian", ""], ["Tseng", "Kwuan-Wei", ""], ["Lin", "Chih-Cheng", ""], ["Lin", "Fang-Yu", ""], ["Hsiung", "Pao-Ann", ""]]}, {"id": "1508.07139", "submitter": "Tobias Strauch", "authors": "Tobias Strauch", "title": "Using System Hyper Pipelining (SHP) to Improve the Performance of a\n  Coarse-Grained Reconfigurable Architecture (CGRA) Mapped on an FPGA", "comments": "Presented at Second International Workshop on FPGAs for Software\n  Programmers (FSP 2015) (arXiv:1508.06320)", "journal-ref": null, "doi": null, "report-no": "FSP/2015/18", "categories": "cs.AR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The well known method C-Slow Retiming (CSR) can be used to automatically\nconvert a given CPU into a multithreaded CPU with independent threads. These\nCPUs are then called streaming or barrel processors. System Hyper Pipelining\n(SHP) adds a new flexibility on top of CSR by allowing a dynamic number of\nthreads to be executed and by enabling the threads to be stalled, bypassed and\nreordered. SHP is now applied on the programming elements (PE) of a\ncoarse-grained reconfigurable architecture (CGRA). By using SHP, more\nperformance can be achieved per PE. Fork-Join operations can be implemented on\na PE using the flexibility provided by SHP to dynamically adjust the number of\nthreads per PE. Multiple threads can share the same data locally, which greatly\nreduces the data traffic load on the CGRA's routing structure. The paper shows\nthe results of a CGRA using SHP-ed RISC-V cores as PEs implemented on a FPGA.\n", "versions": [{"version": "v1", "created": "Fri, 28 Aug 2015 09:19:57 GMT"}], "update_date": "2015-08-31", "authors_parsed": [["Strauch", "Tobias", ""]]}]