[{"id": "1208.0995", "submitter": "Nasif Muslim", "authors": "Nasif Muslim, Md. Tanvir Adnan, Mohammad Zahidul Kabir, Md. Humayun\n  Kabir, Sheikh Mominul Islam", "title": "Design and implementation of a digital clock showing digits in Bangla\n  font using microcontroller AT89C4051", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.AR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this paper, a digital clock is designed where the microcontroller is used\nfor timing controller and the font of the Bangla digits are designed, and\nprogrammed within the microcontroller. The design is cost effective, simple and\neasy for maintenance.\n", "versions": [{"version": "v1", "created": "Sun, 5 Aug 2012 09:22:06 GMT"}], "update_date": "2012-08-07", "authors_parsed": [["Muslim", "Nasif", ""], ["Adnan", "Md. Tanvir", ""], ["Kabir", "Mohammad Zahidul", ""], ["Kabir", "Md. Humayun", ""], ["Islam", "Sheikh Mominul", ""]]}, {"id": "1208.2374", "submitter": "Ahmad Lashgar", "authors": "Ahmad Lashgar, Amirali Baniasadi, Ahmad Khonsari", "title": "Dynamic Warp Resizing in High-Performance SIMT", "comments": "9 pages, 5 Figures, 3 Lists, 1 Table, The extended version of ICCD\n  2012 poster paper", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.AR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Modern GPUs synchronize threads grouped in a warp at every instruction. These\nresults in improving SIMD efficiency and makes sharing fetch and decode\nresources possible. The number of threads included in each warp (or warp size)\naffects divergence, synchronization overhead and the efficiency of memory\naccess coalescing. Small warps reduce the performance penalty associated with\nbranch and memory divergence at the expense of a reduction in memory\ncoalescing. Large warps enhance memory coalescing significantly but also\nincrease branch and memory divergence. Dynamic workload behavior, including\nbranch/memory divergence and coalescing, is an important factor in determining\nthe warp size returning best performance. Optimal warp size can vary from one\nworkload to another or from one program phase to the next. Based on this\nobservation, we propose Dynamic Warp Resizing (DWR). DWR takes innovative\nmicroarchitectural steps to adjust warp size during runtime and according to\nprogram characteristics. DWR outperforms static warp size decisions, up to 1.7X\nto 2.28X, while imposing less than 1% area overhead. We investigate various\nalternative configurations and show that DWR performs better for narrower SIMD\nand larger caches.\n", "versions": [{"version": "v1", "created": "Sat, 11 Aug 2012 18:05:59 GMT"}, {"version": "v2", "created": "Sat, 3 Nov 2012 19:05:45 GMT"}], "update_date": "2012-11-06", "authors_parsed": [["Lashgar", "Ahmad", ""], ["Baniasadi", "Amirali", ""], ["Khonsari", "Ahmad", ""]]}, {"id": "1208.6428", "submitter": "Jalil Boukhobza", "authors": "Pierre Olivier (Lab-STICC), Jalil Boukhobza (Lab-STICC)", "title": "A Hardware Time Manager Implementation for the Xenomai Real-Time Kernel\n  of Embedded Linux", "comments": "Embed With Linux (EWiLi) workshop, Lorient : France (2012)", "journal-ref": "ACM SIGBED Review 9(2) 38-42 9, 2 (2012) 38-42", "doi": null, "report-no": null, "categories": "cs.OS cs.AR cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Nowadays, the use of embedded operating systems in different embedded\nprojects is subject to a tremendous growth. Embedded Linux is becoming one of\nthose most popular EOSs due to its modularity, efficiency, reliability, and\ncost. One way to make it hard real-time is to include a real-time kernel like\nXenomai. One of the key characteristics of a Real-Time Operating System (RTOS)\nis its ability to meet execution time deadlines deterministically. So, the more\nprecise and flexible the time management can be, the better it can handle\nefficiently the determinism for different embedded applications. RTOS time\nprecision is characterized by a specific periodic interrupt service controlled\nby a software time manager. The smaller the period of the interrupt, the better\nthe precision of the RTOS, the more it overloads the CPU, and though reduces\nthe overall efficiency of the RTOS. In this paper, we propose to drastically\nreduce these overheads by migrating the time management service of Xenomai into\na configurable hardware component to relieve the CPU. The hardware component is\nimplemented in a Field Programmable Gate Array coupled to the CPU. This work\nwas achieved in a Master degree project where students could apprehend many\nfields of embedded systems: RTOS programming, hardware design, performance\nevaluation, etc.\n", "versions": [{"version": "v1", "created": "Fri, 31 Aug 2012 09:04:05 GMT"}], "update_date": "2013-12-17", "authors_parsed": [["Olivier", "Pierre", "", "Lab-STICC"], ["Boukhobza", "Jalil", "", "Lab-STICC"]]}]