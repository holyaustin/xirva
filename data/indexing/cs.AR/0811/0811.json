[{"id": "0811.1304", "submitter": "Phuong Ha", "authors": "Phuong Hoai Ha, Philippas Tsigas and Otto J. Anshus", "title": "NB-FEB: An Easy-to-Use and Scalable Universal Synchronization Primitive\n  for Parallel Programming", "comments": null, "journal-ref": null, "doi": null, "report-no": "CS:2008-69", "categories": "cs.DC cs.AR cs.DS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper addresses the problem of universal synchronization primitives that\ncan support scalable thread synchronization for large-scale many-core\narchitectures. The universal synchronization primitives that have been deployed\nwidely in conventional architectures like CAS and LL/SC are expected to reach\ntheir scalability limits in the evolution to many-core architectures with\nthousands of cores. We introduce a non-blocking full/empty bit primitive, or\nNB-FEB for short, as a promising synchronization primitive for parallel\nprogramming on may-core architectures. We show that the NB-FEB primitive is\nuniversal, scalable, feasible and convenient to use. NB-FEB, together with\nregisters, can solve the consensus problem for an arbitrary number of processes\n(universality). NB-FEB is combinable, namely its memory requests to the same\nmemory location can be combined into only one memory request, which\nconsequently mitigates performance degradation due to synchronization \"hot\nspots\" (scalability). Since NB-FEB is a variant of the original full/empty bit\nthat always returns a value instead of waiting for a conditional flag, it is as\nfeasible as the original full/empty bit, which has been implemented in many\ncomputer systems (feasibility). The original full/empty bit is well-known as a\nspecial-purpose primitive for fast producer-consumer synchronization and has\nbeen used extensively in the specific domain of applications. In this paper, we\nshow that NB-FEB can be deployed easily as a general-purpose primitive. Using\nNB-FEB, we construct a non-blocking software transactional memory system called\nNBFEB-STM, which can be used to handle concurrent threads conveniently.\nNBFEB-STM is space efficient: the space complexity of each object updated by\n$N$ concurrent threads/transactions is $\\Theta(N)$, the optimal.\n", "versions": [{"version": "v1", "created": "Sun, 9 Nov 2008 00:41:07 GMT"}], "update_date": "2008-11-11", "authors_parsed": [["Ha", "Phuong Hoai", ""], ["Tsigas", "Philippas", ""], ["Anshus", "Otto J.", ""]]}]