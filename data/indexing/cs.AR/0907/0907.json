[{"id": "0907.0749", "submitter": "Dan Ghica", "authors": "Dan R. Ghica", "title": "Function Interface Models for Hardware Compilation: Types, Signatures,\n  Protocols", "comments": "25 pages, 8 figures", "journal-ref": null, "doi": null, "report-no": "University of Birmingham Technical Report CSR-08-04", "categories": "cs.PL cs.AR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The problem of synthesis of gate-level descriptions of digital circuits from\nbehavioural specifications written in higher-level programming languages\n(hardware compilation) has been studied for a long time yet a definitive\nsolution has not been forthcoming. The argument of this essay is mainly\nmethodological, bringing a perspective that is informed by recent developments\nin programming-language theory. We argue that one of the major obstacles in the\nway of hardware compilation becoming a useful and mature technology is the lack\nof a well defined function interface model, i.e. a canonical way in which\nfunctions communicate with arguments. We discuss the consequences of this\nproblem and propose a solution based on new developments in programming\nlanguage theory. We conclude by presenting a prototype implementation and some\nexamples illustrating our principles.\n", "versions": [{"version": "v1", "created": "Sat, 4 Jul 2009 09:24:26 GMT"}], "update_date": "2009-07-07", "authors_parsed": [["Ghica", "Dan R.", ""]]}]