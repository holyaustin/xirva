[{"id": "1206.1567", "submitter": "Rourab Paul", "authors": "Rourab Paul, Suman Sau, Amlan Chakrabarti", "title": "Architecture for real time continuous sorting on large width data volume\n  for fpga based applications", "comments": "5 pages,RASTM,2011 INDORE", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.AR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In engineering applications sorting is an important and widely studied\nproblem where execution speed and resources used for computation are of extreme\nimportance, especially if we think about real time data processing. Most of the\ntraditional sorting techniques compute the process after receiving all of the\ndata and hence the process needs large amount of resources for data storage.\nSo, suitable design strategy needs to be adopted if we wish to sort a large\namount of data in real time, which essential means higher speed of process\nexecution and utilization of fewer resources in most of the cases. This paper\nproposes a single chip scalable architecture based on Field Programmable Gate\nArray(FPGA), for a modified counting sort algorithm where data acquisition and\nsorting is being done in real time scenario. Our design promises to work\nefficiently, where data can be accepted in the run time scenario without any\nneed of prior storage of data and also the execution speed of our algorithm is\ninvariant to the length of the data stream. The proposed design is implemented\nand verified on Spartan 3E(XC3S500E-FG320) FPGA system. The results prove that\nour design is better in terms of some of the design parameters compared to the\nexisting research works.\n", "versions": [{"version": "v1", "created": "Thu, 7 Jun 2012 18:17:32 GMT"}], "update_date": "2012-06-08", "authors_parsed": [["Paul", "Rourab", ""], ["Sau", "Suman", ""], ["Chakrabarti", "Amlan", ""]]}, {"id": "1206.2132", "submitter": "Lei Li", "authors": "Lei Li, Tianshi Chen, Yunji Chen, Ling Li, and Ruiyang Wu", "title": "RepTFD: Replay Based Transient Fault Detection", "comments": "22 pages, 11 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.AR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The advances in IC process make future chip multiprocessors (CMPs) more and\nmore vulnerable to transient faults. To detect transient faults, previous\ncore-level schemes provide redundancy for each core separately. As a result,\nthey may leave transient faults in the uncore parts, which consume over 50%\narea of a modern CMP, escaped from detection. This paper proposes RepTFD, the\nfirst core-level transient fault detection scheme with 100% coverage. Instead\nof providing redundancy for each core separately, RepTFD provides redundancy\nfor a group of cores as a whole. To be specific, it replays the execution of\nthe checked group of cores on a redundant group of cores. Through comparing the\nexecution results between the two groups of cores, all malignant transient\nfaults can be caught. Moreover, RepTFD adopts a novel pending period based\nrecord-replay approach, which can greatly reduce the number of execution orders\nthat need to be enforced in the replay-run. Hence, RepTFD brings only 4.76%\nperformance overhead in comparison to the normal execution without\nfault-tolerance according to our experiments on the RTL design of an industrial\nCMP named Godson-3. In addition, RepTFD only consumes about 0.83% area of\nGodson-3, while needing only trivial modifications to existing components of\nGodson-3.\n", "versions": [{"version": "v1", "created": "Mon, 11 Jun 2012 08:50:37 GMT"}], "update_date": "2012-06-12", "authors_parsed": [["Li", "Lei", ""], ["Chen", "Tianshi", ""], ["Chen", "Yunji", ""], ["Li", "Ling", ""], ["Wu", "Ruiyang", ""]]}, {"id": "1206.4753", "submitter": "Tianshi Chen", "authors": "Daofu Liu, Yunji Chen, Qi Guo, Tianshi Chen, Ling Li, Qunfeng Dong,\n  Weiwu Hu", "title": "DLS: Directoryless Shared Last-level Cache", "comments": "This paper has been withdrawn by the authors due to a major revision", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.AR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Directory-based protocols have been the de facto solution for maintaining\ncache coherence in shared-memory parallel systems comprising multi/many cores,\nwhere each store instruction is eagerly made globally visible by invalidating\nthe private cache (PC) backups of other cores. Consequently, the directory not\nonly consumes large chip area, but also incurs considerable energy consumption\nand performance degradation, due to the large number of Invalidation/Ack\nmessages transferred in the interconnection network and resulting network\ncongestion. In this paper, we reveal the interesting fact that the directory is\nactually an unnecessary luxury for practical parallel systems. Because of\nwidely deployed software/hardware techniques involving instruction reordering,\nmost (if not all) parallel systems work under the weak consistency model, where\na remote store instruction is allowed to be invisible to a core before the next\nsynchronization of the core, instead of being made visible eagerly by\ninvalidating PC backups of other cores. Based on this key observation, we\npropose a lightweight novel scheme called {\\em DLS (DirectoryLess Shared\nlast-level cache)}, which completely removes the directory and Invalidation/Ack\nmessages, and efficiently maintains cache coherence using a novel {\\em\nself-suspicion + speculative execution} mechanism. Experimental results over\nSPLASH-2 benchmarks show that on a 16-core processor, DLS not only completely\nremoves the chip area cost of the directory, but also improves processor\nperformance by 11.08%, reduces overall network traffic by 28.83%, and reduces\nenergy consumption of the network by 15.65% on average (compared with\ntraditional MESI protocol with full directory). Moreover, DLS does not involve\nany modification to programming languages and compilers, and hence is\nseamlessly compatible with legacy codes.\n", "versions": [{"version": "v1", "created": "Thu, 21 Jun 2012 00:59:43 GMT"}, {"version": "v2", "created": "Sun, 7 Oct 2012 04:08:02 GMT"}], "update_date": "2012-10-09", "authors_parsed": [["Liu", "Daofu", ""], ["Chen", "Yunji", ""], ["Guo", "Qi", ""], ["Chen", "Tianshi", ""], ["Li", "Ling", ""], ["Dong", "Qunfeng", ""], ["Hu", "Weiwu", ""]]}, {"id": "1206.6213", "submitter": "Valentin Puente", "authors": "Javier Merino, Valentin Puente, Jos\\'e \\'Angel Gregorio", "title": "The Necessity for Hardware QoS Support for Server Consolidation and\n  Cloud Computing", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.AR cs.OS", "license": "http://creativecommons.org/licenses/by/3.0/", "abstract": "  Chip multiprocessors (CMPs) are ubiquitous in most of today's computing\nfields. Although they provide noticeable benefits in terms of performance, cost\nand power efficiency, they also introduce some new issues. In this paper we\nanalyze how the interference from Virtual Private Servers running in other\ncores is a significant component of performance unpredictability and can\nthreaten the attainment of cloud computing. Even if virtualization is used, the\nsharing of the on-chip section of the memory hierarchy by different cores makes\nperformance isolation strongly dependent on what is running elsewhere in the\nsystem. We will show in three actual computing systems, based on Sun UltraSparc\nT1, Sun UltraSparc T2 and Intel Xeon processors, how state-of-the-art\nvirtualization techniques are unable to guarantee performance isolation in a\nrepresentative workload such as SPECweb2005. In an especially conceived near\nworst-case scenario, it is possible to reduce the performance achieved by a\nSolaris Zones consolidated server for this suite of benchmarks in a Sun Fire\nT1000 and a Sun Enterprise T5120 by up to 80%. The performance drop observed by\na Xen consolidated server running in a HP Proliant DL160 G5 is almost 45%. For\nall systems under study, off-chip bandwidth is shown to be the most critical\nresource.\n", "versions": [{"version": "v1", "created": "Wed, 27 Jun 2012 09:33:06 GMT"}], "update_date": "2012-06-28", "authors_parsed": [["Merino", "Javier", ""], ["Puente", "Valentin", ""], ["Gregorio", "Jos\u00e9 \u00c1ngel", ""]]}]