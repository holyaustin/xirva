[{"id": "1204.1179", "submitter": "Aamir Khan", "authors": "Muhammad Adeel Akram, Aamir Khan, Muhammad Masood Sarfaraz", "title": "C-slow Technique vs Multiprocessor in designing Low Area Customized\n  Instruction set Processor for Embedded Applications", "comments": null, "journal-ref": "International Journal of Computer Applications (0975 - 8887)\n  Volume 36 - No.7, December 2011", "doi": null, "report-no": null, "categories": "cs.AR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The demand for high performance embedded processors, for consumer\nelectronics, is rapidly increasing for the past few years. Many of these\nembedded processors depend upon custom built Instruction Ser Architecture (ISA)\nsuch as game processor (GPU), multimedia processors, DSP processors etc.\nPrimary requirement for consumer electronic industry is low cost with high\nperformance and low power consumption. A lot of research has been evolved to\nenhance the performance of embedded processors through parallel computing. But\nsome of them focus superscalar processors i.e. single processors with more\nresources like Instruction Level Parallelism (ILP) which includes Very Long\nInstruction Word (VLIW) architecture, custom instruction set extensible\nprocessor architecture and others require more number of processing units on a\nsingle chip like Thread Level Parallelism (TLP) that includes Simultaneous\nMultithreading (SMT), Chip Multithreading (CMT) and Chip Multiprocessing (CMP).\nIn this paper, we present a new technique, named C-slow, to enhance performance\nfor embedded processors for consumer electronics by exploiting multithreading\ntechnique in single core processors. Without resulting into the complexity of\nmicro controlling with Real Time Operating system (RTOS), C-slowed processor\ncan execute multiple threads in parallel using single datapath of Instruction\nSet processing element. This technique takes low area & approach complexity of\ngeneral purpose processor running RTOS.\n", "versions": [{"version": "v1", "created": "Thu, 5 Apr 2012 10:59:03 GMT"}], "update_date": "2012-04-06", "authors_parsed": [["Akram", "Muhammad Adeel", ""], ["Khan", "Aamir", ""], ["Sarfaraz", "Muhammad Masood", ""]]}, {"id": "1204.2772", "submitter": "Mehdi Alipour", "authors": "Mehdi Alipour, and Hojjat Taghdisi", "title": "Effect of Thread Level Parallelism on the Performance of Optimum\n  Architecture for Embedded Applications", "comments": "International Journal of Embedded Systems and Applications (IJESA),\n  http://airccse.org/journal/ijesa/current2012.html", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.AR cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  According to the increasing complexity of network application and internet\ntraffic, network processor as a subset of embedded processors have to process\nmore computation intensive tasks. By scaling down the feature size and emersion\nof chip multiprocessors (CMP) that are usually multi-thread processors, the\nperformance requirements are somehow guaranteed. As multithread processors are\nthe heir of uni-thread processors and there isn't any general design flow to\ndesign a multithread embedded processor, in this paper we perform a\ncomprehensive design space exploration for an optimum uni-thread embedded\nprocessor based on the limited area and power budgets. Finally we run multiple\nthreads on this architecture to find out the maximum thread level parallelism\n(TLP) based on performance per power and area optimum uni-thread architecture.\n", "versions": [{"version": "v1", "created": "Thu, 12 Apr 2012 17:07:58 GMT"}], "update_date": "2012-04-13", "authors_parsed": [["Alipour", "Mehdi", ""], ["Taghdisi", "Hojjat", ""]]}, {"id": "1204.2809", "submitter": "Mehdi Alipour", "authors": "Mehdi Alipour, and Mostafa E. Salehi", "title": "Performance-Optimum Superscalar Architecture for Embedded Applications", "comments": null, "journal-ref": "http://indianjournals.com/ijor.aspx 2012", "doi": null, "report-no": null, "categories": "cs.AR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Embedded applications are widely used in portable devices such as wireless\nphones, personal digital assistants, laptops, etc. High throughput and real\ntime requirements are especially important in such data-intensive tasks.\nTherefore, architectures that provide the required performance are the most\ndesirable. On the other hand, processor performance is severely related to the\naverage memory access delay, number of processor registers and also size of the\ninstruction window and superscalar parameters. Therefore, cache, register file\nand superscalar parameters are the major architectural concerns in designing a\nsuperscalar architecture for embedded processors. Although increasing cache and\nregister file size leads to performance improvements in high performance\nembedded processors, the increased area, power consumption and memory delay are\nthe overheads of these techniques. This paper explores the effect of cache,\nregister file and superscalar parameters on the processor performance to\nspecify the optimum size of these parameters for embedded applications.\nExperimental results show that although having bigger size of these parameters\nis one of the performance improvement approaches in embedded processors,\nhowever, by increasing the size of some parameters over a threshold value,\nperformance improvement is saturated and especially in cache size, increments\nover this threshold value decrease the performance.\n", "versions": [{"version": "v1", "created": "Thu, 12 Apr 2012 18:40:55 GMT"}], "update_date": "2012-04-13", "authors_parsed": [["Alipour", "Mehdi", ""], ["Salehi", "Mostafa E.", ""]]}, {"id": "1204.4134", "submitter": "David Yllanes", "authors": "Janus Collaboration: M. Baity-Jesi, R. A. Banos, A. Cruz, L. A.\n  Fernandez, J. M. Gil-Narvion, A. Gordillo-Guerrero, M. Guidetti, D. Iniguez,\n  A. Maiorano, F. Mantovani, E. Marinari, V. Martin-Mayor, J. Monforte-Garcia,\n  A. Munoz Sudupe, D. Navarro, G. Parisi, M. Pivanti, S. Perez-Gaviro, F.\n  Ricci-Tersenghi, J. J. Ruiz-Lorenzo, S. F. Schifano, B. Seoane, A. Tarancon,\n  P. Tellez, R. Tripiccione, and D. Yllanes", "title": "Reconfigurable computing for Monte Carlo simulations: results and\n  prospects of the Janus project", "comments": "19 pages, 3 figures", "journal-ref": "The European Physical Journal - Special Topics 210, 33-51 (2012)", "doi": "10.1140/epjst/e2012-01636-9", "report-no": null, "categories": "cond-mat.dis-nn cs.AR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We describe Janus, a massively parallel FPGA-based computer optimized for the\nsimulation of spin glasses, theoretical models for the behavior of glassy\nmaterials. FPGAs (as compared to GPUs or many-core processors) provide a\ncomplementary approach to massively parallel computing. In particular, our\nmodel problem is formulated in terms of binary variables, and floating-point\noperations can be (almost) completely avoided. The FPGA architecture allows us\nto run many independent threads with almost no latencies in memory access, thus\nupdating up to 1024 spins per cycle. We describe Janus in detail and we\nsummarize the physics results obtained in four years of operation of this\nmachine; we discuss two types of physics applications: long simulations on very\nlarge systems (which try to mimic and provide understanding about the\nexperimental non-equilibrium dynamics), and low-temperature equilibrium\nsimulations using an artificial parallel tempering dynamics. The time scale of\nour non-equilibrium simulations spans eleven orders of magnitude (from\npicoseconds to a tenth of a second). On the other hand, our equilibrium\nsimulations are unprecedented both because of the low temperatures reached and\nfor the large systems that we have brought to equilibrium. A finite-time\nscaling ansatz emerges from the detailed comparison of the two sets of\nsimulations. Janus has made it possible to perform spin-glass simulations that\nwould take several decades on more conventional architectures. The paper ends\nwith an assessment of the potential of possible future versions of the Janus\narchitecture, based on state-of-the-art technology.\n", "versions": [{"version": "v1", "created": "Wed, 18 Apr 2012 17:03:44 GMT"}], "update_date": "2012-09-11", "authors_parsed": [["Janus Collaboration", "", ""], ["Baity-Jesi", "M.", ""], ["Banos", "R. A.", ""], ["Cruz", "A.", ""], ["Fernandez", "L. A.", ""], ["Gil-Narvion", "J. M.", ""], ["Gordillo-Guerrero", "A.", ""], ["Guidetti", "M.", ""], ["Iniguez", "D.", ""], ["Maiorano", "A.", ""], ["Mantovani", "F.", ""], ["Marinari", "E.", ""], ["Martin-Mayor", "V.", ""], ["Monforte-Garcia", "J.", ""], ["Sudupe", "A. Munoz", ""], ["Navarro", "D.", ""], ["Parisi", "G.", ""], ["Pivanti", "M.", ""], ["Perez-Gaviro", "S.", ""], ["Ricci-Tersenghi", "F.", ""], ["Ruiz-Lorenzo", "J. J.", ""], ["Schifano", "S. F.", ""], ["Seoane", "B.", ""], ["Tarancon", "A.", ""], ["Tellez", "P.", ""], ["Tripiccione", "R.", ""], ["Yllanes", "D.", ""]]}, {"id": "1204.5407", "submitter": "Pradeep  Singla", "authors": "Pradeep Singla, Naveen Kr. Malik", "title": "Reversible Programmable Logic Array (RPLA) using Feynman & MUX Gates for\n  Low Power Industrial Applications", "comments": "9 Pages, 9 Figures", "journal-ref": "Pradeep Singla and Naveen Kr. Malik. Article: Reversible\n  Programmable Logic Array (RPLA) using Feynman & MUX Gates for Low Power\n  Industrial Applications. Proceedinggs of ICIAICT-2012,pp 411-419, March 2012", "doi": null, "report-no": null, "categories": "cs.AR", "license": "http://creativecommons.org/licenses/by/3.0/", "abstract": "  This paper present the research work directed towards the design of\nreversible programmable logic array using very high speed integrated circuit\nhardware description language (VHDL). Reversible logic circuits have\nsignificant importance in bioinformatics, optical information processing, CMOS\ndesign etc. In this paper the authors propose the design of new RPLA using\nFeynman & MUX gate.VHDL based codes of reversible gates with simulating results\nare shown .This proposed RPLA may be further used to design any reversible\nlogic function or Boolean function (Adder, subtractor etc.) which dissipate\nvery low or ideally no heat.\n", "versions": [{"version": "v1", "created": "Tue, 24 Apr 2012 15:28:25 GMT"}], "update_date": "2012-04-25", "authors_parsed": [["Singla", "Pradeep", ""], ["Malik", "Naveen Kr.", ""]]}, {"id": "1204.6662", "submitter": "Emna Kallel Laadhar Emna Kallel Laadhar", "authors": "Emna Kallel, Yassine Aoudni, Mouna Baklouti and Mohamed Abid", "title": "Mppsocgen: A framework for automatic generation of mppsoc architecture", "comments": "16 pages; International Journal of Computer Science & Information\n  Technology (IJCSIT) Vol 4, No 2, April 2012", "journal-ref": null, "doi": "10.5121/ijcsit.2012.4201", "report-no": null, "categories": "cs.DC cs.AR", "license": "http://creativecommons.org/licenses/publicdomain/", "abstract": "  Automatic code generation is a standard method in software engineering since\nit improves the code consistency and reduces the overall development time. In\nthis context, this paper presents a design flow for automatic VHDL code\ngeneration of mppSoC (massively parallel processing System-on-Chip)\nconfiguration. Indeed, depending on the application requirements, a framework\nof Netbeans Platform Software Tool named MppSoCGEN was developed in order to\naccelerate the design process of complex mppSoC. Starting from an architecture\nparameters design, VHDL code will be automatically generated using parsing\nmethod. Configuration rules are proposed to have a correct and valid VHDL\nsyntax configuration. Finally, an automatic generation of Processor Elements\nand network topologies models of mppSoC architecture will be done for Stratix\nII device family. Our framework improves its flexibility on Netbeans 5.5\nversion and centrino duo Core 2GHz with 22 Kbytes and 3 seconds average\nruntime. Experimental results for reduction algorithm validate our MppSoCGEN\ndesign flow and demonstrate the efficiency of generated architectures.\n", "versions": [{"version": "v1", "created": "Mon, 30 Apr 2012 15:04:49 GMT"}], "update_date": "2012-05-03", "authors_parsed": [["Kallel", "Emna", ""], ["Aoudni", "Yassine", ""], ["Baklouti", "Mouna", ""], ["Abid", "Mohamed", ""]]}]