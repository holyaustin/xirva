[{"id": "0708.0580", "submitter": "David Pritchard", "authors": "David Pritchard", "title": "Efficient Divide-and-Conquer Implementations Of Symmetric FSAs", "comments": null, "journal-ref": "Journal of Cellular Automata 5(6) (special issue for Automata\n  2007, H. Fuks & A. T. Lawniczak, eds), pages 481-490, 2010", "doi": null, "report-no": null, "categories": "cs.FL cs.DM", "license": "http://creativecommons.org/licenses/by/3.0/", "abstract": "  A deterministic finite-state automaton (FSA) is an abstract sequential\nmachine that reads the symbols comprising an input word one at a time. An FSA\nis symmetric if its output is independent of the order in which the input\nsymbols are read, i.e., if the output is invariant under permutations of the\ninput. We show how to convert a symmetric FSA A into an automaton-like\ndivide-and-conquer process whose intermediate results are no larger than the\nsize of A's memory. In comparison, a similar result for general FSA's has been\nlong known via functional composition, but entails an exponential increase in\nmemory size. The new result has applications to parallel processing and\nsymmetric FSA networks.\n", "versions": [{"version": "v1", "created": "Fri, 3 Aug 2007 20:21:36 GMT"}, {"version": "v2", "created": "Mon, 31 Mar 2008 15:48:20 GMT"}, {"version": "v3", "created": "Thu, 5 Aug 2010 09:18:56 GMT"}], "update_date": "2010-08-06", "authors_parsed": [["Pritchard", "David", ""]]}]