[{"id": "0706.0046", "submitter": "Jingchao Chen", "authors": "Jing-Chao Chen", "title": "Symmetry Partition Sort", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DS", "license": null, "abstract": "  In this paper, we propose a useful replacement for quicksort-style utility\nfunctions. The replacement is called Symmetry Partition Sort, which has\nessentially the same principle as Proportion Extend Sort. The maximal\ndifference between them is that the new algorithm always places already\npartially sorted inputs (used as a basis for the proportional extension) on\nboth ends when entering the partition routine. This is advantageous to speeding\nup the partition routine. The library function based on the new algorithm is\nmore attractive than Psort which is a library function introduced in 2004. Its\nimplementation mechanism is simple. The source code is clearer. The speed is\nfaster, with O(n log n) performance guarantee. Both the robustness and\nadaptivity are better. As a library function, it is competitive.\n", "versions": [{"version": "v1", "created": "Fri, 1 Jun 2007 01:47:06 GMT"}], "update_date": "2007-06-04", "authors_parsed": [["Chen", "Jing-Chao", ""]]}, {"id": "0706.0489", "submitter": "Markus Jalsenius", "authors": "Markus Jalsenius", "title": "Sampling Colourings of the Triangular Lattice", "comments": "42 pages. Added appendix that describes implementation. Added\n  ancillary files", "journal-ref": null, "doi": null, "report-no": null, "categories": "math-ph cs.DM cs.DS math.MP", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We show that the Glauber dynamics on proper 9-colourings of the triangular\nlattice is rapidly mixing, which allows for efficient sampling. Consequently,\nthere is a fully polynomial randomised approximation scheme (FPRAS) for\ncounting proper 9-colourings of the triangular lattice. Proper colourings\ncorrespond to configurations in the zero-temperature anti-ferromagnetic Potts\nmodel. We show that the spin system consisting of proper 9-colourings of the\ntriangular lattice has strong spatial mixing. This implies that there is a\nunique infinite-volume Gibbs distribution, which is an important property\nstudied in statistical physics. Our results build on previous work by Goldberg,\nMartin and Paterson, who showed similar results for 10 colours on the\ntriangular lattice. Their work was preceded by Salas and Sokal's 11-colour\nresult. Both proofs rely on computational assistance, and so does our 9-colour\nproof. We have used a randomised heuristic to guide us towards rigourous\nresults.\n", "versions": [{"version": "v1", "created": "Mon, 4 Jun 2007 17:49:25 GMT"}, {"version": "v2", "created": "Mon, 22 Mar 2010 17:49:43 GMT"}, {"version": "v3", "created": "Tue, 26 Oct 2010 02:09:02 GMT"}], "update_date": "2010-10-27", "authors_parsed": [["Jalsenius", "Markus", ""]]}, {"id": "0706.1063", "submitter": "Matthias Brust R.", "authors": "Matthias R. Brust, Steffen Rothkugel", "title": "Small Worlds: Strong Clustering in Wireless Networks", "comments": "To appear in: 1st International Workshop on Localized Algorithms and\n  Protocols for Wireless Sensor Networks (LOCALGOS 2007), 2007, IEEE Compuster\n  Society Press", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.NI cs.DC cs.DS", "license": null, "abstract": "  Small-worlds represent efficient communication networks that obey two\ndistinguishing characteristics: a high clustering coefficient together with a\nsmall characteristic path length. This paper focuses on an interesting paradox,\nthat removing links in a network can increase the overall clustering\ncoefficient. Reckful Roaming, as introduced in this paper, is a 2-localized\nalgorithm that takes advantage of this paradox in order to selectively remove\nsuperfluous links, this way optimizing the clustering coefficient while still\nretaining a sufficiently small characteristic path length.\n", "versions": [{"version": "v1", "created": "Thu, 7 Jun 2007 19:42:51 GMT"}, {"version": "v2", "created": "Mon, 11 Jun 2007 05:36:04 GMT"}], "update_date": "2007-06-11", "authors_parsed": [["Brust", "Matthias R.", ""], ["Rothkugel", "Steffen", ""]]}, {"id": "0706.1084", "submitter": "Adam D. Smith", "authors": "Sofya Raskhodnikova and Dana Ron and Ronitt Rubinfeld and Adam Smith", "title": "Sublinear Algorithms for Approximating String Compressibility", "comments": "To appear in the proceedings of RANDOM 2007", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DS", "license": null, "abstract": "  We raise the question of approximating the compressibility of a string with\nrespect to a fixed compression scheme, in sublinear time. We study this\nquestion in detail for two popular lossless compression schemes: run-length\nencoding (RLE) and Lempel-Ziv (LZ), and present sublinear algorithms for\napproximating compressibility with respect to both schemes. We also give\nseveral lower bounds that show that our algorithms for both schemes cannot be\nimproved significantly.\n  Our investigation of LZ yields results whose interest goes beyond the initial\nquestions we set out to study. In particular, we prove combinatorial structural\nlemmas that relate the compressibility of a string with respect to Lempel-Ziv\nto the number of distinct short substrings contained in it. In addition, we\nshow that approximating the compressibility with respect to LZ is related to\napproximating the support size of a distribution.\n", "versions": [{"version": "v1", "created": "Fri, 8 Jun 2007 02:58:28 GMT"}], "update_date": "2007-06-11", "authors_parsed": [["Raskhodnikova", "Sofya", ""], ["Ron", "Dana", ""], ["Rubinfeld", "Ronitt", ""], ["Smith", "Adam", ""]]}, {"id": "0706.1318", "submitter": "John Tomlin", "authors": "S. Sathiya Keerthi and John A. Tomlin", "title": "Constructing a maximum utility slate of on-line advertisements", "comments": null, "journal-ref": null, "doi": null, "report-no": "YR-2007-001", "categories": "cs.DM cs.DS", "license": null, "abstract": "  We present an algorithm for constructing an optimal slate of sponsored search\nadvertisements which respects the ordering that is the outcome of a generalized\nsecond price auction, but which must also accommodate complicating factors such\nas overall budget constraints. The algorithm is easily fast enough to use on\nthe fly for typical problem sizes, or as a subroutine in an overall\noptimization.\n", "versions": [{"version": "v1", "created": "Sat, 9 Jun 2007 16:18:45 GMT"}], "update_date": "2007-06-12", "authors_parsed": [["Keerthi", "S. Sathiya", ""], ["Tomlin", "John A.", ""]]}, {"id": "0706.2155", "submitter": "Greg Sepesi", "authors": "Greg Sepesi", "title": "Dualheap Selection Algorithm: Efficient, Inherently Parallel and\n  Somewhat Mysterious", "comments": "5 pages, 6 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DS cs.CC cs.DC", "license": null, "abstract": "  An inherently parallel algorithm is proposed that efficiently performs\nselection: finding the K-th largest member of a set of N members. Selection is\na common component of many more complex algorithms and therefore is a widely\nstudied problem.\n  Not much is new in the proposed dualheap selection algorithm: the heap data\nstructure is from J.W.J.Williams, the bottom-up heap construction is from R.W.\nFloyd, and the concept of a two heap data structure is from J.W.J. Williams and\nD.E. Knuth. The algorithm's novelty is limited to a few relatively minor\nimplementation twists: 1) the two heaps are oriented with their roots at the\npartition values rather than at the minimum and maximum values, 2)the coding of\none of the heaps (the heap of smaller values) employs negative indexing, and 3)\nthe exchange phase of the algorithm is similar to a bottom-up heap\nconstruction, but navigates the heap with a post-order tree traversal.\n  When run on a single processor, the dualheap selection algorithm's\nperformance is competitive with quickselect with median estimation, a common\nvariant of C.A.R. Hoare's quicksort algorithm. When run on parallel processors,\nthe dualheap selection algorithm is superior due to its subtasks that are\neasily partitioned and innately balanced.\n", "versions": [{"version": "v1", "created": "Thu, 14 Jun 2007 16:11:24 GMT"}], "update_date": "2007-06-15", "authors_parsed": [["Sepesi", "Greg", ""]]}, {"id": "0706.2725", "submitter": "Guohun Zhu", "authors": "Guohun Zhu", "title": "The Complexity of Determining Existence a Hamiltonian Cycle is $O(n^3)$", "comments": "6 papers", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DS cs.CC cs.DM", "license": null, "abstract": "  The Hamiltonian cycle problem in digraph is mapped into a matching cover\nbipartite graph. Based on this mapping, it is proved that determining existence\na Hamiltonian cycle in graph is $O(n^3)$.\n", "versions": [{"version": "v1", "created": "Tue, 19 Jun 2007 07:57:51 GMT"}], "update_date": "2007-06-20", "authors_parsed": [["Zhu", "Guohun", ""]]}, {"id": "0706.2839", "submitter": "Rajeev Raman", "authors": "Naila Rahman and Rajeev Raman", "title": "Cache Analysis of Non-uniform Distribution Sorting Algorithms", "comments": "The full version of our ESA 2000 paper (LNCS 1879) on this subject", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DS cs.PF", "license": null, "abstract": "  We analyse the average-case cache performance of distribution sorting\nalgorithms in the case when keys are independently but not necessarily\nuniformly distributed. The analysis is for both `in-place' and `out-of-place'\ndistribution sorting algorithms and is more accurate than the analysis\npresented in \\cite{RRESA00}. In particular, this new analysis yields tighter\nupper and lower bounds when the keys are drawn from a uniform distribution.\n  We use this analysis to tune the performance of the integer sorting algorithm\nMSB radix sort when it is used to sort independent uniform floating-point\nnumbers (floats). Our tuned MSB radix sort algorithm comfortably outperforms a\ncache-tuned implementations of bucketsort \\cite{RR99} and Quicksort when\nsorting uniform floats from $[0, 1)$.\n", "versions": [{"version": "v1", "created": "Tue, 19 Jun 2007 17:12:47 GMT"}, {"version": "v2", "created": "Mon, 13 Aug 2007 22:57:01 GMT"}], "update_date": "2007-08-14", "authors_parsed": [["Rahman", "Naila", ""], ["Raman", "Rajeev", ""]]}, {"id": "0706.2893", "submitter": "Greg Sepesi", "authors": "Greg Sepesi", "title": "Dualheap Sort Algorithm: An Inherently Parallel Generalization of\n  Heapsort", "comments": "4 pages, 4 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DS cs.CC cs.DC", "license": null, "abstract": "  A generalization of the heapsort algorithm is proposed. At the expense of\nabout 50% more comparison and move operations for typical cases, the dualheap\nsort algorithm offers several advantages over heapsort: improved cache\nperformance, better performance if the input happens to be already sorted, and\neasier parallel implementations.\n", "versions": [{"version": "v1", "created": "Wed, 20 Jun 2007 14:42:45 GMT"}], "update_date": "2007-06-21", "authors_parsed": [["Sepesi", "Greg", ""]]}, {"id": "0706.3104", "submitter": "Cristina Toninelli", "authors": "Marc Mezard, Cristina Toninelli", "title": "Group Testing with Random Pools: optimal two-stage algorithms", "comments": "12 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DS cond-mat.dis-nn cond-mat.stat-mech cs.IT math.IT", "license": null, "abstract": "  We study Probabilistic Group Testing of a set of N items each of which is\ndefective with probability p. We focus on the double limit of small defect\nprobability, p<<1, and large number of variables, N>>1, taking either p->0\nafter $N\\to\\infty$ or $p=1/N^{\\beta}$ with $\\beta\\in(0,1/2)$. In both settings\nthe optimal number of tests which are required to identify with certainty the\ndefectives via a two-stage procedure, $\\bar T(N,p)$, is known to scale as\n$Np|\\log p|$. Here we determine the sharp asymptotic value of $\\bar\nT(N,p)/(Np|\\log p|)$ and construct a class of two-stage algorithms over which\nthis optimal value is attained. This is done by choosing a proper bipartite\nregular graph (of tests and variable nodes) for the first stage of the\ndetection. Furthermore we prove that this optimal value is also attained on\naverage over a random bipartite graph where all variables have the same degree,\nwhile the tests have Poisson-distributed degrees. Finally, we improve the\nexisting upper and lower bound for the optimal number of tests in the case\n$p=1/N^{\\beta}$ with $\\beta\\in[1/2,1)$.\n", "versions": [{"version": "v1", "created": "Thu, 21 Jun 2007 08:57:44 GMT"}], "update_date": "2007-11-14", "authors_parsed": [["Mezard", "Marc", ""], ["Toninelli", "Cristina", ""]]}, {"id": "0706.3565", "submitter": "Anatoly Plotnikov", "authors": "Anatoly D. Plotnikov", "title": "Experimental Algorithm for the Maximum Independent Set Problem", "comments": "From author's book \"Discrete mathematics\",3-th ed., Moscow,New\n  knowledge,2007, 18 pages, 8 figures", "journal-ref": "Cybernetics and Systems Analysis: Volume 48, Issue 5 (2012), Page\n  673-680", "doi": null, "report-no": null, "categories": "cs.DS", "license": null, "abstract": "  We develop an experimental algorithm for the exact solving of the maximum\nindependent set problem. The algorithm consecutively finds the maximal\nindependent sets of vertices in an arbitrary undirected graph such that the\nnext such set contains more elements than the preceding one. For this purpose,\nwe use a technique, developed by Ford and Fulkerson for the finite partially\nordered sets, in particular, their method for partition of a poset into the\nminimum number of chains with finding the maximum antichain. In the process of\nsolving, a special digraph is constructed, and a conjecture is formulated\nconcerning properties of such digraph. This allows to offer of the solution\nalgorithm. Its theoretical estimation of running time equals to is $O(n^{8})$,\nwhere $n$ is the number of graph vertices. The offered algorithm was tested by\na program on random graphs. The testing the confirms correctness of the\nalgorithm.\n", "versions": [{"version": "v1", "created": "Mon, 25 Jun 2007 06:45:49 GMT"}, {"version": "v2", "created": "Mon, 2 Jul 2007 02:16:12 GMT"}], "update_date": "2016-03-02", "authors_parsed": [["Plotnikov", "Anatoly D.", ""]]}, {"id": "0706.4107", "submitter": "Mihai Patrascu", "authors": "Gianni Franceschini, S. Muthukrishnan and Mihai Patrascu", "title": "Radix Sorting With No Extra Space", "comments": "Full version of paper accepted to ESA 2007. (17 pages)", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DS", "license": null, "abstract": "  It is well known that n integers in the range [1,n^c] can be sorted in O(n)\ntime in the RAM model using radix sorting. More generally, integers in any\nrange [1,U] can be sorted in O(n sqrt{loglog n}) time. However, these\nalgorithms use O(n) words of extra memory. Is this necessary?\n  We present a simple, stable, integer sorting algorithm for words of size\nO(log n), which works in O(n) time and uses only O(1) words of extra memory on\na RAM model. This is the integer sorting case most useful in practice. We\nextend this result with same bounds to the case when the keys are read-only,\nwhich is of theoretical interest. Another interesting question is the case of\narbitrary c. Here we present a black-box transformation from any RAM sorting\nalgorithm to a sorting algorithm which uses only O(1) extra space and has the\nsame running time. This settles the complexity of in-place sorting in terms of\nthe complexity of sorting.\n", "versions": [{"version": "v1", "created": "Wed, 27 Jun 2007 22:04:40 GMT"}], "update_date": "2007-06-29", "authors_parsed": [["Franceschini", "Gianni", ""], ["Muthukrishnan", "S.", ""], ["Patrascu", "Mihai", ""]]}]