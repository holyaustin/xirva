[{"id": "0711.0086", "submitter": "Sergey Gubin", "authors": "Sergey Gubin", "title": "Convex and linear models of NP-problems", "comments": "In part, the results were presented on WCECS 2007/ICCSA 2007. V2\n  edited", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DM cs.CC cs.DS math.CO", "license": null, "abstract": "  Reducing the NP-problems to the convex/linear analysis on the Birkhoff\npolytope.\n", "versions": [{"version": "v1", "created": "Thu, 1 Nov 2007 08:33:07 GMT"}, {"version": "v2", "created": "Sun, 4 Nov 2007 06:11:22 GMT"}], "update_date": "2007-11-04", "authors_parsed": [["Gubin", "Sergey", ""]]}, {"id": "0711.0189", "submitter": "Ulrike von Luxburg", "authors": "Ulrike von Luxburg", "title": "A Tutorial on Spectral Clustering", "comments": null, "journal-ref": "Statistics and Computing 17(4), 2007", "doi": null, "report-no": null, "categories": "cs.DS cs.LG", "license": null, "abstract": "  In recent years, spectral clustering has become one of the most popular\nmodern clustering algorithms. It is simple to implement, can be solved\nefficiently by standard linear algebra software, and very often outperforms\ntraditional clustering algorithms such as the k-means algorithm. On the first\nglance spectral clustering appears slightly mysterious, and it is not obvious\nto see why it works at all and what it really does. The goal of this tutorial\nis to give some intuition on those questions. We describe different graph\nLaplacians and their basic properties, present the most common spectral\nclustering algorithms, and derive those algorithms from scratch by several\ndifferent approaches. Advantages and disadvantages of the different spectral\nclustering algorithms are discussed.\n", "versions": [{"version": "v1", "created": "Thu, 1 Nov 2007 19:04:43 GMT"}], "update_date": "2007-11-02", "authors_parsed": [["von Luxburg", "Ulrike", ""]]}, {"id": "0711.0251", "submitter": "Rogers Mathew", "authors": "Telikepalli Kavitha and Rogers Mathew", "title": "Faster Algorithms for Online Topological Ordering", "comments": null, "journal-ref": null, "doi": null, "report-no": "IISC-CSA-TR-2007-12", "categories": "cs.DS", "license": null, "abstract": "  We present two algorithms for maintaining the topological order of a directed\nacyclic graph with n vertices, under an online edge insertion sequence of m\nedges. Efficient algorithms for online topological ordering have many\napplications, including online cycle detection, which is to discover the first\nedge that introduces a cycle under an arbitrary sequence of edge insertions in\na directed graph. In this paper we present efficient algorithms for the online\ntopological ordering problem.\n  We first present a simple algorithm with running time O(n^{5/2}) for the\nonline topological ordering problem. This is the current fastest algorithm for\nthis problem on dense graphs, i.e., when m > n^{5/3}. We then present an\nalgorithm with running time O((m + nlog n)\\sqrt{m}); this is more efficient for\nsparse graphs. Our results yield an improved upper bound of O(min(n^{5/2}, (m +\nnlog n)sqrt{m})) for the online topological ordering problem.\n", "versions": [{"version": "v1", "created": "Fri, 2 Nov 2007 06:42:43 GMT"}], "update_date": "2007-11-05", "authors_parsed": [["Kavitha", "Telikepalli", ""], ["Mathew", "Rogers", ""]]}, {"id": "0711.0311", "submitter": "H. Georg Buesching", "authors": "H. Georg Buesching", "title": "Improving the LP bound of a MILP by branching concurrently", "comments": "21 pages of a possibly new theory submitted by a hobby researcher.\n  Uses algorithmic.sty", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DM cs.DS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We'll measure the differences of the dual variables and the gain of the\nobjective function when creating new problems, which each has one inequality\nmore than the starting LP-instance. These differences of the dual variables are\nnaturally connected to the branches. Then we'll choose those differences of\ndual variables, so that for all combinations of choices at the connected\nbranches, all dual inequalities will hold for sure. By adding the gain of each\nchosen branching, we get a total gain, which gives a better limit of the\noriginal problem. By this technique it is also possible to create cuts.\n", "versions": [{"version": "v1", "created": "Fri, 2 Nov 2007 13:57:41 GMT"}, {"version": "v2", "created": "Fri, 21 Nov 2008 20:33:30 GMT"}], "update_date": "2008-11-21", "authors_parsed": [["Buesching", "H. Georg", ""]]}, {"id": "0711.1055", "submitter": "Klas Olof Daniel Andersson", "authors": "Daniel Andersson, Kristoffer Arnsfelt Hansen, Peter Bro Miltersen,\n  Troels Bjerre Sorensen", "title": "Simple Recursive Games", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.GT cs.DS", "license": null, "abstract": "  We define the class of \"simple recursive games\". A simple recursive game is\ndefined as a simple stochastic game (a notion due to Anne Condon), except that\nwe allow arbitrary real payoffs but disallow moves of chance. We study the\ncomplexity of solving simple recursive games and obtain an almost-linear time\ncomparison-based algorithm for computing an equilibrium of such a game. The\nexistence of a linear time comparison-based algorithm remains an open problem.\n", "versions": [{"version": "v1", "created": "Wed, 7 Nov 2007 10:23:47 GMT"}], "update_date": "2007-11-08", "authors_parsed": [["Andersson", "Daniel", ""], ["Hansen", "Kristoffer Arnsfelt", ""], ["Miltersen", "Peter Bro", ""], ["Sorensen", "Troels Bjerre", ""]]}, {"id": "0711.1682", "submitter": "Loukas Georgiadis", "authors": "Loukas Georgiadis, Haim Kaplan, Nira Shafrir, Robert E. Tarjan, Renato\n  F. Werneck", "title": "Data Structures for Mergeable Trees", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DS", "license": null, "abstract": "  Motivated by an application in computational topology, we consider a novel\nvariant of the problem of efficiently maintaining dynamic rooted trees. This\nvariant requires merging two paths in a single operation. In contrast to the\nstandard problem, in which only one tree arc changes at a time, a single merge\noperation can change many arcs. In spite of this, we develop a data structure\nthat supports merges on an n-node forest in O(log^2 n) amortized time and all\nother standard tree operations in O(log n) time (amortized, worst-case, or\nrandomized depending on the underlying data structure). For the special case\nthat occurs in the motivating application, in which arbitrary arc deletions\n(cuts) are not allowed, we give a data structure with an O(log n) time bound\nper operation. This is asymptotically optimal under certain assumptions. For\nthe even-more special case in which both cuts and parent queries are\ndisallowed, we give an alternative O(log n)-time solution that uses standard\ndynamic trees as a black box. This solution also applies to the motivating\napplication. Our methods use previous work on dynamic trees in various ways,\nbut the analysis of each algorithm requires novel ideas. We also investigate\nlower bounds for the problem under various assumptions.\n", "versions": [{"version": "v1", "created": "Sun, 11 Nov 2007 21:28:20 GMT"}], "update_date": "2007-11-13", "authors_parsed": [["Georgiadis", "Loukas", ""], ["Kaplan", "Haim", ""], ["Shafrir", "Nira", ""], ["Tarjan", "Robert E.", ""], ["Werneck", "Renato F.", ""]]}, {"id": "0711.2157", "submitter": "Bodo Manthey", "authors": "Bodo Manthey", "title": "On Approximating Multi-Criteria TSP", "comments": "Preliminary version at STACS 2009. This paper is a revised full\n  version, where some proofs are simplified", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present approximation algorithms for almost all variants of the\nmulti-criteria traveling salesman problem (TSP).\n  First, we devise randomized approximation algorithms for multi-criteria\nmaximum traveling salesman problems (Max-TSP). For multi-criteria Max-STSP,\nwhere the edge weights have to be symmetric, we devise an algorithm with an\napproximation ratio of 2/3 - eps. For multi-criteria Max-ATSP, where the edge\nweights may be asymmetric, we present an algorithm with a ratio of 1/2 - eps.\nOur algorithms work for any fixed number k of objectives. Furthermore, we\npresent a deterministic algorithm for bi-criteria Max-STSP that achieves an\napproximation ratio of 7/27.\n  Finally, we present a randomized approximation algorithm for the asymmetric\nmulti-criteria minimum TSP with triangle inequality Min-ATSP. This algorithm\nachieves a ratio of log n + eps.\n", "versions": [{"version": "v1", "created": "Wed, 14 Nov 2007 10:53:49 GMT"}, {"version": "v2", "created": "Wed, 19 Nov 2008 09:20:10 GMT"}, {"version": "v3", "created": "Wed, 13 Jul 2011 12:29:45 GMT"}], "update_date": "2011-07-14", "authors_parsed": [["Manthey", "Bodo", ""]]}, {"id": "0711.2399", "submitter": "Alexander Tiskin", "authors": "Vladimir Deineko and Alexander Tiskin", "title": "Minimum-weight double-tree shortcutting for Metric TSP: Bounding the\n  approximation ratio", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The Metric Traveling Salesman Problem (TSP) is a classical NP-hard\noptimization problem. The double-tree shortcutting method for Metric TSP yields\nan exponentially-sized space of TSP tours, each of which approximates the\noptimal solution within at most a factor of 2. We consider the problem of\nfinding among these tours the one that gives the closest approximation, i.e.\\\nthe \\emph{minimum-weight double-tree shortcutting}. Previously, we gave an\nefficient algorithm for this problem, and carried out its experimental\nanalysis. In this paper, we address the related question of the worst-case\napproximation ratio for the minimum-weight double-tree shortcutting method. In\nparticular, we give lower bounds on the approximation ratio in some specific\nmetric spaces: the ratio of 2 in the discrete shortest path metric, 1.622 in\nthe planar Euclidean metric, and 1.666 in the planar Minkowski metric. The\nfirst of these lower bounds is tight; we conjecture that the other two bounds\nare also tight, and in particular that the minimum-weight double-tree method\nprovides a 1.622-approximation for planar Euclidean TSP.\n", "versions": [{"version": "v1", "created": "Thu, 15 Nov 2007 13:19:01 GMT"}, {"version": "v2", "created": "Tue, 16 Dec 2008 11:58:25 GMT"}, {"version": "v3", "created": "Sun, 28 Dec 2008 17:28:18 GMT"}], "update_date": "2008-12-30", "authors_parsed": [["Deineko", "Vladimir", ""], ["Tiskin", "Alexander", ""]]}, {"id": "0711.2585", "submitter": "Petteri Kaski", "authors": "Andreas Bj\\\"orklund, Thore Husfeldt, Petteri Kaski, Mikko Koivisto", "title": "Computing the Tutte polynomial in vertex-exponential time", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DS cond-mat.stat-mech math.CO", "license": null, "abstract": "  The deletion--contraction algorithm is perhaps the most popular method for\ncomputing a host of fundamental graph invariants such as the chromatic, flow,\nand reliability polynomials in graph theory, the Jones polynomial of an\nalternating link in knot theory, and the partition functions of the models of\nIsing, Potts, and Fortuin--Kasteleyn in statistical physics. Prior to this\nwork, deletion--contraction was also the fastest known general-purpose\nalgorithm for these invariants, running in time roughly proportional to the\nnumber of spanning trees in the input graph. Here, we give a substantially\nfaster algorithm that computes the Tutte polynomial--and hence, all the\naforementioned invariants and more--of an arbitrary graph in time within a\npolynomial factor of the number of connected vertex sets. The algorithm\nactually evaluates a multivariate generalization of the Tutte polynomial by\nmaking use of an identity due to Fortuin and Kasteleyn. We also provide a\npolynomial-space variant of the algorithm and give an analogous result for\nChung and Graham's cover polynomial. An implementation of the algorithm\noutperforms deletion--contraction also in practice.\n", "versions": [{"version": "v1", "created": "Fri, 16 Nov 2007 10:51:10 GMT"}, {"version": "v2", "created": "Mon, 19 Nov 2007 10:41:46 GMT"}, {"version": "v3", "created": "Mon, 14 Jan 2008 16:06:31 GMT"}, {"version": "v4", "created": "Mon, 14 Apr 2008 10:31:54 GMT"}], "update_date": "2008-04-14", "authors_parsed": [["Bj\u00f6rklund", "Andreas", ""], ["Husfeldt", "Thore", ""], ["Kaski", "Petteri", ""], ["Koivisto", "Mikko", ""]]}, {"id": "0711.2710", "submitter": "Bernhard Haeupler", "authors": "Bernhard Haeupler and Robert E. Tarjan", "title": "Finding a Feasible Flow in a Strongly Connected Network", "comments": "4 pages, submitted to Operations Research Letters, minor updates:\n  typos corrected, speed-up = improvement of the worst-case time bound", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DS", "license": null, "abstract": "  We consider the problem of finding a feasible single-commodity flow in a\nstrongly connected network with fixed supplies and demands, provided that the\nsum of supplies equals the sum of demands and the minimum arc capacity is at\nleast this sum. A fast algorithm for this problem improves the worst-case time\nbound of the Goldberg-Rao maximum flow method by a constant factor. Erlebach\nand Hagerup gave an linear-time feasible flow algorithm. We give an arguably\nsimpler one.\n", "versions": [{"version": "v1", "created": "Sat, 17 Nov 2007 01:59:53 GMT"}, {"version": "v2", "created": "Mon, 3 Dec 2007 15:34:37 GMT"}], "update_date": "2007-12-03", "authors_parsed": [["Haeupler", "Bernhard", ""], ["Tarjan", "Robert E.", ""]]}, {"id": "0711.3250", "submitter": "Venkata Seshu Kumar Kurapati Mr", "authors": "Venkata Seshu Kumar Kurapati", "title": "Improved Fully Dynamic Reachability Algorithm for Directed Graph", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DS", "license": null, "abstract": "  We propose a fully dynamic algorithm for maintaining reachability information\nin directed graphs. The proposed deterministic dynamic algorithm has an update\ntime of $O((ins*n^{2}) + (del * (m+n*log(n))))$ where $m$ is the current number\nof edges, $n$ is the number of vertices in the graph, $ins$ is the number of\nedge insertions and $del$ is the number of edge deletions. Each query can be\nanswered in O(1) time after each update. The proposed algorithm combines\nexisting fully dynamic reachability algorithm with well known witness counting\ntechnique to improve efficiency of maintaining reachability information when\nedges are deleted. The proposed algorithm improves by a factor of\n$O(\\frac{n^2}{m+n*log(n)})$ for edge deletion over the best existing fully\ndynamic algorithm for maintaining reachability information.\n", "versions": [{"version": "v1", "created": "Wed, 21 Nov 2007 03:22:12 GMT"}], "update_date": "2007-11-22", "authors_parsed": [["Kurapati", "Venkata Seshu Kumar", ""]]}, {"id": "0711.3672", "submitter": "Sebastien Tixeuil", "authors": "St\\'ephane Devismes (LRI), S\\'ebastien Tixeuil (INRIA Futurs, LIP6),\n  Masafumi Yamashita (TCSG)", "title": "Weak vs. Self vs. Probabilistic Stabilization", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.DS cs.NI", "license": null, "abstract": "  Self-stabilization is a strong property that guarantees that a network always\nresume correct behavior starting from an arbitrary initial state. Weaker\nguarantees have later been introduced to cope with impossibility results:\nprobabilistic stabilization only gives probabilistic convergence to a correct\nbehavior. Also, weak stabilization only gives the possibility of convergence.\nIn this paper, we investigate the relative power of weak, self, and\nprobabilistic stabilization, with respect to the set of problems that can be\nsolved. We formally prove that in that sense, weak stabilization is strictly\nstronger that self-stabilization. Also, we refine previous results on weak\nstabilization to prove that, for practical schedule instances, a deterministic\nweak-stabilizing protocol can be turned into a probabilistic self-stabilizing\none. This latter result hints at more practical use of weak-stabilization, as\nsuch algorthms are easier to design and prove than their (probabilistic)\nself-stabilizing counterparts.\n", "versions": [{"version": "v1", "created": "Fri, 23 Nov 2007 07:17:25 GMT"}, {"version": "v2", "created": "Mon, 26 Nov 2007 11:08:34 GMT"}], "update_date": "2009-09-29", "authors_parsed": [["Devismes", "St\u00e9phane", "", "LRI"], ["Tixeuil", "S\u00e9bastien", "", "INRIA Futurs, LIP6"], ["Yamashita", "Masafumi", "", "TCSG"]]}, {"id": "0711.3861", "submitter": "Kamesh Munagala", "authors": "Sudipto Guha, Kamesh Munagala and Peng Shi", "title": "Approximation Algorithms for Restless Bandit Problems", "comments": "Merges two papers appearing in the FOCS '07 and SODA '09 conferences.\n  This final version has been submitted for journal publication", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The restless bandit problem is one of the most well-studied generalizations\nof the celebrated stochastic multi-armed bandit problem in decision theory. In\nits ultimate generality, the restless bandit problem is known to be PSPACE-Hard\nto approximate to any non-trivial factor, and little progress has been made\ndespite its importance in modeling activity allocation under uncertainty.\n  We consider a special case that we call Feedback MAB, where the reward\nobtained by playing each of n independent arms varies according to an\nunderlying on/off Markov process whose exact state is only revealed when the\narm is played. The goal is to design a policy for playing the arms in order to\nmaximize the infinite horizon time average expected reward. This problem is\nalso an instance of a Partially Observable Markov Decision Process (POMDP), and\nis widely studied in wireless scheduling and unmanned aerial vehicle (UAV)\nrouting. Unlike the stochastic MAB problem, the Feedback MAB problem does not\nadmit to greedy index-based optimal policies.\n  We develop a novel and general duality-based algorithmic technique that\nyields a surprisingly simple and intuitive 2+epsilon-approximate greedy policy\nto this problem. We then define a general sub-class of restless bandit problems\nthat we term Monotone bandits, for which our policy is a 2-approximation. Our\ntechnique is robust enough to handle generalizations of these problems to\nincorporate various side-constraints such as blocking plays and switching\ncosts. This technique is also of independent interest for other restless bandit\nproblems. By presenting the first (and efficient) O(1) approximations for\nnon-trivial instances of restless bandits as well as of POMDPs, our work\ninitiates the study of approximation algorithms in both these contexts.\n", "versions": [{"version": "v1", "created": "Sun, 25 Nov 2007 18:01:35 GMT"}, {"version": "v2", "created": "Fri, 11 Apr 2008 13:42:55 GMT"}, {"version": "v3", "created": "Sat, 12 Jul 2008 09:16:54 GMT"}, {"version": "v4", "created": "Tue, 27 Jan 2009 17:07:14 GMT"}, {"version": "v5", "created": "Tue, 3 Feb 2009 17:39:36 GMT"}], "update_date": "2009-02-03", "authors_parsed": [["Guha", "Sudipto", ""], ["Munagala", "Kamesh", ""], ["Shi", "Peng", ""]]}, {"id": "0711.4052", "submitter": "Paul Bonsma", "authors": "Paul Bonsma and Frederic Dorn", "title": "An FPT Algorithm for Directed Spanning k-Leaf", "comments": "17 pages, 8 figures", "journal-ref": null, "doi": null, "report-no": "2007-046", "categories": "cs.DS cs.DM", "license": null, "abstract": "  An out-branching of a directed graph is a rooted spanning tree with all arcs\ndirected outwards from the root. We consider the problem of deciding whether a\ngiven directed graph D has an out-branching with at least k leaves (Directed\nSpanning k-Leaf). We prove that this problem is fixed parameter tractable, when\nk is chosen as the parameter. Previously this was only known for restricted\nclasses of directed graphs.\n  The main new ingredient in our approach is a lemma that shows that given a\nlocally optimal out-branching of a directed graph in which every arc is part of\nat least one out-branching, either an out-branching with at least k leaves\nexists, or a path decomposition with width O(k^3) can be found. This enables a\ndynamic programming based algorithm of running time 2^{O(k^3 \\log k)} n^{O(1)},\nwhere n=|V(D)|.\n", "versions": [{"version": "v1", "created": "Mon, 26 Nov 2007 17:05:38 GMT"}], "update_date": "2007-11-27", "authors_parsed": [["Bonsma", "Paul", ""], ["Dorn", "Frederic", ""]]}, {"id": "0711.4573", "submitter": "Mathieu Raffinot", "authors": "Pierre Charbit (LIAFA), Michel Habib (LIAFA), Vincent Limouzy (LIAFA),\n  Fabien De Montgolfier (LIAFA), Mathieu Raffinot (LIAFA), Micha\\\"el Rao\n  (LIRMM)", "title": "A Note On Computing Set Overlap Classes", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DS", "license": null, "abstract": "  Let ${\\cal V}$ be a finite set of $n$ elements and ${\\cal F}=\\{X_1,X_2, >...,\nX_m\\}$ a family of $m$ subsets of ${\\cal V}.$ Two sets $X_i$ and $X_j$ of\n${\\cal F}$ overlap if $X_i \\cap X_j \\neq \\emptyset,$ $X_j \\setminus X_i \\neq\n\\emptyset,$ and $X_i \\setminus X_j \\neq \\emptyset.$ Two sets $X,Y\\in {\\cal F}$\nare in the same overlap class if there is a series $X=X_1,X_2, ..., X_k=Y$ of\nsets of ${\\cal F}$ in which each $X_iX_{i+1}$ overlaps. In this note, we focus\non efficiently identifying all overlap classes in $O(n+\\sum_{i=1}^m |X_i|)$\ntime. We thus revisit the clever algorithm of Dahlhaus of which we give a clear\npresentation and that we simplify to make it practical and implementable in its\nreal worst case complexity. An useful variant of Dahlhaus's approach is also\nexplained.\n", "versions": [{"version": "v1", "created": "Wed, 28 Nov 2007 20:07:46 GMT"}], "update_date": "2007-11-29", "authors_parsed": [["Charbit", "Pierre", "", "LIAFA"], ["Habib", "Michel", "", "LIAFA"], ["Limouzy", "Vincent", "", "LIAFA"], ["De Montgolfier", "Fabien", "", "LIAFA"], ["Raffinot", "Mathieu", "", "LIAFA"], ["Rao", "Micha\u00ebl", "", "LIRMM"]]}, {"id": "0711.4825", "submitter": "Nitish Korula", "authors": "Chandra Chekuri, Nitish Korula", "title": "Approximation Algorithms for Orienteering with Time Windows", "comments": "10 pages, 2 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DS", "license": null, "abstract": "  Orienteering is the following optimization problem: given an edge-weighted\ngraph (directed or undirected), two nodes s,t and a time limit T, find an s-t\nwalk of total length at most T that maximizes the number of distinct nodes\nvisited by the walk. One obtains a generalization, namely orienteering with\ntime-windows (also referred to as TSP with time-windows), if each node v has a\nspecified time-window [R(v), D(v)] and a node v is counted as visited by the\nwalk only if v is visited during its time-window. For the time-window problem,\nan O(\\log \\opt) approximation can be achieved even for directed graphs if the\nalgorithm is allowed quasi-polynomial time. However, the best known polynomial\ntime approximation ratios are O(\\log^2 \\opt) for undirected graphs and O(\\log^4\n\\opt) in directed graphs. In this paper we make some progress towards closing\nthis discrepancy, and in the process obtain improved approximation ratios in\nseveral natural settings. Let L(v) = D(v) - R(v) denote the length of the\ntime-window for v and let \\lmax = \\max_v L(v) and \\lmin = \\min_v L(v). Our\nresults are given below with \\alpha denoting the known approximation ratio for\norienteering (without time-windows). Currently \\alpha = (2+\\eps) for undirected\ngraphs and \\alpha = O(\\log^2 \\opt) in directed graphs.\n  1. An O(\\alpha \\log \\lmax) approximation when R(v) and D(v) are integer\nvalued for each v.\n  2. An O(\\alpha \\max{\\log \\opt, \\log \\frac{\\lmax}{\\lmin}}) approximation.\n  3. An O(\\alpha \\log \\frac{\\lmax}{\\lmin}) approximation when no start and end\npoints are specified.\n  In particular, if \\frac{\\lmax}{\\lmin} is poly-bounded, we obtain an O(\\log n)\napproximation for the time-window problem in undirected graphs.\n", "versions": [{"version": "v1", "created": "Thu, 29 Nov 2007 21:10:48 GMT"}], "update_date": "2007-12-03", "authors_parsed": [["Chekuri", "Chandra", ""], ["Korula", "Nitish", ""]]}, {"id": "0711.4902", "submitter": "Mikko Alava", "authors": "Mikko Alava, John Ardelius, Erik Aurell, Petteri Kaski, Supriya\n  Krishnamurthy, Pekka Orponen, and Sakari Seitz", "title": "Circumspect descent prevails in solving random constraint satisfaction\n  problems", "comments": "6 figures, about 17 pates", "journal-ref": null, "doi": "10.1073/pnas.0712263105", "report-no": null, "categories": "cs.DS cond-mat.stat-mech cs.AI", "license": null, "abstract": "  We study the performance of stochastic local search algorithms for random\ninstances of the $K$-satisfiability ($K$-SAT) problem. We introduce a new\nstochastic local search algorithm, ChainSAT, which moves in the energy\nlandscape of a problem instance by {\\em never going upwards} in energy.\nChainSAT is a \\emph{focused} algorithm in the sense that it considers only\nvariables occurring in unsatisfied clauses. We show by extensive numerical\ninvestigations that ChainSAT and other focused algorithms solve large $K$-SAT\ninstances almost surely in linear time, up to high clause-to-variable ratios\n$\\alpha$; for example, for K=4 we observe linear-time performance well beyond\nthe recently postulated clustering and condensation transitions in the solution\nspace. The performance of ChainSAT is a surprise given that by design the\nalgorithm gets trapped into the first local energy minimum it encounters, yet\nno such minima are encountered. We also study the geometry of the solution\nspace as accessed by stochastic local search algorithms.\n", "versions": [{"version": "v1", "created": "Fri, 30 Nov 2007 11:01:40 GMT"}], "update_date": "2009-11-13", "authors_parsed": [["Alava", "Mikko", ""], ["Ardelius", "John", ""], ["Aurell", "Erik", ""], ["Kaski", "Petteri", ""], ["Krishnamurthy", "Supriya", ""], ["Orponen", "Pekka", ""], ["Seitz", "Sakari", ""]]}, {"id": "0711.4990", "submitter": "Narad Rampersad", "authors": "Dalia Krieger, Narad Rampersad, Jeffrey Shallit", "title": "Finding the growth rate of a regular language in polynomial time", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DM cs.DS", "license": null, "abstract": "  We give an O(n^3+n^2 t) time algorithm to determine whether an NFA with n\nstates and t transitions accepts a language of polynomial or exponential\ngrowth. We also show that given a DFA accepting a language of polynomial\ngrowth, we can determine the order of polynomial growth in quadratic time.\n", "versions": [{"version": "v1", "created": "Fri, 30 Nov 2007 17:48:00 GMT"}], "update_date": "2007-12-03", "authors_parsed": [["Krieger", "Dalia", ""], ["Rampersad", "Narad", ""], ["Shallit", "Jeffrey", ""]]}]