[{"id": "1701.00722", "submitter": "Laslo Hunhold", "authors": "Laslo Hunhold", "title": "The Unum Number Format: Mathematical Foundations, Implementation and\n  Comparison to IEEE 754 Floating-Point Numbers", "comments": "95 pages, 7 figures, 14 code listings", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.NA cs.MS", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  This thesis examines a modern concept for machine numbers based on interval\narithmetic called 'Unums' and compares it to IEEE 754 floating-point\narithmetic, evaluating possible uses of this format where floating-point\nnumbers are inadequate. In the course of this examination, this thesis builds\ntheoretical foundations for IEEE 754 floating-point numbers, interval\narithmetic based on the projectively extended real numbers and Unums.\n", "versions": [{"version": "v1", "created": "Mon, 2 Jan 2017 23:21:43 GMT"}], "update_date": "2017-01-04", "authors_parsed": [["Hunhold", "Laslo", ""]]}, {"id": "1701.03980", "submitter": "Graham Neubig", "authors": "Graham Neubig, Chris Dyer, Yoav Goldberg, Austin Matthews, Waleed\n  Ammar, Antonios Anastasopoulos, Miguel Ballesteros, David Chiang, Daniel\n  Clothiaux, Trevor Cohn, Kevin Duh, Manaal Faruqui, Cynthia Gan, Dan Garrette,\n  Yangfeng Ji, Lingpeng Kong, Adhiguna Kuncoro, Gaurav Kumar, Chaitanya\n  Malaviya, Paul Michel, Yusuke Oda, Matthew Richardson, Naomi Saphra, Swabha\n  Swayamdipta, Pengcheng Yin", "title": "DyNet: The Dynamic Neural Network Toolkit", "comments": "33 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "stat.ML cs.CL cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We describe DyNet, a toolkit for implementing neural network models based on\ndynamic declaration of network structure. In the static declaration strategy\nthat is used in toolkits like Theano, CNTK, and TensorFlow, the user first\ndefines a computation graph (a symbolic representation of the computation), and\nthen examples are fed into an engine that executes this computation and\ncomputes its derivatives. In DyNet's dynamic declaration strategy, computation\ngraph construction is mostly transparent, being implicitly constructed by\nexecuting procedural code that computes the network outputs, and the user is\nfree to use different network structures for each input. Dynamic declaration\nthus facilitates the implementation of more complicated network architectures,\nand DyNet is specifically designed to allow users to implement their models in\na way that is idiomatic in their preferred programming language (C++ or\nPython). One challenge with dynamic declaration is that because the symbolic\ncomputation graph is defined anew for every training example, its construction\nmust have low overhead. To achieve this, DyNet has an optimized C++ backend and\nlightweight graph representation. Experiments show that DyNet's speeds are\nfaster than or comparable with static declaration toolkits, and significantly\nfaster than Chainer, another dynamic declaration toolkit. DyNet is released\nopen-source under the Apache 2.0 license and available at\nhttp://github.com/clab/dynet.\n", "versions": [{"version": "v1", "created": "Sun, 15 Jan 2017 01:53:23 GMT"}], "update_date": "2017-01-17", "authors_parsed": [["Neubig", "Graham", ""], ["Dyer", "Chris", ""], ["Goldberg", "Yoav", ""], ["Matthews", "Austin", ""], ["Ammar", "Waleed", ""], ["Anastasopoulos", "Antonios", ""], ["Ballesteros", "Miguel", ""], ["Chiang", "David", ""], ["Clothiaux", "Daniel", ""], ["Cohn", "Trevor", ""], ["Duh", "Kevin", ""], ["Faruqui", "Manaal", ""], ["Gan", "Cynthia", ""], ["Garrette", "Dan", ""], ["Ji", "Yangfeng", ""], ["Kong", "Lingpeng", ""], ["Kuncoro", "Adhiguna", ""], ["Kumar", "Gaurav", ""], ["Malaviya", "Chaitanya", ""], ["Michel", "Paul", ""], ["Oda", "Yusuke", ""], ["Richardson", "Matthew", ""], ["Saphra", "Naomi", ""], ["Swayamdipta", "Swabha", ""], ["Yin", "Pengcheng", ""]]}, {"id": "1701.05431", "submitter": "Adam Larat", "authors": "Mohamed Essadki (IFPEN, FR3487, EM2C), Jonathan Jung (LMAP), Adam\n  Larat (FR3487, EM2C), Milan Pelletier (EM2C), Vincent Perrier (LMAP)", "title": "A task-driven implementation of a simple numerical solver for hyperbolic\n  conservation laws", "comments": null, "journal-ref": "ESAIM: Proceedings and Surveys, EDP Sciences, pp.1 - 10 (2017)", "doi": null, "report-no": null, "categories": "cs.DC cs.MS math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This article describes the implementation of an all-in-one numerical\nprocedure within the runtime StarPU. In order to limit the complexity of the\nmethod, for the sake of clarity of the presentation of the non-classical\ntask-driven programming environnement, we have limited the numerics to first\norder in space and time. Results show that the task distribution is efficient\nif the tasks are numerous and individually large enough so that the task heap\ncan be saturated by tasks which computational time covers the task management\noverhead. Next, we also see that even though they are mostly faster on graphic\ncards, not all the tasks are suitable for GPUs, which brings forward the\nimportance of the task scheduler. Finally, we look at a more realistic system\nof conservation laws with an expensive source term, what allows us to conclude\nand open on future works involving higher local arithmetic intensity, by\nincreasing the order of the numerical method or by enriching the model\n(increased number of parameters and therefore equations).\n", "versions": [{"version": "v1", "created": "Thu, 19 Jan 2017 14:29:17 GMT"}], "update_date": "2017-01-22", "authors_parsed": [["Essadki", "Mohamed", "", "IFPEN, FR3487, EM2C"], ["Jung", "Jonathan", "", "LMAP"], ["Larat", "Adam", "", "FR3487, EM2C"], ["Pelletier", "Milan", "", "EM2C"], ["Perrier", "Vincent", "", "LMAP"]]}, {"id": "1701.05913", "submitter": "Hui Liu Mr", "authors": "Hui Liu and Zhangxin Chen", "title": "Scalable linear solvers for sparse linear systems from large-scale\n  numerical simulations", "comments": "arXiv admin note: substantial text overlap with arXiv:1602.05901", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper presents our work on designing scalable linear solvers for\nlarge-scale reservoir simulations. The main objective is to support\nimplementation of parallel reservoir simulators on distributed-memory parallel\nsystems, where MPI (Message Passing Interface) is employed for communications\namong computation nodes. Distributed matrix and vector modules are designed,\nwhich are the base of our parallel linear systems. Commonly-used Krylov\nsubspace linear solvers are implemented, including the restarted GMRES method,\nthe LGMRES method, and the BiCGSTAB method. It also has an interface to a\nparallel algebraic multigrid solver, BoomerAMG from HYPRE. Parallel\ngeneral-purpose preconditioners and special preconditioners for reservoir\nsimulations are also developed. The numerical experiments show that our linear\nsolvers have excellent scalability using thousands of CPU cores.\n", "versions": [{"version": "v1", "created": "Fri, 20 Jan 2017 19:37:44 GMT"}], "update_date": "2017-01-24", "authors_parsed": [["Liu", "Hui", ""], ["Chen", "Zhangxin", ""]]}]