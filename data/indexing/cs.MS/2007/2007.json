[{"id": "2007.00056", "submitter": "Sashikumaar Ganesan Prof.", "authors": "Sashikumaar Ganesan and Manan Shah", "title": "SParSH-AMG: A library for hybrid CPU-GPU algebraic multigrid and\n  preconditioned iterative methods", "comments": "21 pages, 17 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Hybrid CPU-GPU algorithms for Algebraic Multigrid methods (AMG) to\nefficiently utilize both CPU and GPU resources are presented. In particular,\nhybrid AMG framework focusing on minimal utilization of GPU memory with\nperformance on par with GPU-only implementations is developed. The hybrid AMG\nframework can be tuned to operate at a significantly lower GPU-memory,\nconsequently, enables to solve large algebraic systems. Combining the hybrid\nAMG framework as a preconditioner with Krylov Subspace solvers like Conjugate\nGradient, BiCG methods provides a solver stack to solve a large class of\nproblems. The performance of the proposed hybrid AMG framework is analysed for\nan array of matrices with different properties and size. Further, the\nperformance of CPU-GPU algorithms are compared with the GPU-only\nimplementations to illustrate the significantly lower memory requirements.\n", "versions": [{"version": "v1", "created": "Tue, 30 Jun 2020 18:39:50 GMT"}], "update_date": "2020-07-02", "authors_parsed": [["Ganesan", "Sashikumaar", ""], ["Shah", "Manan", ""]]}, {"id": "2007.00094", "submitter": "Matthias Maier", "authors": "Matthias Maier, Martin Kronbichler", "title": "Efficient parallel 3D computation of the compressible Euler equations\n  with an invariant-domain preserving second-order finite-element scheme", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.NA math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We discuss the efficient implementation of a high-performance second-order\ncollocation-type finite-element scheme for solving the compressible Euler\nequations of gas dynamics on unstructured meshes. The solver is based on the\nconvex limiting technique introduced by Guermond et al. (SIAM J. Sci. Comput.\n40, A3211-A3239, 2018). As such it is invariant-domain preserving, i.e., the\nsolver maintains important physical invariants and is guaranteed to be stable\nwithout the use of ad-hoc tuning parameters. This stability comes at the\nexpense of a significantly more involved algorithmic structure that renders\nconventional high-performance discretizations challenging. We develop an\nalgorithmic design that allows SIMD vectorization of the compute kernel,\nidentify the main ingredients for a good node-level performance, and report\nexcellent weak and strong scaling of a hybrid thread/MPI parallelization.\n", "versions": [{"version": "v1", "created": "Tue, 30 Jun 2020 20:19:45 GMT"}, {"version": "v2", "created": "Tue, 2 Feb 2021 21:07:20 GMT"}], "update_date": "2021-02-04", "authors_parsed": [["Maier", "Matthias", ""], ["Kronbichler", "Martin", ""]]}, {"id": "2007.00202", "submitter": "Yang Liu", "authors": "Yang Liu, Pieter Ghysels, Lisa Claus, Xiaoye Sherry Li", "title": "Sparse Approximate Multifrontal Factorization with Butterfly Compression\n  for High Frequency Wave Equations", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.CE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present a fast and approximate multifrontal solver for large-scale sparse\nlinear systems arising from finite-difference, finite-volume or finite-element\ndiscretization of high-frequency wave equations. The proposed solver leverages\nthe butterfly algorithm and its hierarchical matrix extension for compressing\nand factorizing large frontal matrices via graph-distance guided entry\nevaluation or randomized matrix-vector multiplication-based schemes. Complexity\nanalysis and numerical experiments demonstrate $\\mathcal{O}(N\\log^2 N)$\ncomputation and $\\mathcal{O}(N)$ memory complexity when applied to an $N\\times\nN$ sparse system arising from 3D high-frequency Helmholtz and Maxwell problems.\n", "versions": [{"version": "v1", "created": "Wed, 1 Jul 2020 03:27:33 GMT"}], "update_date": "2020-07-02", "authors_parsed": [["Liu", "Yang", ""], ["Ghysels", "Pieter", ""], ["Claus", "Lisa", ""], ["Li", "Xiaoye Sherry", ""]]}, {"id": "2007.00324", "submitter": "Zhenghai Chen", "authors": "Zhenghai Chen, Tiow-Seng Tan and Hong-Yang Ong", "title": "On Designing GPU Algorithms with Applications to Mesh Refinement", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.GR cs.DC cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present a set of rules to guide the design of GPU algorithms. These rules\nare grounded on the principle of reducing waste in GPU utility to achieve good\nspeed up. In accordance to these rules, we propose GPU algorithms for 2D\nconstrained, 3D constrained and 3D Restricted Delaunay refinement problems\nrespectively. Our algorithms take a 2D planar straight line graph (PSLG) or 3D\npiecewise linear complex (PLC) $\\mathcal{G}$ as input, and generate quality\nmeshes conforming or approximating to $\\mathcal{G}$. The implementation of our\nalgorithms shows that they are the first to run an order of magnitude faster\nthan current state-of-the-art counterparts in sequential and parallel manners\nwhile using similar numbers of Steiner points to produce triangulations of\ncomparable qualities. It thus reduces the computing time of mesh refinement\nfrom possibly hours to a few seconds or minutes for possible use in interactive\ngraphics applications.\n", "versions": [{"version": "v1", "created": "Wed, 1 Jul 2020 08:43:12 GMT"}], "update_date": "2020-07-02", "authors_parsed": [["Chen", "Zhenghai", ""], ["Tan", "Tiow-Seng", ""], ["Ong", "Hong-Yang", ""]]}, {"id": "2007.01578", "submitter": "Apostolos Chalkis", "authors": "Apostolos Chalkis, Vissarion Fisikopoulos", "title": "volesti: Volume Approximation and Sampling for Convex Polytopes in R", "comments": "44 pages, 13 figures, 3 tables", "journal-ref": null, "doi": null, "report-no": null, "categories": "stat.CO cs.CG cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Sampling from high dimensional distributions and volume approximation of\nconvex bodies are fundamental operations that appear in optimization, finance,\nengineering and machine learning. In this paper we present volesti, a C++\npackage with an R interface that provides efficient, scalable algorithms for\nvolume estimation, uniform and Gaussian sampling from convex polytopes. volesti\nscales to hundreds of dimensions, handles efficiently three different types of\npolyhedra and provides non existing sampling routines to R. We demonstrate the\npower of volesti by solving several challenging problems using the R language.\n", "versions": [{"version": "v1", "created": "Fri, 3 Jul 2020 09:47:14 GMT"}, {"version": "v2", "created": "Thu, 16 Jul 2020 08:19:28 GMT"}], "update_date": "2020-07-17", "authors_parsed": [["Chalkis", "Apostolos", ""], ["Fisikopoulos", "Vissarion", ""]]}, {"id": "2007.03576", "submitter": "Mirko Myllykoski", "authors": "Mirko Myllykoski", "title": "A Task-based Multi-shift QR/QZ Algorithm with Aggressive Early Deflation", "comments": "34 pages, 19 figures, 8 tables. Minor corrections to text and\n  figures. Submitted to TOMS", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.DC cs.NA math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The QR algorithm is one of the three phases in the process of computing the\neigenvalues and the eigenvectors of a dense nonsymmetric matrix. This paper\ndescribes a task-based QR algorithm for reducing an upper Hessenberg matrix to\nreal Schur form. The task-based algorithm also supports generalized eigenvalue\nproblems (QZ algorithm) but this paper focuses more on the standard case. The\ntask-based algorithm inherits previous algorithmic improvements, such as\ntightly-coupled multi-shifts and Aggressive Early Deflation (AED), and also\nincorporates several new ideas that significantly improve the performance. This\nincludes the elimination of several synchronization points, the dynamic merging\nof previously separate computational steps, the shorting and the prioritization\nof the critical path, and the introduction of an experimental GPU support. The\ntask-based implementation is demonstrated to be significantly faster than\nmulti-threaded LAPACK and ScaLAPACK in both single-node and multi-node\nconfigurations on two different machines based on Intel and AMD CPUs. The\nimplementation is built on top of the StarPU runtime system and is part of an\nopen-source StarNEig library.\n", "versions": [{"version": "v1", "created": "Tue, 7 Jul 2020 15:53:50 GMT"}, {"version": "v2", "created": "Wed, 8 Jul 2020 12:07:51 GMT"}], "update_date": "2020-07-09", "authors_parsed": [["Myllykoski", "Mirko", ""]]}, {"id": "2007.05041", "submitter": "Robert Corless", "authors": "Robert M. Corless and Erik Postma", "title": "Blends in Maple", "comments": "20 pages, 14 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  A blend of two Taylor series for the same smooth real- or complex-valued\nfunction of a single variable can be useful for approximation. We use an\nexplicit formula for a two-point Hermite interpolational polynomial to\nconstruct such blends. We show a robust Maple implementation that can stably\nand efficiently evaluate blends using linear-cost Horner form, evaluate their\nderivatives to arbitrary order at the same time, or integrate a blend exactly.\nThe implementation is suited for use with evalhf. We provide a top-level user\ninterface and efficient module exports for programmatic use. This work was\npresented at the Maple Conference 2020. See www.maplesoft.com/mapleconference\n", "versions": [{"version": "v1", "created": "Thu, 9 Jul 2020 19:27:10 GMT"}, {"version": "v2", "created": "Fri, 27 Nov 2020 19:58:28 GMT"}], "update_date": "2020-12-01", "authors_parsed": [["Corless", "Robert M.", ""], ["Postma", "Erik", ""]]}, {"id": "2007.05094", "submitter": "Teseo Schneider", "authors": "Deshana Desai, Etai Shuchatowitz, Zhongshi Jiang, Teseo Schneider, and\n  Daniele Panozzo", "title": "ACORNS: An Easy-To-Use Code Generator for Gradients and Hessians", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.SC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The computation of first and second-order derivatives is a staple in many\ncomputing applications, ranging from machine learning to scientific computing.\nWe propose an algorithm to automatically differentiate algorithms written in a\nsubset of C99 code and its efficient implementation as a Python script. We\ndemonstrate that our algorithm enables automatic, reliable, and efficient\ndifferentiation of common algorithms used in physical simulation and geometry\nprocessing.\n", "versions": [{"version": "v1", "created": "Thu, 9 Jul 2020 22:11:48 GMT"}], "update_date": "2020-07-13", "authors_parsed": [["Desai", "Deshana", ""], ["Shuchatowitz", "Etai", ""], ["Jiang", "Zhongshi", ""], ["Schneider", "Teseo", ""], ["Panozzo", "Daniele", ""]]}, {"id": "2007.05330", "submitter": "Thomas Schilden", "authors": "Michael Herty, Jonathan H\\\"user, Uwe Naumann, Thomas Schilden,\n  Wolfgang Schr\\\"oder", "title": "Algorithmic differentiation of hyperbolic flow problems", "comments": null, "journal-ref": null, "doi": "10.1016/j.jcp.2021.110110", "report-no": null, "categories": "math.NA cs.MS cs.NA physics.flu-dyn", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We are interested in the development of an algorithmic differentiation\nframework for computing approximations to tangent vectors to scalar and systems\nof hyperbolic partial differential equations. The main difficulty of such a\nnumerical method is the presence of shock waves that are resolved by proposing\na numerical discretization of the calculus introduced in Bressan and Marson\n[Rend. Sem. Mat. Univ. Padova, 94:79-94, 1995]. Numerical results are presented\nfor the one-dimensional Burgers equation and the Euler equations. Using the\nessential routines of a state-of-the-art code for computational fluid dynamics\n(CFD) as a starting point, three modifications are required to apply the\nintroduced calculus. First, the CFD code is modified to solve an additional\nequation for the shock location. Second, we customize the computation of the\ncorresponding tangent to the shock location. Finally, the modified method is\nenhanced by algorithmic differentiation. Applying the introduced calculus to\nproblems of the Burgers equation and the Euler equations, it is found that\ncorrect sensitivities can be computed, whereas the application of black-box\nalgorithmic differentiation fails.\n", "versions": [{"version": "v1", "created": "Fri, 10 Jul 2020 12:20:20 GMT"}], "update_date": "2021-03-17", "authors_parsed": [["Herty", "Michael", ""], ["H\u00fcser", "Jonathan", ""], ["Naumann", "Uwe", ""], ["Schilden", "Thomas", ""], ["Schr\u00f6der", "Wolfgang", ""]]}, {"id": "2007.05344", "submitter": "Santosh Nagarakatte", "authors": "Jay P. Lim and Mridul Aanjaneya and John Gustafson and Santosh\n  Nagarakatte", "title": "A Novel Approach to Generate Correctly Rounded Math Libraries for New\n  Floating Point Representations", "comments": "44 pages", "journal-ref": null, "doi": null, "report-no": "Rutgers DCS Technical Report 753", "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Given the importance of floating-point~(FP) performance in numerous domains,\nseveral new variants of FP and its alternatives have been proposed (e.g.,\nBfloat16, TensorFloat32, and Posits). These representations do not have\ncorrectly rounded math libraries. Further, the use of existing FP libraries for\nthese new representations can produce incorrect results. This paper proposes a\nnovel approach for generating polynomial approximations that can be used to\nimplement correctly rounded math libraries. Existing methods generate\npolynomials that approximate the real value of an elementary function $f(x)$\nand produce wrong results due to approximation errors and rounding errors in\nthe implementation. In contrast, our approach generates polynomials that\napproximate the correctly rounded value of $f(x)$ (i.e., the value of $f(x)$\nrounded to the target representation). It provides more margin to identify\nefficient polynomials that produce correctly rounded results for all inputs. We\nframe the problem of generating efficient polynomials that produce correctly\nrounded results as a linear programming problem. Our approach guarantees that\nwe produce the correct result even with range reduction techniques. Using our\napproach, we have developed correctly rounded, yet faster, implementations of\nelementary functions for multiple target representations.\n", "versions": [{"version": "v1", "created": "Thu, 9 Jul 2020 17:45:15 GMT"}, {"version": "v2", "created": "Sun, 11 Oct 2020 19:50:44 GMT"}, {"version": "v3", "created": "Fri, 20 Nov 2020 16:24:32 GMT"}], "update_date": "2020-11-23", "authors_parsed": [["Lim", "Jay P.", ""], ["Aanjaneya", "Mridul", ""], ["Gustafson", "John", ""], ["Nagarakatte", "Santosh", ""]]}, {"id": "2007.05944", "submitter": "Lambert Theisen", "authors": "Lambert Theisen, Manuel Torrilhon", "title": "fenicsR13: A Tensorial Mixed Finite Element Solver for the Linear R13\n  Equations Using the FEniCS Computing Platform", "comments": "29 pages, 13 figures, 8 listings, 3 table. Submitted to ACM\n  Transactions on Mathematical Software (TOMS)", "journal-ref": null, "doi": "10.1145/3442378", "report-no": "ACM Transactions on Mathematical Software 47, 2, Article 17", "categories": "cs.CE cs.MS physics.flu-dyn", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present a mixed finite element solver for the linearized R13 equations of\nnon-equilibrium gas dynamics. The Python implementation builds upon the\nsoftware tools provided by the FEniCS computing platform. We describe a new\ntensorial approach utilizing the extension capabilities of FEniCS's Unified\nForm Language (UFL) to define required differential operators for tensors above\nsecond degree. The presented solver serves as an example for implementing\ntensorial variational formulations in FEniCS, for which the documentation and\nliterature seem to be very sparse. Using the software abstraction levels\nprovided by the UFL allows an almost one-to-one correspondence between the\nunderlying mathematics and the resulting source code. Test cases support the\ncorrectness of the proposed method using validation with exact solutions. To\njustify the usage of extended gas flow models, we discuss typical application\ncases involving rarefaction effects. We provide the documented and validated\nsolver publicly.\n", "versions": [{"version": "v1", "created": "Sun, 12 Jul 2020 09:07:24 GMT"}, {"version": "v2", "created": "Tue, 3 Nov 2020 15:42:16 GMT"}], "update_date": "2021-04-27", "authors_parsed": [["Theisen", "Lambert", ""], ["Torrilhon", "Manuel", ""]]}, {"id": "2007.06674", "submitter": "Pratik Nayak", "authors": "Ahmad Abdelfattah, Hartwig Anzt, Erik G. Boman, Erin Carson, Terry\n  Cojean, Jack Dongarra, Mark Gates, Thomas Gr\\\"utzmacher, Nicholas J. Higham,\n  Sherry Li, Neil Lindquist, Yang Liu, Jennifer Loe, Piotr Luszczek, Pratik\n  Nayak, Sri Pranesh, Siva Rajamanickam, Tobias Ribizel, Barry Smith, Kasia\n  Swirydowicz, Stephen Thomas, Stanimire Tomov, Yaohung M. Tsai, Ichitaro\n  Yamazaki, Urike Meier Yang", "title": "A Survey of Numerical Methods Utilizing Mixed Precision Arithmetic", "comments": "Technical report as a part of the Exascale computing project (ECP)", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.NA math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Within the past years, hardware vendors have started designing low precision\nspecial function units in response to the demand of the Machine Learning\ncommunity and their demand for high compute power in low precision formats.\nAlso the server-line products are increasingly featuring low-precision special\nfunction units, such as the NVIDIA tensor cores in ORNL's Summit supercomputer\nproviding more than an order of magnitude higher performance than what is\navailable in IEEE double precision. At the same time, the gap between the\ncompute power on the one hand and the memory bandwidth on the other hand keeps\nincreasing, making data access and communication prohibitively expensive\ncompared to arithmetic operations. To start the multiprecision focus effort, we\nsurvey the numerical linear algebra community and summarize all existing\nmultiprecision knowledge, expertise, and software capabilities in this\nlandscape analysis report. We also include current efforts and preliminary\nresults that may not yet be considered \"mature technology,\" but have the\npotential to grow into production quality within the multiprecision focus\neffort. As we expect the reader to be familiar with the basics of numerical\nlinear algebra, we refrain from providing a detailed background on the\nalgorithms themselves but focus on how mixed- and multiprecision technology can\nhelp improving the performance of these methods and present highlights of\napplication significantly outperforming the traditional fixed precision\nmethods.\n", "versions": [{"version": "v1", "created": "Mon, 13 Jul 2020 20:33:46 GMT"}], "update_date": "2020-07-15", "authors_parsed": [["Abdelfattah", "Ahmad", ""], ["Anzt", "Hartwig", ""], ["Boman", "Erik G.", ""], ["Carson", "Erin", ""], ["Cojean", "Terry", ""], ["Dongarra", "Jack", ""], ["Gates", "Mark", ""], ["Gr\u00fctzmacher", "Thomas", ""], ["Higham", "Nicholas J.", ""], ["Li", "Sherry", ""], ["Lindquist", "Neil", ""], ["Liu", "Yang", ""], ["Loe", "Jennifer", ""], ["Luszczek", "Piotr", ""], ["Nayak", "Pratik", ""], ["Pranesh", "Sri", ""], ["Rajamanickam", "Siva", ""], ["Ribizel", "Tobias", ""], ["Smith", "Barry", ""], ["Swirydowicz", "Kasia", ""], ["Thomas", "Stephen", ""], ["Tomov", "Stanimire", ""], ["Tsai", "Yaohung M.", ""], ["Yamazaki", "Ichitaro", ""], ["Yang", "Urike Meier", ""]]}, {"id": "2007.07539", "submitter": "Andreas Vogel", "authors": "Kyaw L. Oo, Andreas Vogel", "title": "Accelerating Geometric Multigrid Preconditioning with Half-Precision\n  Arithmetic on GPUs", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.AR cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  With the hardware support for half-precision arithmetic on NVIDIA V100 GPUs,\nhigh-performance computing applications can benefit from lower precision at\nappropriate spots to speed up the overall execution time. In this paper, we\ninvestigate a mixed-precision geometric multigrid method to solve large sparse\nsystems of equations stemming from discretization of elliptic PDEs. While the\nfinal solution is always computed with high-precision accuracy, an iterative\nrefinement approach with multigrid preconditioning in lower precision and\nresiduum scaling is employed. We compare the FP64 baseline for Poisson's\nequation to purely FP16 multigrid preconditioning and to the employment of\nFP16-FP32-FP64 combinations within a mesh hierarchy. While the iteration count\nis almost not affected by using lower accuracy, the solver runtime is\nconsiderably decreased due to the reduced memory transfer and a speedup of up\nto 2.5x is gained for the overall solver. We investigate the performance of\nselected kernels with the hierarchical Roofline model.\n", "versions": [{"version": "v1", "created": "Wed, 15 Jul 2020 08:27:33 GMT"}], "update_date": "2020-07-16", "authors_parsed": [["Oo", "Kyaw L.", ""], ["Vogel", "Andreas", ""]]}, {"id": "2007.07799", "submitter": "Charles Truong", "authors": "Flavien Quijoux, Charles Truong, Ali\\'enor Vienne-Jumeau, Laurent\n  Oudre, Fran\\c{c}ois BERTIN-HUGAULT, Philippe ZAWIEJA, Marie LEFEVRE,\n  Pierre-Paul VIDAL, Damien RICARD", "title": "Meta-analysis parameters computation: a Python approach to facilitate\n  the crossing of experimental conditions", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "stat.ME cs.MS stat.AP", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Meta-analysis is a data aggregation method that establishes an overall and\nobjective level of evidence based on the results of several studies. It is\nnecessary to maintain a high level of homogeneity in the aggregation of data\ncollected from a systematic literature review. However, the current tools do\nnot allow a cross-referencing of the experimental conditions that could explain\nthe heterogeneity observed between studies. This article aims at proposing a\nPython programming code containing several functions allowing the analysis and\nrapid visualization of data from many studies, while allowing the possibility\nof cross-checking the results by experimental condition.\n", "versions": [{"version": "v1", "created": "Mon, 13 Jul 2020 09:42:28 GMT"}], "update_date": "2020-07-16", "authors_parsed": [["Quijoux", "Flavien", ""], ["Truong", "Charles", ""], ["Vienne-Jumeau", "Ali\u00e9nor", ""], ["Oudre", "Laurent", ""], ["BERTIN-HUGAULT", "Fran\u00e7ois", ""], ["ZAWIEJA", "Philippe", ""], ["LEFEVRE", "Marie", ""], ["VIDAL", "Pierre-Paul", ""], ["RICARD", "Damien", ""]]}, {"id": "2007.09488", "submitter": "Dmitry Kulyabov", "authors": "Anna Maria Yu. Apreutesey and Anna V. Korolkova and Dmitry S. Kulyabov", "title": "Languages for modeling the RED active queue management algorithms:\n  Modelica vs. Julia", "comments": "in English; in Russian", "journal-ref": "in CEUR Workshop Proceedings, vol. 2639, 130-140 (2020)", "doi": null, "report-no": null, "categories": "cs.NI cs.MS", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  This work is devoted to the study of the capabilities of the Modelica and\nJulia programming languages for the implementation of a continuously discrete\nparadigm in modeling hybrid systems that contain both continuous and discrete\naspects of behavior. A system consisting of an incoming stream that is\nprocessed according to the Transmission Control Protocol (TCP) and a router\nthat processes traffic using the Random Early Detection (RED) algorithm acts as\na simulated threshold system.\n", "versions": [{"version": "v1", "created": "Sat, 18 Jul 2020 17:49:33 GMT"}], "update_date": "2020-07-21", "authors_parsed": [["Apreutesey", "Anna Maria Yu.", ""], ["Korolkova", "Anna V.", ""], ["Kulyabov", "Dmitry S.", ""]]}, {"id": "2007.09737", "submitter": "Dmitry Kulyabov", "authors": "Migran N. Gevorkyan and Anna V. Korolkova and Dmitry S. Kulyabov", "title": "Approaches to the implementation of generalized complex numbers in the\n  Julia language", "comments": "in English; in Russian", "journal-ref": "in CEUR Workshop Proceedings, vol. 2639, 141-157 (2020)", "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  In problems of mathematical physics, to study the structures of spaces using\nthe Cayley-Klein models in theoretical calculations, the use of generalized\ncomplex numbers is required. In the case of computational experiments, such\ntasks require their high-quality implementation in a programming language. The\nproposed small implementation of generalized complex numbers in modern\nprogramming languages have several disadvantages. In this article, we propose\nusing the Julia language as the language for implementing generalized complex\nnumbers, not least because it supports the multiple dispatch mechanism. The\npaper demonstrates the approach to the implementation of one of the types of\ngeneralized complex numbers, namely dual numbers. We place particular emphasis\non the description of the use of the multiple dispatch mechanism to implement a\nnew numerical type. The resulting implementation of dual numbers can be\nconsidered as a prototype for a complete software module for supporting\ngeneralized complex numbers.\n", "versions": [{"version": "v1", "created": "Sun, 19 Jul 2020 18:24:08 GMT"}], "update_date": "2020-07-21", "authors_parsed": [["Gevorkyan", "Migran N.", ""], ["Korolkova", "Anna V.", ""], ["Kulyabov", "Dmitry S.", ""]]}, {"id": "2007.10625", "submitter": "Daniel Huson", "authors": "R\\\"udiger Zeller, Olaf Delgado Friedrichs and Daniel H. Huson", "title": "Tegula -- exploring a galaxy of two-dimensional periodic tilings", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "math.CO cs.MS", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  Periodic tilings play a role in the decorative arts, in construction and in\ncrystal structures. Combinatorial tiling theory allows the systematic\ngeneration, visualization and exploration of such tilings of the plane, sphere\nand hyperbolic plane, using advanced algorithms and software.Here we present a\n\"galaxy\" of tilings that consists of the set of all 2.4 billion different types\nof periodic tilings that have Dress complexity up to 24. We make these\navailable in a database and provide a new program called Tegula that can be\nused to search and visualize such tilings.\n  Availability: All tilings and software and are open source and available\nhere: https://ab.inf.uni-tuebingen.de/software/tegula.\n", "versions": [{"version": "v1", "created": "Tue, 21 Jul 2020 07:04:42 GMT"}], "update_date": "2020-07-22", "authors_parsed": [["Zeller", "R\u00fcdiger", ""], ["Friedrichs", "Olaf Delgado", ""], ["Huson", "Daniel H.", ""]]}, {"id": "2007.11208", "submitter": "Conrad Sanderson", "authors": "Conrad Sanderson, Ryan Curtin", "title": "An Adaptive Solver for Systems of Linear Equations", "comments": null, "journal-ref": null, "doi": "10.1109/ICSPCS50536.2020.9309998", "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Computational implementations for solving systems of linear equations often\nrely on a one-size-fits-all approach based on LU decomposition of dense\nmatrices stored in column-major format. Such solvers are typically implemented\nwith the aid of the xGESV set of functions available in the low-level LAPACK\nsoftware, with the aim of reducing development time by taking advantage of\nwell-tested routines. However, this straightforward approach does not take into\naccount various matrix properties which can be exploited to reduce the\ncomputational effort and/or to increase numerical stability. Furthermore,\ndirect use of LAPACK functions can be error-prone for non-expert users and\nresults in source code that has little resemblance to originating mathematical\nexpressions. We describe an adaptive solver that we have implemented inside\nrecent versions of the high-level Armadillo C++ library for linear algebra. The\nsolver automatically detects several common properties of a given system\n(banded, triangular, symmetric positive definite), followed by solving the\nsystem via mapping to a set of suitable LAPACK functions best matched to each\nproperty. The solver also detects poorly conditioned systems and automatically\nseeks a solution via singular value decomposition as a fallback. We show that\nthe adaptive solver leads to notable speedups, while also freeing the user from\nusing direct calls to cumbersome LAPACK functions.\n", "versions": [{"version": "v1", "created": "Wed, 22 Jul 2020 05:30:33 GMT"}, {"version": "v2", "created": "Tue, 1 Sep 2020 03:18:59 GMT"}], "update_date": "2021-01-13", "authors_parsed": [["Sanderson", "Conrad", ""], ["Curtin", "Ryan", ""]]}, {"id": "2007.13055", "submitter": "Zijing Gu", "authors": "Zijing Gu", "title": "Optimizing Block-Sparse Matrix Multiplications on CUDA with TVM", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.DC cs.LG cs.NA math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We implemented and optimized matrix multiplications between dense and\nblock-sparse matrices on CUDA. We leveraged TVM, a deep learning compiler, to\nexplore the schedule space of the operation and generate efficient CUDA code.\nWith the automatic parameter tuning in TVM, our cross-thread reduction based\nimplementation achieved competitive or better performance compared with other\nstate-of-the-art frameworks.\n", "versions": [{"version": "v1", "created": "Sun, 26 Jul 2020 04:50:51 GMT"}], "update_date": "2020-07-28", "authors_parsed": [["Gu", "Zijing", ""]]}, {"id": "2007.13152", "submitter": "Jannik Michelfeit", "authors": "Jannik Michelfeit (Technische Universit\\\"at Dresden)", "title": "multivar_horner: a python package for computing Horner factorisations of\n  multivariate polynomials", "comments": "10 pages, 4 figures, submitted to \"The Journal of Open Source\n  Software\"", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.NA math.NA", "license": "http://creativecommons.org/publicdomain/zero/1.0/", "abstract": "  Many applications in the sciences require numerically stable and\ncomputationally efficient evaluation of multivariate polynomials. Finding\nbeneficial representations of polynomials, such as Horner factorisations, is\ntherefore crucial. multivar_horner, the python package presented here, is the\nfirst open source software for computing multivariate Horner factorisations.\nThis work briefly outlines the functionality of the package and puts it into\nreference to previous work in the field. Benchmarks additionally prove the\nadvantages of the implementation and Horner factorisations in general.\n", "versions": [{"version": "v1", "created": "Sun, 26 Jul 2020 15:43:10 GMT"}, {"version": "v2", "created": "Wed, 29 Jul 2020 13:55:07 GMT"}], "update_date": "2020-07-30", "authors_parsed": [["Michelfeit", "Jannik", "", "Technische Universit\u00e4t Dresden"]]}, {"id": "2007.13552", "submitter": "Markus G\\\"otz", "authors": "Markus G\\\"otz, Daniel Coquelin, Charlotte Debus, Kai Krajsek, Claudia\n  Comito, Philipp Knechtges, Bj\\\"orn Hagemeier, Michael Tarnawa, Simon\n  Hanselmann, Martin Siggel, Achim Basermann, Achim Streit", "title": "HeAT -- a Distributed and GPU-accelerated Tensor Framework for Data\n  Analytics", "comments": "10 pages, 8 figures, 5 listings, 1 table", "journal-ref": null, "doi": "10.1109/BigData50022.2020.9378050", "report-no": null, "categories": "cs.DC cs.LG cs.MS", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  To cope with the rapid growth in available data, the efficiency of data\nanalysis and machine learning libraries has recently received increased\nattention. Although great advancements have been made in traditional\narray-based computations, most are limited by the resources available on a\nsingle computation node. Consequently, novel approaches must be made to exploit\ndistributed resources, e.g. distributed memory architectures. To this end, we\nintroduce HeAT, an array-based numerical programming framework for large-scale\nparallel processing with an easy-to-use NumPy-like API. HeAT utilizes PyTorch\nas a node-local eager execution engine and distributes the workload on\narbitrarily large high-performance computing systems via MPI. It provides both\nlow-level array computations, as well as assorted higher-level algorithms. With\nHeAT, it is possible for a NumPy user to take full advantage of their available\nresources, significantly lowering the barrier to distributed data analysis.\nWhen compared to similar frameworks, HeAT achieves speedups of up to two orders\nof magnitude.\n", "versions": [{"version": "v1", "created": "Mon, 27 Jul 2020 13:33:17 GMT"}, {"version": "v2", "created": "Wed, 11 Nov 2020 08:12:25 GMT"}], "update_date": "2021-07-28", "authors_parsed": [["G\u00f6tz", "Markus", ""], ["Coquelin", "Daniel", ""], ["Debus", "Charlotte", ""], ["Krajsek", "Kai", ""], ["Comito", "Claudia", ""], ["Knechtges", "Philipp", ""], ["Hagemeier", "Bj\u00f6rn", ""], ["Tarnawa", "Michael", ""], ["Hanselmann", "Simon", ""], ["Siggel", "Martin", ""], ["Basermann", "Achim", ""], ["Streit", "Achim", ""]]}, {"id": "2007.14822", "submitter": "E.M. Stoudenmire", "authors": "Matthew Fishman, Steven R. White, E. Miles Stoudenmire", "title": "The ITensor Software Library for Tensor Network Calculations", "comments": "Submitted to SciPost Physics Codebases", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cond-mat.str-el physics.comp-ph", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  ITensor is a system for programming tensor network calculations with an\ninterface modeled on tensor diagram notation, which allows users to focus on\nthe connectivity of a tensor network without manually bookkeeping tensor\nindices. The ITensor interface rules out common programming errors and enables\nrapid prototyping of tensor network algorithms. After discussing the philosophy\nbehind the ITensor approach, we show examples of each part of the interface\nincluding Index objects, the ITensor product operator, tensor factorizations,\ntensor storage types, algorithms for matrix product state (MPS) and matrix\nproduct operator (MPO) tensor networks, quantum number conserving block-sparse\ntensors, and the NDTensors library. We also review publications that have used\nITensor for quantum many-body physics and for other areas where tensor networks\nare increasingly applied. To conclude we discuss promising features and\noptimizations to be added in the future.\n", "versions": [{"version": "v1", "created": "Tue, 28 Jul 2020 15:38:57 GMT"}], "update_date": "2020-07-30", "authors_parsed": [["Fishman", "Matthew", ""], ["White", "Steven R.", ""], ["Stoudenmire", "E. Miles", ""]]}, {"id": "2007.15040", "submitter": "Robert M. Gower", "authors": "Robert M. Gower and Margarida P. Mello", "title": "A new framework for the computation of Hessians", "comments": "24 pages, 9 figures, 2 tables", "journal-ref": "Optimization Methods and Software, 27(2):251--273, 2012", "doi": "10.1080/10556788.2011.580098", "report-no": null, "categories": "math.OC cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We investigate the computation of Hessian matrices via Automatic\nDifferentiation, using a graph model and an algebraic model. The graph model\nreveals the inherent symmetries involved in calculating the Hessian. The\nalgebraic model, based on Griewank and Walther's state transformations,\nsynthesizes the calculation of the Hessian as a formula. These dual points of\nview, graphical and algebraic, lead to a new framework for Hessian computation.\nThis is illustrated by developing edge_pushing, a new truly reverse Hessian\ncomputation algorithm that fully exploits the Hessian's symmetry. Computational\nexperiments compare the performance of edge_pushing on sixteen functions from\nthe CUTE collection against two algorithms available as drivers of the software\nADOL-C, and the results are very promising.\n", "versions": [{"version": "v1", "created": "Wed, 29 Jul 2020 18:14:54 GMT"}], "update_date": "2020-07-31", "authors_parsed": [["Gower", "Robert M.", ""], ["Mello", "Margarida P.", ""]]}, {"id": "2007.16135", "submitter": "Garrett Wright", "authors": "Garrett Wright", "title": "Improved Time Warp Edit Distance -- A Parallel Dynamic Program in Linear\n  Memory", "comments": "16 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CG cs.DC cs.LG cs.MS math.MG", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Edit Distance is a classic family of dynamic programming problems, among\nwhich Time Warp Edit Distance refines the problem with the notion of a metric\nand temporal elasticity. A novel Improved Time Warp Edit Distance algorithm\nthat is both massively parallelizable and requiring only linear storage is\npresented. This method uses the procession of a three diagonal band to cover\nthe original dynamic program space. Every element of the diagonal update can be\ncomputed in parallel. The core method is a feature of the TWED Longest Common\nSubsequence data dependence and is applicable to dynamic programs that share\nsimilar band subproblem structure. The algorithm has been implemented as a CUDA\nC library with Python bindings. Speedups for challenging problems are\nphenomenal.\n", "versions": [{"version": "v1", "created": "Fri, 31 Jul 2020 15:31:05 GMT"}], "update_date": "2020-08-03", "authors_parsed": [["Wright", "Garrett", ""]]}]