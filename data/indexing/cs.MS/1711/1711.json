[{"id": "1711.00005", "submitter": "Yong-Xian Wang", "authors": "Min Xu, Yongxian Wang, Anthony Theodore Chronopoulos, Hao Yue", "title": "Performance Optimization and Parallelization of a Parabolic Equation\n  Solver in Computational Ocean Acoustics on Modern Many-core Computer", "comments": "9 pages, 8 figures, 3 tables. preprint for the International\n  Conference on Computer Science and Application Engineering (CSAE2017).\n  2017.10.21-23, Shanghai, China", "journal-ref": null, "doi": "10.12783/dtcse/csae2017/17546", "report-no": null, "categories": "cs.MS cs.CE cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  As one of open-source codes widely used in computational ocean acoustics,\nFOR3D can provide a very good estimate for underwater acoustic propagation. In\nthis paper, we propose a performance optimization and parallelization to speed\nup the running of FOR3D. We utilized a variety of methods to enhance the entire\nperformance, such as using a multi-threaded programming model to exploit the\npotential capability of the many-core node of high-performance computing (HPC)\nsystem, tuning compile options, using efficient tuned mathematical library and\nutilizing vectorization optimization instruction. In addition, we extended the\napplication from single-frequency calculation to multi-frequency calculation\nsuccessfully by using OpenMP+MPI hybrid programming techniques on the\nmainstream HPC platform. A detailed performance evaluation was performed and\nthe results showed that the proposed parallelization obtained good accelerated\neffect of 25.77X when testing a typical three-dimensional medium-sized case on\nTianhe-2 supercomputer. It also showed that the tuned parallel version has a\nweak-scalability. The speed of calculation of underwater sound field can be\ngreatly improved by the strategy mentioned in this paper. The method used in\nthis paper is not only applicable to other similar computing models in\ncomputational ocean acoustics but also a guideline of performance enhancement\nfor scientific and engineering application running on modern\nmany-core-computing platform.\n", "versions": [{"version": "v1", "created": "Tue, 31 Oct 2017 13:58:48 GMT"}, {"version": "v2", "created": "Sat, 11 Nov 2017 08:52:52 GMT"}], "update_date": "2018-03-12", "authors_parsed": [["Xu", "Min", ""], ["Wang", "Yongxian", ""], ["Chronopoulos", "Anthony Theodore", ""], ["Yue", "Hao", ""]]}, {"id": "1711.00903", "submitter": "Katarzyna Swirydowicz", "authors": "Kasia \\'Swirydowicz, Noel Chalmers, Ali Karakus and Timothy Warburton", "title": "Acceleration of tensor-product operations for high-order finite element\n  methods", "comments": "31 pages, 11 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.DC cs.NA cs.PF math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper is devoted to GPU kernel optimization and performance analysis of\nthree tensor-product operators arising in finite element methods. We provide a\nmathematical background to these operations and implementation details.\nAchieving close-to-the-peak performance for these operators requires extensive\noptimization because of the operators' properties: low arithmetic intensity,\ntiered structure, and the need to store intermediate results inside the kernel.\nWe give a guided overview of optimization strategies and we present a\nperformance model that allows us to compare the efficacy of these optimizations\nagainst an empirically calibrated roofline.\n", "versions": [{"version": "v1", "created": "Thu, 2 Nov 2017 19:45:33 GMT"}, {"version": "v2", "created": "Mon, 13 Nov 2017 15:18:19 GMT"}], "update_date": "2017-11-15", "authors_parsed": [["\u015awirydowicz", "Kasia", ""], ["Chalmers", "Noel", ""], ["Karakus", "Ali", ""], ["Warburton", "Timothy", ""]]}, {"id": "1711.02473", "submitter": "Mikl\\'os Homolya", "authors": "Mikl\\'os Homolya, Robert C. Kirby, David A. Ham", "title": "Exposing and exploiting structure: optimal code generation for\n  high-order finite element methods", "comments": "Submitted to ACM Transactions on Mathematical Software", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.NA", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  Code generation based software platforms, such as Firedrake, have become\npopular tools for developing complicated finite element discretisations of\npartial differential equations. We extended the code generation infrastructure\nin Firedrake with optimisations that can exploit the structure inherent to some\nfinite elements. This includes sum factorisation on cuboid cells for\ncontinuous, discontinuous, H(div) and H(curl) conforming elements. Our\nexperiments confirm optimal algorithmic complexity for high-order finite\nelement assembly. This is achieved through several novel contributions: the\nintroduction of a more powerful interface between the form compiler and the\nlibrary providing the finite elements; a more abstract, smarter library of\nfinite elements called FInAT that explicitly communicates the structure of\nelements; and form compiler algorithms to automatically exploit this exposed\nstructure.\n", "versions": [{"version": "v1", "created": "Tue, 7 Nov 2017 14:18:07 GMT"}], "update_date": "2017-11-08", "authors_parsed": [["Homolya", "Mikl\u00f3s", ""], ["Kirby", "Robert C.", ""], ["Ham", "David A.", ""]]}, {"id": "1711.02513", "submitter": "Jose-Luis Aragon", "authors": "Jose L. Aragon", "title": "CGAlgebra: a Mathematica package for conformal geometric algebra", "comments": "Improved version, one figure", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  A tutorial of the Mathematica package CGAlgebra, for conformal geometric\nalgebra calculations is presented. Using rule-based programming, the\n5-dimensional conformal geometric algebra is implemented and defined functions\nsimplify the calculations of geometric, outer and inner products, as well as\nmany other calculations related with geometric transformations. CGAlgebra is\navailable from https://github.com/jlaragonvera/Geometric-Algebra\n", "versions": [{"version": "v1", "created": "Fri, 3 Nov 2017 23:29:00 GMT"}, {"version": "v2", "created": "Thu, 23 Aug 2018 01:28:24 GMT"}], "update_date": "2018-08-24", "authors_parsed": [["Aragon", "Jose L.", ""]]}, {"id": "1711.02712", "submitter": "Bart van Merri\\\"enboer", "authors": "Bart van Merri\\\"enboer, Alexander B. Wiltschko and Dan Moldovan", "title": "Tangent: Automatic Differentiation Using Source Code Transformation in\n  Python", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS stat.ML", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Automatic differentiation (AD) is an essential primitive for machine learning\nprogramming systems. Tangent is a new library that performs AD using source\ncode transformation (SCT) in Python. It takes numeric functions written in a\nsyntactic subset of Python and NumPy as input, and generates new Python\nfunctions which calculate a derivative. This approach to automatic\ndifferentiation is different from existing packages popular in machine\nlearning, such as TensorFlow and Autograd. Advantages are that Tangent\ngenerates gradient code in Python which is readable by the user, easy to\nunderstand and debug, and has no runtime overhead. Tangent also introduces\nabstractions for easily injecting logic into the generated gradient code,\nfurther improving usability.\n", "versions": [{"version": "v1", "created": "Tue, 7 Nov 2017 20:15:24 GMT"}], "update_date": "2017-11-09", "authors_parsed": [["van Merri\u00ebnboer", "Bart", ""], ["Wiltschko", "Alexander B.", ""], ["Moldovan", "Dan", ""]]}, {"id": "1711.03016", "submitter": "Lane Schwartz", "authors": "Richard Wei, Lane Schwartz, Vikram Adve", "title": "DLVM: A modern compiler infrastructure for deep learning systems", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL cs.LG cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Deep learning software demands reliability and performance. However, many of\nthe existing deep learning frameworks are software libraries that act as an\nunsafe DSL in Python and a computation graph interpreter. We present DLVM, a\ndesign and implementation of a compiler infrastructure with a linear algebra\nintermediate representation, algorithmic differentiation by adjoint code\ngeneration, domain-specific optimizations and a code generator targeting GPU\nvia LLVM. Designed as a modern compiler infrastructure inspired by LLVM, DLVM\nis more modular and more generic than existing deep learning compiler\nframeworks, and supports tensor DSLs with high expressivity. With our\nprototypical staged DSL embedded in Swift, we argue that the DLVM system\nenables a form of modular, safe and performant frameworks for deep learning.\n", "versions": [{"version": "v1", "created": "Wed, 8 Nov 2017 15:33:23 GMT"}, {"version": "v2", "created": "Thu, 9 Nov 2017 14:47:33 GMT"}, {"version": "v3", "created": "Wed, 6 Dec 2017 01:55:59 GMT"}, {"version": "v4", "created": "Mon, 11 Dec 2017 21:49:48 GMT"}, {"version": "v5", "created": "Fri, 2 Feb 2018 21:07:25 GMT"}], "update_date": "2018-02-06", "authors_parsed": [["Wei", "Richard", ""], ["Schwartz", "Lane", ""], ["Adve", "Vikram", ""]]}, {"id": "1711.03590", "submitter": "Martin Kronbichler", "authors": "Martin Kronbichler and Katharina Kormann", "title": "Fast matrix-free evaluation of discontinuous Galerkin finite element\n  operators", "comments": null, "journal-ref": "ACM Transactions on Mathematical Software 45(3), 29/1-29/40, 2019", "doi": "10.1145/3325864", "report-no": null, "categories": "cs.MS cs.NA math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present an algorithmic framework for matrix-free evaluation of\ndiscontinuous Galerkin finite element operators based on sum factorization on\nquadrilateral and hexahedral meshes. We identify a set of kernels for fast\nquadrature on cells and faces targeting a wide class of weak forms originating\nfrom linear and nonlinear partial differential equations. Different algorithms\nand data structures for the implementation of operator evaluation are compared\nin an in-depth performance analysis. The sum factorization kernels are\noptimized by vectorization over several cells and faces and an even-odd\ndecomposition of the one-dimensional compute kernels. In isolation our\nimplementation then reaches up to 60\\% of arithmetic peak on Intel Haswell and\nBroadwell processors and up to 50\\% of arithmetic peak on Intel Knights\nLanding. The full operator evaluation reaches only about half that throughput\ndue to memory bandwidth limitations from loading the input and output vectors,\nMPI ghost exchange, as well as handling variable coefficients and the geometry.\nOur performance analysis shows that the results are often within 10\\% of the\navailable memory bandwidth for the proposed implementation, with the exception\nof the Cartesian mesh case where the cost of gather operations and MPI\ncommunication are more substantial.\n", "versions": [{"version": "v1", "created": "Thu, 9 Nov 2017 20:36:06 GMT"}], "update_date": "2019-09-11", "authors_parsed": [["Kronbichler", "Martin", ""], ["Kormann", "Katharina", ""]]}, {"id": "1711.04471", "submitter": "Wim Vanderbauwhede", "authors": "Wim Vanderbauwhede, Gavin Davidson", "title": "Domain-Specific Acceleration and Auto-Parallelization of Legacy\n  Scientific Code in FORTRAN 77 using Source-to-Source Compilation", "comments": "12 pages, 5 figures, submitted to \"Computers and Fluids\" as full\n  paper from ParCFD conference entry", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.DC cs.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Massively parallel accelerators such as GPGPUs, manycores and FPGAs represent\na powerful and affordable tool for scientists who look to speed up simulations\nof complex systems. However, porting code to such devices requires a detailed\nunderstanding of heterogeneous programming tools and effective strategies for\nparallelization. In this paper we present a source to source compilation\napproach with whole-program analysis to automatically transform single-threaded\nFORTRAN 77 legacy code into OpenCL-accelerated programs with parallelized\nkernels.\n  The main contributions of our work are: (1) whole-source refactoring to allow\nany subroutine in the code to be offloaded to an accelerator. (2) Minimization\nof the data transfer between the host and the accelerator by eliminating\nredundant transfers. (3) Pragmatic auto-parallelization of the code to be\noffloaded to the accelerator by identification of parallelizable maps and\nreductions.\n  We have validated the code transformation performance of the compiler on the\nNIST FORTRAN 78 test suite and several real-world codes: the Large Eddy\nSimulator for Urban Flows, a high-resolution turbulent flow model; the shallow\nwater component of the ocean model Gmodel; the Linear Baroclinic Model, an\natmospheric climate model and Flexpart-WRF, a particle dispersion simulator.\n  The automatic parallelization component has been tested on as 2-D Shallow\nWater model (2DSW) and on the Large Eddy Simulator for Urban Flows (UFLES) and\nproduces a complete OpenCL-enabled code base. The fully OpenCL-accelerated\nversions of the 2DSW and the UFLES are resp. 9x and 20x faster on GPU than the\noriginal code on CPU, in both cases this is the same performance as manually\nported code.\n", "versions": [{"version": "v1", "created": "Mon, 13 Nov 2017 08:56:43 GMT"}], "update_date": "2017-11-15", "authors_parsed": [["Vanderbauwhede", "Wim", ""], ["Davidson", "Gavin", ""]]}, {"id": "1711.05487", "submitter": "Athena Elafrou", "authors": "Athena Elafrou, Georgios Goumas, Nektarios Koziris", "title": "Performance Analysis and Optimization of Sparse Matrix-Vector\n  Multiplication on Modern Multi- and Many-Core Processors", "comments": "10 pages, 7 figures, ICPP 2017", "journal-ref": null, "doi": "10.1109/ICPP.2017.38", "report-no": null, "categories": "cs.PF cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper presents a low-overhead optimizer for the ubiquitous sparse\nmatrix-vector multiplication (SpMV) kernel. Architectural diversity among\ndifferent processors together with structural diversity among different sparse\nmatrices lead to bottleneck diversity. This justifies an SpMV optimizer that is\nboth matrix- and architecture-adaptive through runtime specialization. To this\ndirection, we present an approach that first identifies the performance\nbottlenecks of SpMV for a given sparse matrix on the target platform either\nthrough profiling or by matrix property inspection, and then selects suitable\noptimizations to tackle those bottlenecks. Our optimization pool is based on\nthe widely used Compressed Sparse Row (CSR) sparse matrix storage format and\nhas low preprocessing overheads, making our overall approach practical even in\ncases where fast decision making and optimization setup is required. We\nevaluate our optimizer on three x86-based computing platforms and demonstrate\nthat it is able to distinguish and appropriately optimize SpMV for the majority\nof matrices in a representative test suite, leading to significant speedups\nover the CSR and Inspector-Executor CSR SpMV kernels available in the latest\nrelease of the Intel MKL library.\n", "versions": [{"version": "v1", "created": "Wed, 15 Nov 2017 10:22:53 GMT"}], "update_date": "2017-11-16", "authors_parsed": [["Elafrou", "Athena", ""], ["Goumas", "Georgios", ""], ["Koziris", "Nektarios", ""]]}, {"id": "1711.05677", "submitter": "Caterina Fenu", "authors": "Anna Concas, Caterina Fenu, Giuseppe Rodriguez", "title": "PQSER: A Matlab package for spectral seriation", "comments": "20 pages, 9 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The seriation problem is an important ordering issue which consists of\nfinding the best ordering of a set of units whose interrelationship is defined\nby a bipartite graph. It has important applications in, e.g., archaeology,\nanthropology, psychology, and biology. This paper presents a Matlab\nimplementation of an algorithm for spectral seriation by Atkins et al., based\non the use of the Fiedler vector of the Laplacian matrix associated to the\nproblem, which encodes the set of admissible solutions into a PQ-tree. We\nintroduce some numerical technicalities in the original algorithm to improve\nits performance, and point out that the presence of a multiple Fiedler value\nmay have a substantial influence on the computation of an approximated\nsolution, in the presence of inconsistent data sets. Practical examples and\nnumerical experiments show how to use the toolbox to process data sets deriving\nfrom real-world applications.\n", "versions": [{"version": "v1", "created": "Wed, 15 Nov 2017 17:13:36 GMT"}, {"version": "v2", "created": "Thu, 23 Nov 2017 10:09:02 GMT"}], "update_date": "2017-11-27", "authors_parsed": [["Concas", "Anna", ""], ["Fenu", "Caterina", ""], ["Rodriguez", "Giuseppe", ""]]}, {"id": "1711.05683", "submitter": "Antonio Augusto  Alves Jr", "authors": "A. A. Alves Jr and M. D. Sokoloff", "title": "Hydra: a C++11 framework for data analysis in massively parallel\n  platforms", "comments": "ACAT 2017 Proceedings", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS hep-ex physics.comp-ph physics.data-an", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  Hydra is a header-only, templated and C++11-compliant framework designed to\nperform the typical bottleneck calculations found in common HEP data analyses\non massively parallel platforms. The framework is implemented on top of the\nC++11 Standard Library and a variadic version of the Thrust library and is\ndesigned to run on Linux systems, using OpenMP, CUDA and TBB enabled devices.\nThis contribution summarizes the main features of Hydra. A basic description of\nthe overall design, functionality and user interface is provided, along with\nsome code examples and measurements of performance.\n", "versions": [{"version": "v1", "created": "Wed, 15 Nov 2017 17:19:29 GMT"}, {"version": "v2", "created": "Thu, 16 Nov 2017 01:44:12 GMT"}], "update_date": "2017-11-17", "authors_parsed": [["Alves", "A. A.", "Jr"], ["Sokoloff", "M. D.", ""]]}, {"id": "1711.05814", "submitter": "Paul Bradley", "authors": "Paul Bradley and John Smethurst", "title": "Python Implementation and Construction of Finite Abelian Groups", "comments": "20 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "math.GR cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Here we present a working framework to establish finite abelian groups in\npython. The primary aim is to allow new A-level students to work with examples\nof finite abelian groups using open source software. We include the code used\nin the implementation of the framework. We also prove some useful results\nregarding finite abelian groups which are used to establish the functions and\nhelp show how number theoretic results can blend with computational power when\nstudying algebra. The groups established are based modular multiplication and\naddition. We include direct products of cyclic groups meaning the user has\naccess to all finite abelian groups.\n", "versions": [{"version": "v1", "created": "Wed, 15 Nov 2017 21:26:09 GMT"}], "update_date": "2017-11-17", "authors_parsed": [["Bradley", "Paul", ""], ["Smethurst", "John", ""]]}, {"id": "1711.06581", "submitter": "Ryan Curtin", "authors": "Ryan R. Curtin and Shikhar Bhardwaj and Marcus Edel and Yannis\n  Mentekidis", "title": "A generic and fast C++ optimization framework", "comments": "6 pages + references submitted to MLSYS 2017 workshop", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.LG cs.SE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The development of the mlpack C++ machine learning library\n(http://www.mlpack.org/) has required the design and implementation of a\nflexible, robust optimization system that is able to solve the types of\narbitrary optimization problems that may arise all throughout machine learning\nproblems. In this paper, we present the generic optimization framework that we\nhave designed for mlpack. A key priority in the design was ease of\nimplementation of both new optimizers and new objective functions to be\noptimized; therefore, implementation of a new optimizer requires only one\nmethod and implementation of a new objective function requires at most four\nfunctions. This leads to simple and intuitive code, which, for fast prototyping\nand experimentation, is of paramount importance. When compared to optimization\nframeworks of other libraries, we find that mlpack's supports more types of\nobjective functions, is able to make optimizations that other frameworks do\nnot, and seamlessly supports user-defined objective functions and optimizers.\n", "versions": [{"version": "v1", "created": "Fri, 17 Nov 2017 15:10:25 GMT"}], "update_date": "2017-11-20", "authors_parsed": [["Curtin", "Ryan R.", ""], ["Bhardwaj", "Shikhar", ""], ["Edel", "Marcus", ""], ["Mentekidis", "Yannis", ""]]}, {"id": "1711.07790", "submitter": "Carl Lundholm", "authors": "Anders Logg, Carl Lundholm, Magne Nordaas", "title": "Solving Poisson's Equation on the Microsoft HoloLens", "comments": "2 pages, 9 figures", "journal-ref": "In Proceedings of the 23rd ACM Symposium on Virtual Reality\n  Software and Technology (VRST 2017). ACM, New York, NY, USA, Article 87", "doi": "10.1145/3139131.3141777", "report-no": null, "categories": "cs.GR cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present a mixed reality application (HoloFEM) for the Microsoft HoloLens.\nThe application lets a user define and solve a physical problem governed by\nPoisson's equation with the surrounding real world geometry as input data.\nHolograms are used to visualise both the problem and the solution. The finite\nelement method is used to solve Poisson's equation. Solving and visualising\npartial differential equations in mixed reality could have potential usage in\nareas such as building planning and safety engineering.\n", "versions": [{"version": "v1", "created": "Fri, 17 Nov 2017 13:44:33 GMT"}], "update_date": "2017-11-22", "authors_parsed": [["Logg", "Anders", ""], ["Lundholm", "Carl", ""], ["Nordaas", "Magne", ""]]}, {"id": "1711.09777", "submitter": "Tom Goldstein", "authors": "Rohan Chandra, Ziyuan Zhong, Justin Hontz, Val McCulloch, Christoph\n  Studer, Tom Goldstein", "title": "PhasePack User Guide", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.IT math.IT", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  \"Phase retrieval\" refers to the recovery of signals from the magnitudes (and\nnot the phases) of linear measurements. While there has been a recent explosion\nin development of phase retrieval methods, the lack of a common interface has\nmade it difficult to compare new methods against the current state-of-the-art.\nPhasePack is a software library that creates a common interface for a wide\nrange of phase retrieval schemes. PhasePack also provides a test bed for phase\nretrieval methods using both synthetic data and publicly available empirical\ndatasets.\n", "versions": [{"version": "v1", "created": "Fri, 24 Nov 2017 09:36:13 GMT"}, {"version": "v2", "created": "Tue, 28 Nov 2017 08:33:54 GMT"}, {"version": "v3", "created": "Wed, 29 Nov 2017 22:58:07 GMT"}], "update_date": "2017-12-01", "authors_parsed": [["Chandra", "Rohan", ""], ["Zhong", "Ziyuan", ""], ["Hontz", "Justin", ""], ["McCulloch", "Val", ""], ["Studer", "Christoph", ""], ["Goldstein", "Tom", ""]]}, {"id": "1711.09886", "submitter": "Gerrit Ansmann", "authors": "Gerrit Ansmann", "title": "Efficiently and easily integrating differential equations with JiTCODE,\n  JiTCDDE, and JiTCSDE", "comments": null, "journal-ref": "Chaos 28, 043116 (2018)", "doi": "10.1063/1.5019320", "report-no": null, "categories": "cs.MS math.DS physics.comp-ph", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present a family of Python modules for the numerical integration of\nordinary, delay, or stochastic differential equations. The key features are\nthat the user enters the derivative symbolically and it is\njust-in-time-compiled, allowing the user to efficiently integrate differential\nequations from a higher-level interpreted language. The presented modules are\nparticularly suited for large systems of differential equations such as used to\ndescribe dynamics on complex networks. Through the selected method of input,\nthe presented modules also allow to almost completely automatize the process of\nestimating regular as well as transversal Lyapunov exponents for ordinary and\ndelay differential equations. We conceptually discuss the modules' design,\nanalyze their performance, and demonstrate their capabilities by application to\ntimely problems.\n", "versions": [{"version": "v1", "created": "Sat, 25 Nov 2017 18:25:44 GMT"}, {"version": "v2", "created": "Thu, 22 Mar 2018 13:52:09 GMT"}], "update_date": "2018-04-25", "authors_parsed": [["Ansmann", "Gerrit", ""]]}, {"id": "1711.10128", "submitter": "Lingfei Wu", "authors": "Lingfei Wu, Fei Xue, Andreas Stathopoulos", "title": "TRPL+K: Thick-Restart Preconditioned Lanczos+K Method for Large\n  Symmetric Eigenvalue Problems", "comments": "27 pages, 6 figures, 7 tables. Submitted to SIAM Journal on\n  Scientific Computing, Minor Revision", "journal-ref": null, "doi": null, "report-no": null, "categories": "math.NA cs.MS cs.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The Lanczos method is one of the standard approaches for computing a few\neigenpairs of a large, sparse, symmetric matrix. It is typically used with\nrestarting to avoid unbounded growth of memory and computational requirements.\nThick-restart Lanczos is a popular restarted variant because of its simplicity\nand numerically robustness. However, convergence can be slow for highly\nclustered eigenvalues so more effective restarting techniques and the use of\npreconditioning is needed. In this paper, we present a thick-restart\npreconditioned Lanczos method, TRPL+K, that combines the power of locally\noptimal restarting (+K) and preconditioning techniques with the efficiency of\nthe thick-restart Lanczos method. TRPL+K employs an inner-outer scheme where\nthe inner loop applies Lanczos on a preconditioned operator while the outer\nloop augments the resulting Lanczos subspace with certain vectors from the\nprevious restart cycle to obtain eigenvector approximations with which it thick\nrestarts the outer subspace. We first identify the differences from various\nrelevant methods in the literature. Then, based on an optimization perspective,\nwe show an asymptotic global quasi-optimality of a simplified TRPL+K method\ncompared to an unrestarted global optimal method. Finally, we present extensive\nexperiments showing that TRPL+K either outperforms or matches other\nstate-of-the-art eigenmethods in both matrix-vector multiplications and\ncomputational time.\n", "versions": [{"version": "v1", "created": "Tue, 28 Nov 2017 05:33:14 GMT"}, {"version": "v2", "created": "Mon, 16 Jul 2018 03:36:36 GMT"}], "update_date": "2019-11-12", "authors_parsed": [["Wu", "Lingfei", ""], ["Xue", "Fei", ""], ["Stathopoulos", "Andreas", ""]]}, {"id": "1711.10188", "submitter": "Emilio Mart\\'inez-Pa\\~neda", "authors": "George Papazafeiropoulos, Miguel Mu\\~niz-Calvente, Emilio\n  Mart\\'inez-Pa\\~neda", "title": "Abaqus2Matlab: A suitable tool for finite element post-processing", "comments": null, "journal-ref": "Advances in Engineering Software 105, pp. 9-16 (2017)", "doi": "10.1016/j.advengsoft.2017.01.006", "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  A suitable piece of software is presented to connect Abaqus, a sophisticated\nfinite element package, with Matlab, the most comprehensive program for\nmathematical analysis. This interface between these well-known codes not only\nbenefits from the image processing and the integrated graph-plotting features\nof Matlab but also opens up new opportunities in results post-processing,\nstatistical analysis and mathematical optimization, among many other\npossibilities. The software architecture and usage are appropriately described\nand two problems of particular engineering significance are addressed to\ndemonstrate its capabilities. Firstly, the software is employed to assess\ncleavage fracture through a novel 3-parameter Weibull probabilistic framework.\nThen, its potential to create and train neural networks is used to identify\ndamage parameters through a hybrid experimental-numerical scheme, and model\ncrack propagation in structural materials by means of a cohesive zone approach.\nThe source code, detailed documentation and a large number of tutorials can be\nfreely downloaded from www.abaqus2matlab.com.\n", "versions": [{"version": "v1", "created": "Tue, 28 Nov 2017 09:06:44 GMT"}], "update_date": "2017-11-29", "authors_parsed": [["Papazafeiropoulos", "George", ""], ["Mu\u00f1iz-Calvente", "Miguel", ""], ["Mart\u00ednez-Pa\u00f1eda", "Emilio", ""]]}, {"id": "1711.10911", "submitter": "Sascha Timme", "authors": "Paul Breiding and Sascha Timme", "title": "HomotopyContinuation.jl: A package for homotopy continuation in Julia", "comments": "8 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS math.AG", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present the Julia package HomotopyContinuation.jl, which provides an\nalgorithmic framework for solving polynomial systems by numerical homotopy\ncontinuation. We introduce the basic capabilities of the package and\ndemonstrate the software on an illustrative example. We motivate our choice of\nJulia and how its features allow us to improve upon existing software packages\nwith respect to usability, modularity and performance. Furthermore, we compare\nthe performance of HomotopyContinuation.jl to the existing packages Bertini and\nPHCpack.\n", "versions": [{"version": "v1", "created": "Tue, 28 Nov 2017 15:53:22 GMT"}, {"version": "v2", "created": "Wed, 30 May 2018 09:14:53 GMT"}], "update_date": "2018-05-31", "authors_parsed": [["Breiding", "Paul", ""], ["Timme", "Sascha", ""]]}, {"id": "1711.10912", "submitter": "Cem Bassoy", "authors": "Cem Bassoy", "title": "TLib: A Flexible C++ Tensor Framework for Numerical Tensor Calculus", "comments": "29 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Numerical tensor calculus comprise basic tensor operations such as the\nentrywise addition and contraction of higher-order tensors. We present, TLib,\nflexible tensor framework with generic tensor functions and tensor classes that\nassists users to implement generic and flexible tensor algorithms in C++. The\nnumber of dimensions, the extents of the dimensions of the tensors and the\ncontraction modes of the tensor operations can be runtime variable. Our\nframework provides tensor classes that simplify the management of\nmultidimensional data and utilization of tensor operations using\nobject-oriented and generic programming techniques. Additional stream classes\nhelp the user to verify and compare of numerical results with MATLAB. Tensor\noperations are implemented with generic tensor functions and in terms of\nmultidimensional iterator types only, decoupling data storage representation\nand computation. The user can combine tensor functions with different tensor\ntypes and extend the framework without further modification of the classes or\nfunctions. We discuss the design and implementation of the framework and\ndemonstrate its usage with examples that have been discussed in the literature.\n", "versions": [{"version": "v1", "created": "Tue, 28 Nov 2017 14:36:59 GMT"}], "update_date": "2017-11-30", "authors_parsed": [["Bassoy", "Cem", ""]]}]