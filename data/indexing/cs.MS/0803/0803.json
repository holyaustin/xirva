[{"id": "0803.0439", "submitter": "Christoph Lauter", "authors": "Florent De Dinechin (LIP), Christoph Quirin Lauter (LIP)", "title": "Optimizing polynomials for floating-point implementation", "comments": "12 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.NA cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The floating-point implementation of a function on an interval often reduces\nto polynomial approximation, the polynomial being typically provided by Remez\nalgorithm. However, the floating-point evaluation of a Remez polynomial\nsometimes leads to catastrophic cancellations. This happens when some of the\npolynomial coefficients are very small in magnitude with respects to others. In\nthis case, it is better to force these coefficients to zero, which also reduces\nthe operation count. This technique, classically used for odd or even\nfunctions, may be generalized to a much larger class of functions. An algorithm\nis presented that forces to zero the smaller coefficients of the initial\npolynomial thanks to a modified Remez algorithm targeting an incomplete\nmonomial basis. One advantage of this technique is that it is purely numerical,\nthe function being used as a numerical black box. This algorithm is implemented\nwithin a larger polynomial implementation tool that is demonstrated on a range\nof examples, resulting in polynomials with less coefficients than those\nobtained the usual way.\n", "versions": [{"version": "v1", "created": "Tue, 4 Mar 2008 13:49:44 GMT"}], "update_date": "2008-12-18", "authors_parsed": [["De Dinechin", "Florent", "", "LIP"], ["Lauter", "Christoph Quirin", "", "LIP"]]}, {"id": "0803.0874", "submitter": "Milan Batista", "authors": "Milan Batista", "title": "A Method for Solving Cyclic Block Penta-diagonal Systems of Linear\n  Equations", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  A method for solving cyclic block three-diagonal systems of equations is\ngeneralized for solving a block cyclic penta-diagonal system of equations.\nIntroducing a special form of two new variables the original system is split\ninto three block pentagonal systems, which can be solved by the known methods.\nAs such method belongs to class of direct methods without pivoting.\nImplementation of the algorithm is discussed in some details and the numerical\nexamples are present.\n", "versions": [{"version": "v1", "created": "Thu, 6 Mar 2008 18:45:39 GMT"}, {"version": "v2", "created": "Sat, 8 Mar 2008 11:03:56 GMT"}, {"version": "v3", "created": "Fri, 14 Mar 2008 07:35:16 GMT"}], "update_date": "2008-12-18", "authors_parsed": [["Batista", "Milan", ""]]}, {"id": "0803.2093", "submitter": "Yoann Pigne", "authors": "Yoann Pign\\'e (LITIS), Antoine Dutot (LITIS), Fr\\'ed\\'eric Guinand\n  (LITIS), Damien Olivier (LITIS)", "title": "GraphStream: A Tool for bridging the gap between Complex Systems and\n  Dynamic Graphs", "comments": null, "journal-ref": "Emergent Properties in Natural and Artificial Complex Systems.\n  Satellite Conference within the 4th European Conference on Complex Systems\n  (ECCS'2007), Dresden : Allemagne (2007)", "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The notion of complex systems is common to many domains, from Biology to\nEconomy, Computer Science, Physics, etc. Often, these systems are made of sets\nof entities moving in an evolving environment. One of their major\ncharacteristics is the emergence of some global properties stemmed from local\ninteractions between the entities themselves and between the entities and the\nenvironment. The structure of these systems as sets of interacting entities\nleads researchers to model them as graphs. However, their understanding\nrequires most often to consider the dynamics of their evolution. It is indeed\nnot relevant to study some properties out of any temporal consideration. Thus,\ndynamic graphs seem to be a very suitable model for investigating the emergence\nand the conservation of some properties. GraphStream is a Java-based library\nwhose main purpose is to help researchers and developers in their daily tasks\nof dynamic problem modeling and of classical graph management tasks: creation,\nprocessing, display, etc. It may also be used, and is indeed already used, for\nteaching purpose. GraphStream relies on an event-based engine allowing several\nevent sources. Events may be included in the core of the application, read from\na file or received from an event handler.\n", "versions": [{"version": "v1", "created": "Fri, 14 Mar 2008 07:09:13 GMT"}], "update_date": "2008-12-18", "authors_parsed": [["Pign\u00e9", "Yoann", "", "LITIS"], ["Dutot", "Antoine", "", "LITIS"], ["Guinand", "Fr\u00e9d\u00e9ric", "", "LITIS"], ["Olivier", "Damien", "", "LITIS"]]}, {"id": "0803.2386", "submitter": "James Raynolds", "authors": "Lenore R. Mullin and James E. Raynolds", "title": "Conformal Computing: Algebraically connecting the hardware/software\n  boundary using a uniform approach to high-performance computation for\n  software and hardware applications", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present a systematic, algebraically based, design methodology for\nefficient implementation of computer programs optimized over multiple levels of\nthe processor/memory and network hierarchy. Using a common formalism to\ndescribe the problem and the partitioning of data over processors and memory\nlevels allows one to mathematically prove the efficiency and correctness of a\ngiven algorithm as measured in terms of a set of metrics (such as\nprocessor/network speeds, etc.). The approach allows the average programmer to\nachieve high-level optimizations similar to those used by compiler writers\n(e.g. the notion of \"tiling\").\n  The approach presented in this monograph makes use of A Mathematics of Arrays\n(MoA, Mullin 1988) and an indexing calculus (i.e. the psi-calculus) to enable\nthe programmer to develop algorithms using high-level compiler-like\noptimizations through the ability to algebraically compose and reduce sequences\nof array operations. Extensive discussion and benchmark results are presented\nfor the Fast Fourier Transform and other important algorithms.\n", "versions": [{"version": "v1", "created": "Mon, 17 Mar 2008 02:38:49 GMT"}], "update_date": "2008-03-18", "authors_parsed": [["Mullin", "Lenore R.", ""], ["Raynolds", "James E.", ""]]}, {"id": "0803.3459", "submitter": "Franklin Marquezino", "authors": "F.L. Marquezino, R. Portugal", "title": "The QWalk Simulator of Quantum Walks", "comments": "21 pages, 11 figures. Accepted in Computer Physics Communications.\n  Simulator can be downloaded from http://qubit.lncc.br/qwalk", "journal-ref": "Computer Physics Communications, Volume 179, Issue 5, Pages\n  359-369. (2008)", "doi": "10.1016/j.cpc.2008.02.019", "report-no": null, "categories": "quant-ph cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Several research groups are giving special attention to quantum walks\nrecently, because this research area have been used with success in the\ndevelopment of new efficient quantum algorithms. A general simulator of quantum\nwalks is very important for the development of this area, since it allows the\nresearchers to focus on the mathematical and physical aspects of the research\ninstead of deviating the efforts to the implementation of specific numerical\nsimulations. In this paper we present QWalk, a quantum walk simulator for one-\nand two-dimensional lattices. Finite two-dimensional lattices with generic\ntopologies can be used. Decoherence can be simulated by performing measurements\nor by breaking links of the lattice. We use examples to explain the usage of\nthe software and to show some recent results of the literature that are easily\nreproduced by the simulator.\n", "versions": [{"version": "v1", "created": "Mon, 24 Mar 2008 20:25:49 GMT"}], "update_date": "2012-05-18", "authors_parsed": [["Marquezino", "F. L.", ""], ["Portugal", "R.", ""]]}]