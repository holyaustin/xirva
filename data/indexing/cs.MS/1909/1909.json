[{"id": "1909.00101", "submitter": "Vedran Novakovi\\'c", "authors": "Vedran Novakovi\\'c and Sanja Singer", "title": "Implicit Hari--Zimmermann algorithm for the generalized SVD on the GPUs", "comments": "A minor revision of the revised submission, with the supplementary\n  material attached", "journal-ref": "Int. J. High Perform. Comput. Appl. 35 (2021), 2; 170-205", "doi": "10.1177/1094342020972772", "report-no": null, "categories": "math.NA cs.MS cs.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  A parallel, blocked, one-sided Hari--Zimmermann algorithm for the generalized\nsingular value decomposition (GSVD) of a real or a complex matrix pair $(F,G)$\nis here proposed, where $F$ and $G$ have the same number of columns, and are\nboth of the full column rank. The algorithm targets either a single graphics\nprocessing unit (GPU), or a cluster of those, performs all non-trivial\ncomputation exclusively on the GPUs, requires the minimal amount of memory to\nbe reasonably expected, scales acceptably with the increase of the number of\nGPUs available, and guarantees the reproducible, bitwise identical output of\nthe runs repeated over the same input and with the same number of GPUs.\n", "versions": [{"version": "v1", "created": "Sat, 31 Aug 2019 00:52:09 GMT"}, {"version": "v2", "created": "Thu, 30 Jul 2020 00:09:20 GMT"}, {"version": "v3", "created": "Tue, 13 Oct 2020 22:28:39 GMT"}], "update_date": "2021-02-18", "authors_parsed": [["Novakovi\u0107", "Vedran", ""], ["Singer", "Sanja", ""]]}, {"id": "1909.01149", "submitter": "Srinivas Eswar", "authors": "Srinivas Eswar, Koby Hayashi, Grey Ballard, Ramakrishnan Kannan,\n  Michael A. Matheson, Haesun Park", "title": "PLANC: Parallel Low Rank Approximation with Non-negativity Constraints", "comments": "arXiv admin note: text overlap with arXiv:1806.07985", "journal-ref": null, "doi": null, "report-no": null, "categories": "math.NA cs.DC cs.MS cs.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We consider the problem of low-rank approximation of massive dense\nnon-negative tensor data, for example to discover latent patterns in video and\nimaging applications. As the size of data sets grows, single workstations are\nhitting bottlenecks in both computation time and available memory. We propose a\ndistributed-memory parallel computing solution to handle massive data sets,\nloading the input data across the memories of multiple nodes and performing\nefficient and scalable parallel algorithms to compute the low-rank\napproximation. We present a software package called PLANC (Parallel Low Rank\nApproximation with Non-negativity Constraints), which implements our solution\nand allows for extension in terms of data (dense or sparse, matrices or tensors\nof any order), algorithm (e.g., from multiplicative updating techniques to\nalternating direction method of multipliers), and architecture (we exploit GPUs\nto accelerate the computation in this work).We describe our parallel\ndistributions and algorithms, which are careful to avoid unnecessary\ncommunication and computation, show how to extend the software to include new\nalgorithms and/or constraints, and report efficiency and scalability results\nfor both synthetic and real-world data sets.\n", "versions": [{"version": "v1", "created": "Fri, 30 Aug 2019 15:09:53 GMT"}], "update_date": "2019-09-04", "authors_parsed": [["Eswar", "Srinivas", ""], ["Hayashi", "Koby", ""], ["Ballard", "Grey", ""], ["Kannan", "Ramakrishnan", ""], ["Matheson", "Michael A.", ""], ["Park", "Haesun", ""]]}, {"id": "1909.02408", "submitter": "Ahmad Eid", "authors": "Ahmad Hosny Eid", "title": "A Low-Memory Time-Efficient Implementation of Outermorphisms for\n  Higher-Dimensional Geometric Algebras", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  From the beginning of David Hestenes rediscovery of geometric algebra in the\n1960s, outermorphisms have been a cornerstone in the mathematical development\nof GA. Many important mathematical formulations in GA can be expressed as\noutermorphisms such as versor products, linear projection operators, and\nmapping between related coordinate frames. Over the last two decades, GA-based\nmathematical models and software implementations have been developed in many\nfields of science and engineering. As such, efficient implementations of\noutermorphisms are of significant importance within this context. This work\nattempts to shed some light on the problem of optimizing software\nimplementations of outermorphisms for practical prototyping applications using\ngeometric algebra. The approach we propose here for implementing outermorphisms\nrequires orders of magnitude less memory compared to other common approaches,\nwhile being comparable in time performance, especially for high-dimensional\ngeometric algebras.\n", "versions": [{"version": "v1", "created": "Thu, 5 Sep 2019 13:43:32 GMT"}], "update_date": "2019-09-06", "authors_parsed": [["Eid", "Ahmad Hosny", ""]]}, {"id": "1909.02836", "submitter": "Joseph Wallwork", "authors": "J. G. Wallwork, P. Hovland, H. Zhang and O. Marin", "title": "Computing Derivatives for PETSc Adjoint Solvers using Algorithmic\n  Differentiation", "comments": "14 pages, 3 figures, 2 listings, 1 table", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Most nonlinear partial differential equation (PDE) solvers require the\nJacobian matrix associated to the differential operator. In PETSc, this is\ntypically achieved by either an analytic derivation or numerical approximation\nmethod such as finite differences. For complex applications, hand-coding the\nJacobian can be time-consuming and error-prone, yet computationally efficient.\nWhilst finite difference approximations are straight-forward to implement, they\nhave high arithmetic complexity and low accuracy. Alternatively, one may\ncompute Jacobians using algorithmic differentiation (AD), yielding the same\nderivatives as an analytic derivation, with the added benefit that the\nimplementation is problem independent. In this work, the operator overloading\nAD tool ADOL-C is applied to generate Jacobians for time-dependent, nonlinear\nPDEs and their adjoints. Various strategies are considered, including\ncompressed and matrix-free approaches. In numerical experiments with a 2D\ndiffusion-reaction model, the performance of these strategies has been studied\nand compared to the hand-derived version.\n", "versions": [{"version": "v1", "created": "Fri, 6 Sep 2019 11:53:02 GMT"}], "update_date": "2019-09-09", "authors_parsed": [["Wallwork", "J. G.", ""], ["Hovland", "P.", ""], ["Zhang", "H.", ""], ["Marin", "O.", ""]]}, {"id": "1909.03948", "submitter": "Umberto Villa", "authors": "Umberto Villa and Noemi Petra and Omar Ghattas", "title": "hIPPYlib: An Extensible Software Framework for Large-Scale Inverse\n  Problems Governed by PDEs; Part I: Deterministic Inversion and Linearized\n  Bayesian Inference", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "math.NA cs.MS cs.NA math.OC stat.CO", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present an extensible software framework, hIPPYlib, for solution of\nlarge-scale deterministic and Bayesian inverse problems governed by partial\ndifferential equations (PDEs) with infinite-dimensional parameter fields (which\nare high-dimensional after discretization). hIPPYlib overcomes the prohibitive\nnature of Bayesian inversion for this class of problems by implementing\nstate-of-the-art scalable algorithms for PDE-based inverse problems that\nexploit the structure of the underlying operators, notably the Hessian of the\nlog-posterior. The key property of the algorithms implemented in hIPPYlib is\nthat the solution of the deterministic and linearized Bayesian inverse problem\nis computed at a cost, measured in linearized forward PDE solves, that is\nindependent of the parameter dimension. The mean of the posterior is\napproximated by the MAP point, which is found by minimizing the negative\nlog-posterior. This deterministic nonlinear least-squares optimization problem\nis solved with an inexact matrix-free Newton-CG method. The posterior\ncovariance is approximated by the inverse of the Hessian of the negative log\nposterior evaluated at the MAP point. This Gaussian approximation is exact when\nthe parameter-to-observable map is linear; otherwise, its logarithm agrees to\ntwo derivatives with the log-posterior at the MAP point, and thus it can serve\nas a proposal for Hessian-based MCMC methods. The construction of the posterior\ncovariance is made tractable by invoking a low-rank approximation of the\nHessian of the log-likelihood. Scalable tools for sample generation are also\nimplemented. hIPPYlib makes all of these advanced algorithms easily accessible\nto domain scientists and provides an environment that expedites the development\nof new algorithms. hIPPYlib is also a teaching tool to educate researchers and\npractitioners who are new to inverse problems and the Bayesian inference\nframework.\n", "versions": [{"version": "v1", "created": "Mon, 9 Sep 2019 15:57:47 GMT"}, {"version": "v2", "created": "Sat, 29 Aug 2020 03:36:20 GMT"}], "update_date": "2020-09-01", "authors_parsed": [["Villa", "Umberto", ""], ["Petra", "Noemi", ""], ["Ghattas", "Omar", ""]]}, {"id": "1909.04029", "submitter": "Daniel Drzisga", "authors": "Daniel Drzisga, Brendan Keith, Barbara Wohlmuth", "title": "The surrogate matrix methodology: A reference implementation for\n  low-cost assembly in isogeometric analysis", "comments": null, "journal-ref": "MethodsX, 7:100813 (2020)", "doi": "10.1016/j.mex.2020.100813", "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  A reference implementation of a new method in isogeometric analysis (IGA) is\npresented. It delivers low-cost variable-scale approximations (surrogates) of\nthe matrices which IGA conventionally requires to be computed by element-scale\nquadrature. To generate surrogate matrices, quadrature must only be performed\non a fraction of the elements in the computational domain. In this way,\nquadrature determines only a subset of the entries in the final matrix. The\nremaining matrix entries are computed by a simple B-spline interpolation\nprocedure. We present the modifications and extensions required for a reference\nimplementation in the open-source IGA software library GeoPDEs. The exposition\nis fashioned to help facilitate similar modifications in other contemporary\nsoftware libraries.\n", "versions": [{"version": "v1", "created": "Sun, 8 Sep 2019 06:42:21 GMT"}], "update_date": "2020-04-14", "authors_parsed": [["Drzisga", "Daniel", ""], ["Keith", "Brendan", ""], ["Wohlmuth", "Barbara", ""]]}, {"id": "1909.04504", "submitter": "Prabhu Ramachandran", "authors": "Prabhu Ramachandran, Aditya Bhosale, Kunal Puri, Pawan Negi, Abhinav\n  Muta, A Dinesh, Dileep Menon, Rahul Govind, Suraj Sanka, Amal S Sebastian,\n  Ananyo Sen, Rohan Kaushik, Anshuman Kumar, Vikas Kurapati, Mrinalgouda Patil,\n  Deep Tavker, Pankaj Pandey, Chandrashekhar Kaushik, Arkopal Dutt, Arpit\n  Agarwal", "title": "PySPH: a Python-based framework for smoothed particle hydrodynamics", "comments": "39 pages, 19 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "physics.comp-ph cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  PySPH is an open-source, Python-based, framework for particle methods in\ngeneral and Smoothed Particle Hydrodynamics (SPH) in particular. PySPH allows a\nuser to define a complete SPH simulation using pure Python. High-performance\ncode is generated from this high-level Python code and executed on either\nmultiple cores, or on GPUs, seamlessly. It also supports distributed execution\nusing MPI. PySPH supports a wide variety of SPH schemes and formulations. These\ninclude, incompressible and compressible fluid flow, elastic dynamics, rigid\nbody dynamics, shallow water equations, and other problems. PySPH supports a\nvariety of boundary conditions including mirror, periodic, solid wall, and\ninlet/outlet boundary conditions. The package is written to facilitate reuse\nand reproducibility. This paper discusses the overall design of PySPH and\ndemonstrates many of its features. Several example results are shown to\ndemonstrate the range of features that PySPH provides.\n", "versions": [{"version": "v1", "created": "Tue, 10 Sep 2019 14:11:27 GMT"}, {"version": "v2", "created": "Tue, 10 Dec 2019 17:48:54 GMT"}, {"version": "v3", "created": "Mon, 28 Dec 2020 19:31:36 GMT"}], "update_date": "2021-01-01", "authors_parsed": [["Ramachandran", "Prabhu", ""], ["Bhosale", "Aditya", ""], ["Puri", "Kunal", ""], ["Negi", "Pawan", ""], ["Muta", "Abhinav", ""], ["Dinesh", "A", ""], ["Menon", "Dileep", ""], ["Govind", "Rahul", ""], ["Sanka", "Suraj", ""], ["Sebastian", "Amal S", ""], ["Sen", "Ananyo", ""], ["Kaushik", "Rohan", ""], ["Kumar", "Anshuman", ""], ["Kurapati", "Vikas", ""], ["Patil", "Mrinalgouda", ""], ["Tavker", "Deep", ""], ["Pandey", "Pankaj", ""], ["Kaushik", "Chandrashekhar", ""], ["Dutt", "Arkopal", ""], ["Agarwal", "Arpit", ""]]}, {"id": "1909.05052", "submitter": "Timo Koch", "authors": "Timo Koch, Dennis Gl\\\"aser, Kilian Weishaupt, Sina Ackermann, Martin\n  Beck, Beatrix Becker, Samuel Burbulla, Holger Class, Edward Coltman, Simon\n  Emmert, Thomas Fetzer, Christoph Gr\\\"uninger, Katharina Heck, Johannes\n  Hommel, Theresa Kurz, Melanie Lipp, Farid Mohammadi, Samuel Scherrer, Martin\n  Schneider, Gabriele Seitz, Leopold Stadler, Martin Utz, Felix Weinhardt,\n  Bernd Flemisch", "title": "DuMu$^\\text{x}$ 3 -- an open-source simulator for solving flow and\n  transport problems in porous media with a focus on model coupling", "comments": null, "journal-ref": null, "doi": "10.1016/j.camwa.2020.02.012", "report-no": null, "categories": "cs.CE cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present version 3 of the open-source simulator for flow and transport\nprocesses in porous media DuMu$^\\text{x}$. DuMu$^\\text{x}$ is based on the\nmodular C++ framework Dune (Distributed and Unified Numerics Environment) and\nis developed as a research code with a focus on modularity and reusability. We\ndescribe recent efforts in improving the transparency and efficiency of the\ndevelopment process and community-building, as well as efforts towards quality\nassurance and reproducible research. In addition to a major redesign of many\nsimulation components in order to facilitate setting up complex simulations in\nDuMu$^\\text{x}$, version 3 introduces a more consistent abstraction of finite\nvolume schemes. Finally, the new framework for multi-domain simulations is\ndescribed, and three numerical examples demonstrate its flexibility.\n", "versions": [{"version": "v1", "created": "Wed, 11 Sep 2019 13:48:47 GMT"}], "update_date": "2020-03-23", "authors_parsed": [["Koch", "Timo", ""], ["Gl\u00e4ser", "Dennis", ""], ["Weishaupt", "Kilian", ""], ["Ackermann", "Sina", ""], ["Beck", "Martin", ""], ["Becker", "Beatrix", ""], ["Burbulla", "Samuel", ""], ["Class", "Holger", ""], ["Coltman", "Edward", ""], ["Emmert", "Simon", ""], ["Fetzer", "Thomas", ""], ["Gr\u00fcninger", "Christoph", ""], ["Heck", "Katharina", ""], ["Hommel", "Johannes", ""], ["Kurz", "Theresa", ""], ["Lipp", "Melanie", ""], ["Mohammadi", "Farid", ""], ["Scherrer", "Samuel", ""], ["Schneider", "Martin", ""], ["Seitz", "Gabriele", ""], ["Stadler", "Leopold", ""], ["Utz", "Martin", ""], ["Weinhardt", "Felix", ""], ["Flemisch", "Bernd", ""]]}, {"id": "1909.05423", "submitter": "Inanc Senocak", "authors": "Jaber J. Hasbestan and Inanc Senocak", "title": "PittPack: An Open-Source Poisson's Equation Solver for Extreme-Scale\n  Computing with Accelerators", "comments": "41 pages, 18 figures, 3 listings", "journal-ref": null, "doi": "10.1016/j.cpc.2020.107272", "report-no": null, "categories": "physics.comp-ph cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present a parallel implementation of a direct solver for the Poisson's\nequation on extreme-scale supercomputers with accelerators. We introduce a\nchunked-pencil decomposition as the domain-decomposition strategy to distribute\nwork among processing elements to achieve superior scalability at large number\nof accelerators. Chunked-pencil decomposition enables overlapping nodal\ncommunication and data transfer between the central processing units (CPUs) and\nthe graphics processing units (GPUs). Second, it improves data locality by\nkeeping neighboring elements in adjacent memory locations. Third, it allows\nusage of shared-memory for certain segments of the algorithm when possible, and\nlast but not least, it enables contiguous message transfer among the nodes. Two\ndifferent communication patterns are designed. The fist pattern aims to fully\noverlap the communication with data transfer and designed for speedup of\noverall turnaround time, whereas the second method concentrates on low memory\nusage and is more network friendly for computations at extreme scale. To ensure\nsoftware portability, we interleave OpenACC with MPI in the software. The\nnumerical solution and its formal second order of accuracy is verified using\nmethod of manufactured solutions for various combinations of boundary\nconditions. Weak scaling analysis is performed using up to 1.1 trillion\nCartesian mesh points using 16384 GPUs on a petascale leadership class\nsupercomputer.\n", "versions": [{"version": "v1", "created": "Thu, 12 Sep 2019 01:15:30 GMT"}], "update_date": "2020-07-15", "authors_parsed": [["Hasbestan", "Jaber J.", ""], ["Senocak", "Inanc", ""]]}, {"id": "1909.09771", "submitter": "Pawan Kumar", "authors": "Abhinav Aggarwal, Shivam Kakkar, Pawan Kumar", "title": "Multithreaded Filtering Preconditioner for Diffusion Equation on\n  Structured Grid", "comments": "9 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.MS cs.NA math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  A parallel and nested version of a frequency filtering preconditioner is\nproposed for linear systems corresponding to diffusion equation on a structured\ngrid. The proposed preconditioner is found to be robust with respect to jumps\nin the diffusion coefficients. The storage requirement for the preconditioner\nis O(N),where N is number of rows of matrix, hence, a fairly large problem of\nsize more than 42 million unknowns has been solved on a quad core machine with\n64GB RAM. The parallelism is achieved using twisted factorization and SIMD\noperations. The preconditioner achieves a speedup of 3.3 times on a quad core\nprocessor clocked at 4.2 GHz, and compared to a well known algebraic multigrid\nmethod, it is significantly faster in both setup and solve times for diffusion\nequations with jumps.\n", "versions": [{"version": "v1", "created": "Sat, 21 Sep 2019 04:15:31 GMT"}], "update_date": "2019-09-24", "authors_parsed": [["Aggarwal", "Abhinav", ""], ["Kakkar", "Shivam", ""], ["Kumar", "Pawan", ""]]}, {"id": "1909.10051", "submitter": "Amir Arslan Haghrah", "authors": "Amir Arslan Haghrah and Sehraneh Ghaemi", "title": "PyIT2FLS: A New Python Toolkit for Interval Type 2 Fuzzy Logic Systems", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "eess.SY cs.MS cs.SY", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  Fuzzy logic is an accepted and well-developed approach for constructing\nverbal models. Fuzzy based methods are getting more popular, while the\nengineers deal with more daily life tasks. This paper presents a new Python\ntoolkit for Interval Type 2 Fuzzy Logic Systems (IT2FLS). Developing software\ntools is an important issue for facilitating the practical use of theoretical\nresults. There are limited tools for implementing IT2FLSs in Python. The\ndeveloped PyIT2FLS is providing a set of tools for fast and easy modeling of\nfuzzy systems. This paper includes a brief description of how developed toolkit\ncan be used. Also, three examples are given showing the usage of the developed\ntoolkit for simulating IT2FLSs. First, a simple rule-based system is developed\nand it's codes are presented in the paper. The second example is the prediction\nof the Mackey-Glass chaotic time series using IT2FLS. In this example, the\nParticle Swarm Optimization (PSO) algorithm is used for determining system\nparameters while minimizing the mean square error. In the last example, an\nIT2FPID is designed and used for controlling a linear time-delay system. The\ncode for the examples are available on toolkit's GitHub page:\n\\url{https://github.com/Haghrah/PyIT2FLS}. The simulations and their results\nconfirm the ability of the developed toolkit to be used in a wide range of the\napplications.\n", "versions": [{"version": "v1", "created": "Sun, 22 Sep 2019 17:34:20 GMT"}, {"version": "v2", "created": "Sat, 23 Nov 2019 13:58:41 GMT"}], "update_date": "2019-11-26", "authors_parsed": [["Haghrah", "Amir Arslan", ""], ["Ghaemi", "Sehraneh", ""]]}, {"id": "1909.10451", "submitter": "Martin Biel", "authors": "Martin Biel and Mikael Johansson", "title": "Efficient Stochastic Programming in Julia", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "math.OC cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present StochasticPrograms.jl, a user-friendly and powerful open-source\nframework for stochastic programming written in the Julia language. The\nframework includes both modeling tools and structure-exploiting optimization\nalgorithms. Stochastic programming models can be efficiently formulated using\nexpressive syntax and models can be instantiated, inspected, and analyzed\ninteractively. The framework scales seamlessly to distributed environments.\nSmall instances of a model can be run locally to ensure correctness, while\nlarger instances are automatically distributed in a memory-efficient way onto\nsupercomputers or clouds and solved using parallel optimization algorithms.\nThese structure-exploiting solvers are based on variations of the classical\nL-shaped and progressive-hedging algorithms. We provide a concise mathematical\nbackground for the various tools and constructs available in the framework,\nalong with code listings exemplifying their usage. Both software innovations\nrelated to the implementation of the framework and algorithmic innovations\nrelated to the structured solvers are highlighted. We conclude by demonstrating\nstrong scaling properties of the distributed algorithms on numerical benchmarks\nin a multi-node setup.\n", "versions": [{"version": "v1", "created": "Mon, 23 Sep 2019 16:10:43 GMT"}, {"version": "v2", "created": "Mon, 13 Jul 2020 14:31:36 GMT"}, {"version": "v3", "created": "Tue, 12 Jan 2021 20:54:12 GMT"}], "update_date": "2021-01-14", "authors_parsed": [["Biel", "Martin", ""], ["Johansson", "Mikael", ""]]}, {"id": "1909.12966", "submitter": "Daniel Reynolds", "authors": "Daniel R. Reynolds and David J. Gardner and Cody J. Balos and Carol S.\n  Woodward", "title": "SUNDIALS Multiphysics+MPIManyVector Performance Testing", "comments": "15 pages, 3 figures", "journal-ref": null, "doi": null, "report-no": "LLNL-TR-791538", "categories": "cs.DC cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this report we document performance test results on a SUNDIALS-based\nmultiphysics demonstration application. We aim to assess the large-scale\nparallel performance of new capabilities that have been added to the SUNDIALS\nsuite of time integrators and nonlinear solvers in recent years under funding\nfrom both the Exascale Computing Project (ECP) and the Scientific Discovery\nthrough Advanced Scientific (SciDAC) program, specifically: (a) SUNDIALS' new\nMPIManyVector module, that allows extreme flexibility in how a solution\n\"vector\" is staged on computational resources, (b) ARKode's new multirate\nintegration module, MRIStep, allowing high-order accurate calculations that\nsubcycle \"fast\" processes within \"slow\" ones, (c) SUNDIALS' new flexible linear\nsolver interfaces, that allow streamlined specification of problem-specific\nlinear solvers, and (d) SUNDIALS' new N_Vector additions of \"fused\" vector\noperations (to increase arithmetic intensity) and separation of reduction\noperations into \"local\" and \"global\" versions (to reduce latency by combining\nmultiple reductions into a single MPI_Allreduce call). We anticipate that\nsubsequent reports will extend this work to investigate a variety of other new\nfeatures, including SUNDIALS' generic SUNNonlinearSolver interface and\naccelerator-enabled N_Vector modules, and upcoming MRIStep extensions to\nsupport custom \"fast\" integrators (that leverage problem structure) and IMEX\nintegration of the \"slow\" time scale (to add diffusion).\n", "versions": [{"version": "v1", "created": "Fri, 27 Sep 2019 21:48:40 GMT"}], "update_date": "2019-10-01", "authors_parsed": [["Reynolds", "Daniel R.", ""], ["Gardner", "David J.", ""], ["Balos", "Cody J.", ""], ["Woodward", "Carol S.", ""]]}, {"id": "1909.13672", "submitter": "Robert Kl\\\"ofkorn", "authors": "Peter Bastian, Markus Blatt, Andreas Dedner, Nils-Arne Dreier,\n  Christian Engwer, Ren\\'e Fritze, Carsten Gr\\\"aser, Christoph Gr\\\"uninger,\n  Dominic Kempf, Robert Kl\\\"ofkorn, Mario Ohlberger, Oliver Sander", "title": "The DUNE Framework: Basic Concepts and Recent Developments", "comments": "69 pages, 14 figures, 4 tables and various code examples", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper presents the basic concepts and the module structure of the\nDistributed and Unified Numerics Environment and reflects on recent\ndevelopments and general changes that happened since the release of the first\nDune version in 2007 and the main papers describing that state [1, 2]. This\ndiscussion is accompanied with a description of various advanced features, such\nas coupling of domains and cut cells, grid modifications such as adaptation and\nmoving domains, high order discretizations and node level performance,\nnon-smooth multigrid methods, and multiscale methods. A brief discussion on\ncurrent and future development directions of the framework concludes the paper.\n", "versions": [{"version": "v1", "created": "Mon, 30 Sep 2019 13:15:53 GMT"}, {"version": "v2", "created": "Tue, 7 Apr 2020 10:42:21 GMT"}, {"version": "v3", "created": "Mon, 22 Jun 2020 16:27:51 GMT"}], "update_date": "2020-06-23", "authors_parsed": [["Bastian", "Peter", ""], ["Blatt", "Markus", ""], ["Dedner", "Andreas", ""], ["Dreier", "Nils-Arne", ""], ["Engwer", "Christian", ""], ["Fritze", "Ren\u00e9", ""], ["Gr\u00e4ser", "Carsten", ""], ["Gr\u00fcninger", "Christoph", ""], ["Kempf", "Dominic", ""], ["Kl\u00f6fkorn", "Robert", ""], ["Ohlberger", "Mario", ""], ["Sander", "Oliver", ""]]}]