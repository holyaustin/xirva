[{"id": "1508.00688", "submitter": "Bogdan Oancea", "authors": "Bogdan Oancea, Tudorel Andrei, Raluca Mariana Dragoescu", "title": "Accelerating R with high performance linear algebra libraries", "comments": null, "journal-ref": "Romanian Statistical Review, No. 3, 2015, pp. 109-117", "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://creativecommons.org/licenses/by-nc-sa/4.0/", "abstract": "  Linear algebra routines are basic building blocks for the statistical\nsoftware. In this paper we analyzed how can we can improve R performance for\nmatrix computations. We benchmarked few matrix operations using the standard\nlinear algebra libraries included in the R distribution and high performance\nlibraries like OpenBLAS, GotoBLAS and MKL. Our tests showed the the best\nresults are obtained with the MKL library, the other two libraries having\nsimilar performances, but lower than MKL\n", "versions": [{"version": "v1", "created": "Tue, 4 Aug 2015 07:25:56 GMT"}], "update_date": "2018-03-21", "authors_parsed": [["Oancea", "Bogdan", ""], ["Andrei", "Tudorel", ""], ["Dragoescu", "Raluca Mariana", ""]]}, {"id": "1508.01982", "submitter": "Miles Lubin", "authors": "Iain Dunning, Joey Huchette, Miles Lubin", "title": "JuMP: A Modeling Language for Mathematical Optimization", "comments": null, "journal-ref": null, "doi": "10.1137/15M1020575", "report-no": null, "categories": "math.OC cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  JuMP is an open-source modeling language that allows users to express a wide\nrange of optimization problems (linear, mixed-integer, quadratic,\nconic-quadratic, semidefinite, and nonlinear) in a high-level, algebraic\nsyntax. JuMP takes advantage of advanced features of the Julia programming\nlanguage to offer unique functionality while achieving performance on par with\ncommercial modeling tools for standard tasks. In this work we will provide\nbenchmarks, present the novel aspects of the implementation, and discuss how\nJuMP can be extended to new problem classes and composed with state-of-the-art\ntools for visualization and interactivity.\n", "versions": [{"version": "v1", "created": "Sun, 9 Aug 2015 03:55:19 GMT"}, {"version": "v2", "created": "Sun, 28 Feb 2016 21:47:09 GMT"}, {"version": "v3", "created": "Mon, 15 Aug 2016 04:27:52 GMT"}], "update_date": "2017-05-08", "authors_parsed": [["Dunning", "Iain", ""], ["Huchette", "Joey", ""], ["Lubin", "Miles", ""]]}, {"id": "1508.02219", "submitter": "Bruno Carpentieri", "authors": "Bruno Carpentieri, Jia Liao, Masha Sosonkina and Aldo Bonfiglioli", "title": "Using the VBARMS method in parallel computing", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "math.NA cs.MA cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The paper describes an improved parallel MPI-based implementation of VBARMS,\na variable block variant of the pARMS preconditioner proposed by Li,~Saad and\nSosonkina [NLAA, 2003] for solving general nonsymmetric linear systems. The\nparallel VBARMS solver can detect automatically exact or approximate dense\nstructures in the linear system, and exploits this information to achieve\nimproved reliability and increased throughput during the factorization. A novel\ngraph compression algorithm is discussed that finds these approximate dense\nblocks structures and requires only one simple to use parameter. A complete\nstudy of the numerical and parallel performance of parallel VBARMS is presented\nfor the analysis of large turbulent Navier-Stokes equations on a suite of\nthree-dimensional test cases.\n", "versions": [{"version": "v1", "created": "Mon, 10 Aug 2015 12:26:49 GMT"}], "update_date": "2015-08-11", "authors_parsed": [["Carpentieri", "Bruno", ""], ["Liao", "Jia", ""], ["Sosonkina", "Masha", ""], ["Bonfiglioli", "Aldo", ""]]}, {"id": "1508.02470", "submitter": "Tobin Isaac", "authors": "Tobin Isaac and Matthew G. Knepley", "title": "Support for Non-conformal Meshes in PETSc's DMPlex Interface", "comments": "16 pages, 13 figures, 5 code examples", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  PETSc's DMPlex interface for unstructured meshes has been extended to support\nnon-conformal meshes. The topological construct that DMPlex implements---the\nCW-complex---is by definition conformal, so representing non- conformal meshes\nin a way that hides complexity requires careful attention to the interface\nbetween DMPlex and numerical methods such as the finite element method. Our\napproach---which combines a tree structure for subset- superset relationships\nand a \"reference tree\" describing the types of non-conformal\ninterfaces---allows finite element code written for conformal meshes to extend\nautomatically: in particular, all \"hanging-node\" constraint calculations are\nhandled behind the scenes. We give example code demonstrating the use of this\nextension, and use it to convert forests of quadtrees and forests of octrees\nfrom the p4est library to DMPlex meshes.\n", "versions": [{"version": "v1", "created": "Tue, 11 Aug 2015 02:06:01 GMT"}], "update_date": "2015-08-12", "authors_parsed": [["Isaac", "Tobin", ""], ["Knepley", "Matthew G.", ""]]}, {"id": "1508.03211", "submitter": "Tor Myklebust", "authors": "Tor G. J. Myklebust", "title": "Computing accurate Horner form approximations to special functions in\n  finite precision arithmetic", "comments": "10 pages, 6 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.NA cs.MS math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In various applications, computers are required to compute approximations to\nunivariate elementary and special functions such as $\\exp$ and $\\arctan$ to\nmodest accuracy. This paper proposes a new heuristic for automating the design\nof such implementations. This heuristic takes a certain restricted\nspecification of program structure and the desired error properties as input\nand takes explicit account of roundoff error during evaluation.\n", "versions": [{"version": "v1", "created": "Thu, 13 Aug 2015 13:42:35 GMT"}], "update_date": "2015-08-14", "authors_parsed": [["Myklebust", "Tor G. J.", ""]]}, {"id": "1508.03954", "submitter": "Tobias Weinzierl", "authors": "Bram Reps and Tobias Weinzierl", "title": "Complex additive geometric multilevel solvers for Helmholtz equations on\n  spacetrees", "comments": null, "journal-ref": null, "doi": "10.1145/3054946", "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We introduce a family of implementations of low order, additive, geometric\nmultilevel solvers for systems of Helmholtz equations. Both grid spacing and\narithmetics may comprise complex numbers and we thus can apply complex scaling\ntechniques to the indefinite Helmholtz operator. Our implementations are based\nupon the notion of a spacetree and work exclusively with a finite number of\nprecomputed local element matrices. They are globally matrix-free.\n  Combining various relaxation factors with two grid transfer operators allows\nus to switch from pure additive multigrid over a hierarchical basis method into\nBPX with several multiscale smoothing variants within one code base. Pipelining\nallows us to realise a full approximation storage (FAS) scheme within the\nadditive environment where, amortised, each grid vertex carrying degrees of\nfreedom is read/written only once per iteration. The codes thus realise a\nsingle-touch policy. Among the features facilitated by matrix-free FAS is\narbitrary dynamic mesh refinement (AMR) for all solver variants. AMR as enabler\nfor full multigrid (FMG) cycling---the grid unfolds throughout the\ncomputation---allows us to reduce the cost per unknown per order of accuracy.\n  The present paper primary contributes towards software realisation and design\nquestions. Our experiments show that the consolidation of single-touch FAS,\ndynamic AMR and vectorisation-friendly, complex scaled, matrix-free FMG cycles\ndelivers a mature implementation blueprint for solvers for a non-trivial class\nof problems such as Helmholtz equations. Besides this validation, we put\nparticular emphasis on a strict implementation formalism as well as some\nimplementation correctness proofs.\n", "versions": [{"version": "v1", "created": "Mon, 17 Aug 2015 08:51:04 GMT"}, {"version": "v2", "created": "Thu, 5 May 2016 14:24:59 GMT"}, {"version": "v3", "created": "Tue, 30 Aug 2016 09:02:27 GMT"}], "update_date": "2017-06-28", "authors_parsed": [["Reps", "Bram", ""], ["Weinzierl", "Tobias", ""]]}, {"id": "1508.04740", "submitter": "Steffen Rechner", "authors": "Steffen Rechner and Annabell Berger", "title": "Marathon: An open source software library for the analysis of\n  Markov-Chain Monte Carlo algorithms", "comments": null, "journal-ref": null, "doi": "10.1371/journal.pone.0147935", "report-no": null, "categories": "cs.DM cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this paper, we consider the Markov-Chain Monte Carlo (MCMC) approach for\nrandom sampling of combinatorial objects. The running time of such an algorithm\ndepends on the total mixing time of the underlying Markov chain and is unknown\nin general. For some Markov chains, upper bounds on this total mixing time\nexist but are too large to be applicable in practice. We try to answer the\nquestion, whether the total mixing time is close to its upper bounds, or if\nthere is a significant gap between them. In doing so, we present the software\nlibrary marathon which is designed to support the analysis of MCMC based\nsampling algorithms. The main application of this library is to compute\nproperties of so-called state graphs which represent the structure of Markov\nchains. We use marathon to investigate the quality of several bounding methods\non four well-known Markov chains for sampling perfect matchings and bipartite\ngraph realizations. In a set of experiments, we compute the total mixing time\nand several of its bounds for a large number of input instances. We find that\nthe upper bound gained by the famous canonical path method is several\nmagnitudes larger than the total mixing time and deteriorates with growing\ninput size. In contrast, the spectral bound is found to be a precise\napproximation of the total mixing time.\n", "versions": [{"version": "v1", "created": "Wed, 19 Aug 2015 18:55:18 GMT"}, {"version": "v2", "created": "Wed, 14 Sep 2016 13:16:04 GMT"}], "update_date": "2016-09-15", "authors_parsed": [["Rechner", "Steffen", ""], ["Berger", "Annabell", ""]]}, {"id": "1508.05374", "submitter": "Vasilios Raptis", "authors": "Christos Dimitroulis, Theophanes Raptis, Vasilios Raptis", "title": "POLYANA - A tool for the calculation of molecular radial distribution\n  functions based on Molecular Dynamics trajectories", "comments": "16 pages, 3 figures", "journal-ref": null, "doi": "10.1016/j.cpc.2015.08.011", "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present an application for the calculation of radial distribution\nfunctions for molecular centres of mass, based on trajectories generated by\nmolecular simulation methods (Molecular Dynamics, Monte Carlo). When designing\nthis application, the emphasis was placed on ease of use as well as ease of\nfurther development. In its current version, the program can read trajectories\ngenerated by the well-known DL_POLY package, but it can be easily extended to\ntreat other formats. It is also very easy to 'hack' the program so it can\ncompute intermolecular radial distribution functions for groups of interaction\nsites rather than whole molecules.\n", "versions": [{"version": "v1", "created": "Mon, 11 May 2015 19:11:56 GMT"}], "update_date": "2016-05-04", "authors_parsed": [["Dimitroulis", "Christos", ""], ["Raptis", "Theophanes", ""], ["Raptis", "Vasilios", ""]]}, {"id": "1508.05470", "submitter": "Leonid Boytsov", "authors": "Bilegsaikhan Naidan, Leonid Boytsov, Yury Malkov, David Novak", "title": "Non-Metric Space Library Manual", "comments": "Methodology paper", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.IR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This document covers a library for fast similarity (k-NN)search. It describes\nonly search methods and distances (spaces). Details about building, installing,\nPython bindings can be found\nonline:https://github.com/searchivarius/nmslib/tree/v1.8/. Even though the\nlibrary contains a variety of exact metric-space access methods, our main focus\nis on more generic and approximate search methods, in particular, on methods\nfor non-metric spaces. NMSLIB is possibly the first library with a principled\nsupport for non-metric space searching.\n", "versions": [{"version": "v1", "created": "Sat, 22 Aug 2015 04:43:36 GMT"}, {"version": "v2", "created": "Fri, 20 May 2016 15:45:46 GMT"}, {"version": "v3", "created": "Thu, 6 Jun 2019 01:23:59 GMT"}, {"version": "v4", "created": "Fri, 7 Jun 2019 00:49:39 GMT"}], "update_date": "2019-06-10", "authors_parsed": [["Naidan", "Bilegsaikhan", ""], ["Boytsov", "Leonid", ""], ["Malkov", "Yury", ""], ["Novak", "David", ""]]}, {"id": "1508.07231", "submitter": "Timo Heister", "authors": "Bruno Turcksin and Timo Heister and Wolfgang Bangerth", "title": "Clone and graft: Testing scientific applications as they are built", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This article describes our experience developing and maintaining automated\ntests for scientific applications. The main idea evolves around building on\nalready existing tests by cloning and grafting. The idea is demonstrated on a\nminimal model problem written in Python.\n", "versions": [{"version": "v1", "created": "Fri, 28 Aug 2015 14:42:09 GMT"}], "update_date": "2015-08-31", "authors_parsed": [["Turcksin", "Bruno", ""], ["Heister", "Timo", ""], ["Bangerth", "Wolfgang", ""]]}, {"id": "1508.07582", "submitter": "Christopher Rook", "authors": "Christopher J. Rook, Mitchell Kerman", "title": "Approximating the Sum of Correlated Lognormals: An Implementation", "comments": "Fully documented source code is included", "journal-ref": null, "doi": null, "report-no": null, "categories": "q-fin.GN cs.MS stat.AP", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Lognormal random variables appear naturally in many engineering disciplines,\nincluding wireless communications, reliability theory, and finance. So, too,\ndoes the sum of (correlated) lognormal random variables. Unfortunately, no\nclosed form probability distribution exists for such a sum, and it requires\napproximation. Some approximation methods date back over 80 years and most take\none of two approaches, either: 1) an approximate probability distribution is\nderived mathematically, or 2) the sum is approximated by a single lognormal\nrandom variable. In this research, we take the latter approach and review a\nfairly recent approximation procedure proposed by Mehta, Wu, Molisch, and Zhang\n(2007), then implement it using C++. The result is applied to a discrete time\nmodel commonly encountered within the field of financial economics.\n", "versions": [{"version": "v1", "created": "Sun, 30 Aug 2015 14:47:50 GMT"}], "update_date": "2015-09-01", "authors_parsed": [["Rook", "Christopher J.", ""], ["Kerman", "Mitchell", ""]]}]