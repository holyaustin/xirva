[{"id": "1305.1422", "submitter": "Peter Wittek", "authors": "Peter Wittek, Shi Chao Gao, Ik Soo Lim, Li Zhao", "title": "Somoclu: An Efficient Parallel Library for Self-Organizing Maps", "comments": "26 pages, 9 figures. The code is available at\n  https://peterwittek.github.io/somoclu/", "journal-ref": "Journal of Statistical Software, 78(9), 1-21 (2017)", "doi": "10.18637/jss.v078.i09", "report-no": null, "categories": "cs.DC cs.MS cs.NE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Somoclu is a massively parallel tool for training self-organizing maps on\nlarge data sets written in C++. It builds on OpenMP for multicore execution,\nand on MPI for distributing the workload across the nodes in a cluster. It is\nalso able to boost training by using CUDA if graphics processing units are\navailable. A sparse kernel is included, which is useful for high-dimensional\nbut sparse data, such as the vector spaces common in text mining workflows.\nPython, R and MATLAB interfaces facilitate interactive use. Apart from fast\nexecution, memory use is highly optimized, enabling training large emergent\nmaps even on a single computer.\n", "versions": [{"version": "v1", "created": "Tue, 7 May 2013 06:43:26 GMT"}, {"version": "v2", "created": "Wed, 28 Jan 2015 12:40:08 GMT"}, {"version": "v3", "created": "Mon, 11 Jan 2016 10:48:52 GMT"}, {"version": "v4", "created": "Fri, 9 Jun 2017 14:03:01 GMT"}], "update_date": "2017-06-12", "authors_parsed": [["Wittek", "Peter", ""], ["Gao", "Shi Chao", ""], ["Lim", "Ik Soo", ""], ["Zhao", "Li", ""]]}, {"id": "1305.2550", "submitter": "Guiomar Niso", "authors": "Guiomar Niso, Ricardo Bru\\~na, Ernesto Pereda, Ricardo Guti\\'errez,\n  Ricardo Bajo, Fernando Maest\\'u and Francisco del-Pozo", "title": "HERMES: towards an integrated toolbox to characterize functional and\n  effective brain connectivity", "comments": "58 pages, 10 figures, 3 tables, Neuroinformatics 2013", "journal-ref": null, "doi": "10.1007/s12021-013-9186-1", "report-no": null, "categories": "q-bio.NC cs.CE cs.MS physics.bio-ph physics.data-an", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The analysis of the interdependence between time series has become an\nimportant field of research in the last years, mainly as a result of advances\nin the characterization of dynamical systems from the signals they produce, the\nintroduction of concepts such as generalized and phase synchronization and the\napplication of information theory to time series analysis. In neurophysiology,\ndifferent analytical tools stemming from these concepts have added to the\n'traditional' set of linear methods, which includes the cross-correlation and\nthe coherency function in the time and frequency domain, respectively, or more\nelaborated tools such as Granger Causality. This increase in the number of\napproaches to tackle the existence of functional (FC) or effective connectivity\n(EC) between two (or among many) neural networks, along with the mathematical\ncomplexity of the corresponding time series analysis tools, makes it desirable\nto arrange them into a unified-easy-to-use software package. The goal is to\nallow neuroscientists, neurophysiologists and researchers from related fields\nto easily access and make use of these analysis methods from a single\nintegrated toolbox. Here we present HERMES (http://hermes.ctb.upm.es), a\ntoolbox for the Matlab environment (The Mathworks, Inc), which is designed for\nthe analysis functional and effective brain connectivity from\nneurophysiological data such as multivariate EEG and/or MEG records. It\nincludes also visualization tools and statistical methods to address the\nproblem of multiple comparisons. We believe that this toolbox will be very\nhelpful to all the researchers working in the emerging field of brain\nconnectivity analysis.\n", "versions": [{"version": "v1", "created": "Sun, 12 May 2013 01:04:55 GMT"}, {"version": "v2", "created": "Mon, 27 May 2013 03:53:02 GMT"}], "update_date": "2013-05-28", "authors_parsed": [["Niso", "Guiomar", ""], ["Bru\u00f1a", "Ricardo", ""], ["Pereda", "Ernesto", ""], ["Guti\u00e9rrez", "Ricardo", ""], ["Bajo", "Ricardo", ""], ["Maest\u00fa", "Fernando", ""], ["del-Pozo", "Francisco", ""]]}, {"id": "1305.3122", "submitter": "Caroline Japhet", "authors": "Fran\\c{c}ois Cuvelier (LAGA), Caroline Japhet (LAGA, Inria\n  Paris-Rocquencourt), Gilles Scarella (LAGA)", "title": "An efficient way to perform the assembly of finite element matrices in\n  Matlab and Octave", "comments": "Inria: No: RR-8305 (2013)", "journal-ref": null, "doi": null, "report-no": "RR-8305", "categories": "cs.NA cs.MS math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We describe different optimization techniques to perform the assembly of\nfinite element matrices in Matlab and Octave, from the standard approach to\nrecent vectorized ones, without any low level language used. We finally obtain\na simple and efficient vectorized algorithm able to compete in performance with\ndedicated software such as FreeFEM++. The principle of this assembly algorithm\nis general, we present it for different matrices in the P1 finite elements case\nand in linear elasticity. We present numerical results which illustrate the\ncomputational costs of the different approaches\n", "versions": [{"version": "v1", "created": "Tue, 14 May 2013 11:52:17 GMT"}], "update_date": "2013-05-15", "authors_parsed": [["Cuvelier", "Fran\u00e7ois", "", "LAGA"], ["Japhet", "Caroline", "", "LAGA, Inria\n  Paris-Rocquencourt"], ["Scarella", "Gilles", "", "LAGA"]]}, {"id": "1305.3215", "submitter": "David Stoutemyer", "authors": "David R. Stoutemyer", "title": "A computer algebra user interface manifesto", "comments": "38 pages, 12 figures, to be published in Communications in Computer\n  Algebra", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.SC cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Many computer algebra systems have more than 1000 built-in functions, making\nexpertise difficult. Using mock dialog boxes, this article describes a proposed\ninteractive general-purpose wizard for organizing optional transformations and\nallowing easy fine grain control over the form of the result even by amateurs.\nThis wizard integrates ideas including:\n  * flexible subexpression selection;\n  * complete control over the ordering of variables and commutative operands,\nwith well-chosen defaults;\n  * interleaving the choice of successively less main variables with applicable\nfunction choices to provide detailed control without incurring a combinatorial\nnumber of applicable alternatives at any one level;\n  * quick applicability tests to reduce the listing of inapplicable\ntransformations;\n  * using an organizing principle to order the alternatives in a helpful\nmanner;\n  * labeling quickly-computed alternatives in dialog boxes with a preview of\ntheir results,\n  * using ellipsis elisions if necessary or helpful;\n  * allowing the user to retreat from a sequence of choices to explore other\nbranches of the tree of alternatives or to return quickly to branches already\nvisited;\n  * allowing the user to accumulate more than one of the alternative forms;\n  * integrating direct manipulation into the wizard; and\n  * supporting not only the usual input-result pair mode, but also the useful\nalternative derivational and in situ replacement modes in a unified window.\n", "versions": [{"version": "v1", "created": "Tue, 14 May 2013 17:21:29 GMT"}], "update_date": "2016-11-26", "authors_parsed": [["Stoutemyer", "David R.", ""]]}, {"id": "1305.3625", "submitter": "Knut Gjerden Phd", "authors": "Knut Skogstrand Gjerden", "title": "Making the case of GPUs in courses on computational physics", "comments": "11 pages, 2 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "physics.comp-ph cs.MS physics.ed-ph", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Most relatively modern desktop or even laptop computers contain a graphics\ncard useful for more than showing colors on a screen. In this paper, we make a\ncase for why you should learn enough about GPU (graphics processing unit)\ncomputing to use as an accelerator or even replacement to your CPU code. We\ninclude an example of our own as a case study to show what can be realistically\nexpected.\n", "versions": [{"version": "v1", "created": "Wed, 15 May 2013 20:16:42 GMT"}], "update_date": "2013-05-17", "authors_parsed": [["Gjerden", "Knut Skogstrand", ""]]}, {"id": "1305.4452", "submitter": "Lisandro Dalcin", "authors": "Lisandro Dalcin and Nathan Collier and Philippe Vignal and Adriano\n  M.A. Cortes and V.M. Calo", "title": "PetIGA: A Framework for High-Performance Isogeometric Analysis", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present PetIGA, a code framework to approximate the solution of partial\ndifferential equations using isogeometric analysis. PetIGA can be used to\nassemble matrices and vectors which come from a Galerkin weak form, discretized\nwith Non-Uniform Rational B-spline basis functions. We base our framework on\nPETSc, a high-performance library for the scalable solution of partial\ndifferential equations, which simplifies the development of large-scale\nscientific codes, provides a rich environment for prototyping, and separates\nparallelism from algorithm choice. We describe the implementation of PetIGA,\nand exemplify its use by solving a model nonlinear problem. To illustrate the\nrobustness and flexibility of PetIGA, we solve some challenging nonlinear\npartial differential equations that include problems in both solid and fluid\nmechanics. We show strong scaling results on up to 4096 cores, which confirm\nthe suitability of PetIGA for large scale simulations.\n", "versions": [{"version": "v1", "created": "Mon, 20 May 2013 07:26:33 GMT"}, {"version": "v2", "created": "Mon, 27 Jul 2015 17:42:25 GMT"}, {"version": "v3", "created": "Tue, 28 Jul 2015 12:52:07 GMT"}], "update_date": "2015-07-29", "authors_parsed": [["Dalcin", "Lisandro", ""], ["Collier", "Nathan", ""], ["Vignal", "Philippe", ""], ["Cortes", "Adriano M. A.", ""], ["Calo", "V. M.", ""]]}, {"id": "1305.4886", "submitter": "Christopher Paciorek", "authors": "Christopher J. Paciorek, Benjamin Lipshitz, Wei Zhuo, Prabhat, Cari G.\n  Kaufman, Rollin C. Thomas", "title": "Parallelizing Gaussian Process Calculations in R", "comments": "21 pages, 8 figures", "journal-ref": "Journal of Statistical Software 2015, Vol. 63, Number 10, 1-23", "doi": "10.18637/jss.v063.i10", "report-no": null, "categories": "stat.CO cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We consider parallel computation for Gaussian process calculations to\novercome computational and memory constraints on the size of datasets that can\nbe analyzed. Using a hybrid parallelization approach that uses both threading\n(shared memory) and message-passing (distributed memory), we implement the core\nlinear algebra operations used in spatial statistics and Gaussian process\nregression in an R package called bigGP that relies on C and MPI. The approach\ndivides the matrix into blocks such that the computational load is balanced\nacross processes while communication between processes is limited. The package\nprovides an API enabling R programmers to implement Gaussian process-based\nmethods by using the distributed linear algebra operations without any C or MPI\ncoding. We illustrate the approach and software by analyzing an astrophysics\ndataset with n=67,275 observations.\n", "versions": [{"version": "v1", "created": "Tue, 21 May 2013 17:08:54 GMT"}], "update_date": "2015-12-08", "authors_parsed": [["Paciorek", "Christopher J.", ""], ["Lipshitz", "Benjamin", ""], ["Zhuo", "Wei", ""], ["Prabhat", "", ""], ["Kaufman", "Cari G.", ""], ["Thomas", "Rollin C.", ""]]}, {"id": "1305.5120", "submitter": "Edoardo Di Napoli", "authors": "Mario Berljafa (1) and Edoardo Di Napoli (2 and 3) ((1) Department of\n  Mathematics, University of Zagreb, (2) Juelich Supercomputing Centre,\n  Forschungszentrum Juelich, (3) AICES, RWTH Aachen)", "title": "A Parallel and Scalable Iterative Solver for Sequences of Dense\n  Eigenproblems Arising in FLAPW", "comments": "Submitted to 10th International Conference on Parallel Processing and\n  Applied Mathematics(PPAM 2013)", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.MS physics.comp-ph", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In one of the most important methods in Density Functional Theory - the\nFull-Potential Linearized Augmented Plane Wave (FLAPW) method - dense\ngeneralized eigenproblems are organized in long sequences. Moreover each\neigenproblem is strongly correlated to the next one in the sequence. We propose\na novel approach which exploits such correlation through the use of an\neigensolver based on subspace iteration and accelerated with Chebyshev\npolynomials. The resulting solver, parallelized using the Elemental library\nframework, achieves excellent scalability and is competitive with current dense\nparallel eigensolvers.\n", "versions": [{"version": "v1", "created": "Tue, 21 May 2013 10:08:01 GMT"}], "update_date": "2013-05-23", "authors_parsed": [["Berljafa", "Mario", "", "2 and 3"], ["Di Napoli", "Edoardo", "", "2 and 3"]]}, {"id": "1305.5710", "submitter": "Carst Tankink", "authors": "Carst Tankink, Cezary Kaliszyk, Josef Urban, Herman Geuvers", "title": "Formal Mathematics on Display: A Wiki for Flyspeck", "comments": "16 pages, published as part of the CICM 2013 conference proceedings", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.DL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The Agora system is a prototype \"Wiki for Formal Mathematics\", with an aim to\nsupport developing and documenting large formalizations of mathematics in a\nproof assistant. The functions implemented in Agora include in-browser editing,\nstrong AI/ATP proof advice, verification, and HTML rendering. The HTML\nrendering contains hyperlinks and provides on-demand explanation of the proof\nstate for each proof step. In the present paper we show the prototype Flyspeck\nWiki as an instance of Agora for HOL Light formalizations. The wiki can be used\nfor formalizations of mathematics and for writing informal wiki pages about\nmathematics. Such informal pages may contain islands of formal text, which is\nused here for providing an initial cross-linking between Hales's informal\nFlyspeck book, and the formal Flyspeck development.\n  The Agora platform intends to address distributed wiki-style collaboration on\nlarge formalization projects, in particular both the aspect of immediate\nediting, verification and rendering of formal code, and the aspect of gradual\nand mutual refactoring and correspondence of the initial informal text and its\nformalization. Here, we highlight these features within the Flyspeck Wiki.\n", "versions": [{"version": "v1", "created": "Fri, 24 May 2013 12:26:45 GMT"}], "update_date": "2013-05-27", "authors_parsed": [["Tankink", "Carst", ""], ["Kaliszyk", "Cezary", ""], ["Urban", "Josef", ""], ["Geuvers", "Herman", ""]]}]