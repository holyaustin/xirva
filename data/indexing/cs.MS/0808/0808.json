[{"id": "0808.0540", "submitter": "Paul Tarau", "authors": "Paul Tarau", "title": "Executable Set Theory and Arithmetic Encodings in Prolog", "comments": "Unpublished draft", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.LO cs.DM cs.DS cs.MS cs.SC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The paper is organized as a self-contained literate Prolog program that\nimplements elements of an executable finite set theory with focus on\ncombinatorial generation and arithmetic encodings. The complete Prolog code is\navailable at http://logic.csci.unt.edu/tarau/research/2008/pHFS.zip . First,\nranking and unranking functions for some \"mathematically elegant\" data types in\nthe universe of Hereditarily Finite Sets with Urelements are provided,\nresulting in arithmetic encodings for powersets, hypergraphs, ordinals and\nchoice functions. After implementing a digraph representation of Hereditarily\nFinite Sets we define {\\em decoration functions} that can recover well-founded\nsets from encodings of their associated acyclic digraphs. We conclude with an\nencoding of arbitrary digraphs and discuss a concept of duality induced by the\nset membership relation. In the process, we uncover the surprising possibility\nof internally sharing isomorphic objects, independently of their language level\ntypes and meanings.\n", "versions": [{"version": "v1", "created": "Tue, 5 Aug 2008 04:59:56 GMT"}], "update_date": "2009-09-29", "authors_parsed": [["Tarau", "Paul", ""]]}, {"id": "0808.0554", "submitter": "Paul Tarau", "authors": "Paul Tarau", "title": "Ranking and Unranking of Hereditarily Finite Functions and Permutations", "comments": "unpublished draft", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.LO cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Prolog's ability to return multiple answers on backtracking provides an\nelegant mechanism to derive reversible encodings of combinatorial objects as\nNatural Numbers i.e. {\\em ranking} and {\\em unranking} functions. Starting from\na generalization of Ackerman's encoding of Hereditarily Finite Sets with\nUrelements and a novel tupling/untupling operation, we derive encodings for\nFinite Functions and use them as building blocks for an executable theory of\n{\\em Hereditarily Finite Functions}. The more difficult problem of {\\em\nranking} and {\\em unranking} {\\em Hereditarily Finite Permutations} is then\ntackled using Lehmer codes and factoradics.\n  The paper is organized as a self-contained literate Prolog program available\nat \\url{http://logic.csci.unt.edu/tarau/research/2008/pHFF.zip}\n", "versions": [{"version": "v1", "created": "Tue, 5 Aug 2008 05:20:51 GMT"}], "update_date": "2008-08-06", "authors_parsed": [["Tarau", "Paul", ""]]}, {"id": "0808.0754", "submitter": "Paul Tarau", "authors": "Paul Tarau", "title": "A Functional Hitchhiker's Guide to Hereditarily Finite Sets, Ackermann\n  Encodings and Pairing Functions", "comments": "unpublished draft", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.DM cs.DS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The paper is organized as a self-contained literate Haskell program that\nimplements elements of an executable finite set theory with focus on\ncombinatorial generation and arithmetic encodings. The code, tested under GHC\n6.6.1, is available at http://logic.csci.unt.edu/tarau/research/2008/fSET.zip .\n  We introduce ranking and unranking functions generalizing Ackermann's\nencoding to the universe of Hereditarily Finite Sets with Urelements. Then we\nbuild a lazy enumerator for Hereditarily Finite Sets with Urelements that\nmatches the unranking function provided by the inverse of Ackermann's encoding\nand we describe functors between them resulting in arithmetic encodings for\npowersets, hypergraphs, ordinals and choice functions. After implementing a\ndigraph representation of Hereditarily Finite Sets we define {\\em decoration\nfunctions} that can recover well-founded sets from encodings of their\nassociated acyclic digraphs. We conclude with an encoding of arbitrary digraphs\nand discuss a concept of duality induced by the set membership relation.\n  Keywords: hereditarily finite sets, ranking and unranking functions,\nexecutable set theory, arithmetic encodings, Haskell data representations,\nfunctional programming and computational mathematics\n", "versions": [{"version": "v1", "created": "Wed, 6 Aug 2008 01:05:09 GMT"}], "update_date": "2008-08-07", "authors_parsed": [["Tarau", "Paul", ""]]}, {"id": "0808.2794", "submitter": "Julien Langou", "authors": "Marc Baboulin, Alfredo Buttari, Jack Dongarra, Jakub Kurzak, Julie\n  Langou, Julien Langou, Piotr Luszczek, and Stanimire Tomov", "title": "Accelerating Scientific Computations with Mixed Precision Algorithms", "comments": null, "journal-ref": null, "doi": "10.1016/j.cpc.2008.11.005", "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  On modern architectures, the performance of 32-bit operations is often at\nleast twice as fast as the performance of 64-bit operations. By using a\ncombination of 32-bit and 64-bit floating point arithmetic, the performance of\nmany dense and sparse linear algebra algorithms can be significantly enhanced\nwhile maintaining the 64-bit accuracy of the resulting solution. The approach\npresented here can apply not only to conventional processors but also to other\ntechnologies such as Field Programmable Gate Arrays (FPGA), Graphical\nProcessing Units (GPU), and the STI Cell BE processor. Results on modern\nprocessor architectures and the STI Cell BE are presented.\n", "versions": [{"version": "v1", "created": "Wed, 20 Aug 2008 17:50:36 GMT"}], "update_date": "2015-05-13", "authors_parsed": [["Baboulin", "Marc", ""], ["Buttari", "Alfredo", ""], ["Dongarra", "Jack", ""], ["Kurzak", "Jakub", ""], ["Langou", "Julie", ""], ["Langou", "Julien", ""], ["Luszczek", "Piotr", ""], ["Tomov", "Stanimire", ""]]}]