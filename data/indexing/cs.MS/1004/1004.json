[{"id": "1004.3173", "submitter": "Richard Brent", "authors": "Richard P. Brent", "title": "MP users guide", "comments": "MP Users Guide (fourth edition), 73 pages. A technical report that\n  was not published elsewhere, submitted for archival purposes. For further\n  information see http://wwwmaths.anu.edu.au/~brent/pub/pub035.html", "journal-ref": null, "doi": null, "report-no": "TR-CS-81-08, Department of Computer Science, Australian National\n  University (June 1981)", "categories": "cs.MS math.NA math.NT", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  MP is a package of ANSI Standard Fortran (ANS X3.9-1966) subroutines for\nperforming multiple-precision floating-point arithmetic and evaluating\nelementary and special functions. The subroutines are machine independent and\nthe precision is arbitrary, subject to storage limitations. The User's Guide\ndescribes the routines and their calling sequences, example and test programs,\nuse of the Augment precompiler, and gives installation instructions for the\npackage.\n", "versions": [{"version": "v1", "created": "Mon, 19 Apr 2010 12:26:15 GMT"}, {"version": "v2", "created": "Tue, 20 Apr 2010 00:56:02 GMT"}], "update_date": "2010-04-21", "authors_parsed": [["Brent", "Richard P.", ""]]}, {"id": "1004.3719", "submitter": "Jean-Guillaume Dumas", "authors": "Brice Boyer (LJK), Jean-Guillaume Dumas (LJK), Pascal Giorgi (LIRMM)", "title": "Exact Sparse Matrix-Vector Multiplication on GPU's and Multicore\n  Architectures", "comments": null, "journal-ref": "International Symposium on Parallel Symbolic Computation, Grenoble\n  : France (2010)", "doi": "10.1145/1837210.1837224", "report-no": null, "categories": "cs.DC cs.MS cs.SC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We propose different implementations of the sparse matrix--dense vector\nmultiplication (\\spmv{}) for finite fields and rings $\\Zb/m\\Zb$. We take\nadvantage of graphic card processors (GPU) and multi-core architectures. Our\naim is to improve the speed of \\spmv{} in the \\linbox library, and henceforth\nthe speed of its black box algorithms. Besides, we use this and a new\nparallelization of the sigma-basis algorithm in a parallel block Wiedemann rank\nimplementation over finite fields.\n", "versions": [{"version": "v1", "created": "Wed, 21 Apr 2010 14:52:36 GMT"}], "update_date": "2010-09-09", "authors_parsed": [["Boyer", "Brice", "", "LJK"], ["Dumas", "Jean-Guillaume", "", "LJK"], ["Giorgi", "Pascal", "", "LIRMM"]]}, {"id": "1004.5034", "submitter": "Franck Butelle", "authors": "Franck Butelle and Florent Hivert and Micaela Mayero and Fr\\'ed\\'eric\n  Toumazet", "title": "Formal Proof of SCHUR Conjugate Function", "comments": "To appear in CALCULEMUS 2010", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.LO cs.MS cs.SC cs.SE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The main goal of our work is to formally prove the correctness of the key\ncommands of the SCHUR software, an interactive program for calculating with\ncharacters of Lie groups and symmetric functions. The core of the computations\nrelies on enumeration and manipulation of combinatorial structures. As a first\n\"proof of concept\", we present a formal proof of the conjugate function,\nwritten in C. This function computes the conjugate of an integer partition. To\nformally prove this program, we use the Frama-C software. It allows us to\nannotate C functions and to generate proof obligations, which are proved using\nseveral automated theorem provers. In this paper, we also draw on methodology,\ndiscussing on how to formally prove this kind of program.\n", "versions": [{"version": "v1", "created": "Wed, 28 Apr 2010 14:12:43 GMT"}], "update_date": "2010-04-29", "authors_parsed": [["Butelle", "Franck", ""], ["Hivert", "Florent", ""], ["Mayero", "Micaela", ""], ["Toumazet", "Fr\u00e9d\u00e9ric", ""]]}]