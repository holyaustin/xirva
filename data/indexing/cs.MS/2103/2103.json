[{"id": "2103.00717", "submitter": "Yi-Shuai Niu", "authors": "Yi-Shuai Niu, Yu You", "title": "A Difference-of-Convex Cutting Plane Algorithm for Mixed-Binary Linear\n  Program", "comments": "31 pages, 4 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "math.OC cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this paper, we propose a cutting plane algorithm based on DC\n(Difference-of-Convex) programming and DC cut for globally solving Mixed-Binary\nLinear Program (MBLP). We first use a classical DC programming formulation via\nthe exact penalization to formulate MBLP as a DC program, which can be solved\nby DCA algorithm. Then, we focus on the construction of DC cuts, which serves\neither as a local cut (namely type-I DC cut) at feasible local minimizer of\nMBLP, or as a global cut (namely type-II DC cut) at infeasible local minimizer\nof MBLP if some particular assumptions are verified. Otherwise, the\nconstructibility of DC cut is still unclear, and we propose to use classical\nglobal cuts (such as the Lift-and-Project cut) instead. Combining DC cut and\nclassical global cuts, a cutting plane algorithm, namely DCCUT, is established\nfor globally solving MBLP. The convergence theorem of DCCUT is proved.\nRestarting DCA in DCCUT helps to quickly update the upper bound solution and to\nintroduce more DC cuts for lower bound improvement. A variant of DCCUT by\nintroducing more classical global cuts in each iteration is proposed, and\nparallel versions of DCCUT and its variant are also designed which use the\npower of multiple processors for better performance. Numerical simulations of\nDCCUT type algorithms comparing with the classical cutting plane algorithm\nusing Lift-and-Project cuts are reported. Tests on some specific samples and\nthe MIPLIB 2017 benchmark dataset demonstrate the benefits of DC cut and good\nperformance of DCCUT algorithms.\n", "versions": [{"version": "v1", "created": "Mon, 1 Mar 2021 03:08:45 GMT"}], "update_date": "2021-03-02", "authors_parsed": [["Niu", "Yi-Shuai", ""], ["You", "Yu", ""]]}, {"id": "2103.00915", "submitter": "Victor Magron", "authors": "Victor Magron and Jie Wang", "title": "TSSOS: a Julia library to exploit sparsity for large-scale polynomial\n  optimization", "comments": "10 pages, 2 figures, 2 tables", "journal-ref": null, "doi": null, "report-no": null, "categories": "math.OC cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The Julia library TSSOS aims at helping polynomial optimizers to solve\nlarge-scale problems with sparse input data. The underlying algorithmic\nframework is based on exploiting correlative and term sparsity to obtain a new\nmoment-SOS hierarchy involving potentially much smaller positive semidefinite\nmatrices. TSSOS can be applied to numerous problems ranging from power networks\nto eigenvalue and trace optimization of noncommutative polynomials, involving\nup to tens of thousands of variables and constraints.\n", "versions": [{"version": "v1", "created": "Mon, 1 Mar 2021 11:09:40 GMT"}], "update_date": "2021-03-02", "authors_parsed": [["Magron", "Victor", ""], ["Wang", "Jie", ""]]}, {"id": "2103.00917", "submitter": "Hung Du", "authors": "Hung Du and Yong-Bin Kang", "title": "An open-source framework for ExpFinder integrating $N$-gram Vector Space\n  Model and $\\mu$CO-HITS", "comments": "9 pages, 4 figures, \"Submitted to Software Impacts\"", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.IR cs.MS cs.SE", "license": "http://creativecommons.org/licenses/by-sa/4.0/", "abstract": "  Finding experts drives successful collaborations and high-quality product\ndevelopment in academic and research domains. To contribute to the expert\nfinding research community, we have developed ExpFinder which is a novel\nensemble model for expert finding by integrating an $N$-gram vector space model\n($n$VSM) and a graph-based model ($\\mu$CO-HITS). This paper provides\ndescriptions of ExpFinder's architecture, key components, functionalities, and\nillustrative examples. ExpFinder is an effective and competitive model for\nexpert finding, significantly outperforming a number of expert finding models.\n", "versions": [{"version": "v1", "created": "Mon, 1 Mar 2021 11:14:01 GMT"}, {"version": "v2", "created": "Thu, 11 Mar 2021 22:30:50 GMT"}], "update_date": "2021-03-15", "authors_parsed": [["Du", "Hung", ""], ["Kang", "Yong-Bin", ""]]}, {"id": "2103.03122", "submitter": "Giovanni Cerulli", "authors": "Giovanni Cerulli", "title": "Machine Learning using Stata/Python", "comments": "Keywords: Machine Learning, Stata, Python, Optimal tuning", "journal-ref": null, "doi": null, "report-no": null, "categories": "stat.CO cs.LG cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present two related Stata modules, r_ml_stata and c_ml_stata, for fitting\npopular Machine Learning (ML) methods both in regression and classification\nsettings. Using the recent Stata/Python integration platform (sfi) of Stata 16,\nthese commands provide hyper-parameters' optimal tuning via K-fold\ncross-validation using greed search. More specifically, they make use of the\nPython Scikit-learn API to carry out both cross-validation and outcome/label\nprediction.\n", "versions": [{"version": "v1", "created": "Wed, 3 Mar 2021 10:31:44 GMT"}], "update_date": "2021-03-05", "authors_parsed": [["Cerulli", "Giovanni", ""]]}, {"id": "2103.03646", "submitter": "Sebastian Falkensteiner", "authors": "Francois Boulier, Jose Cano, Sebastian Falkensteiner, Rafael Sendra", "title": "Puiseux Series and Algebraic Solutions of First Order Autonomous AODEs\n  -- A MAPLE Package", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.SC", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  There exist several methods for computing exact solutions of algebraic\ndifferential equations. Most of the methods, however, do not ensure existence\nand uniqueness of the solutions and might fail after several steps, or are\nrestricted to linear equations. The authors have presented in previous works a\nmethod to overcome this problem for autonomous first order algebraic ordinary\ndifferential equations and formal Puiseux series solutions and algebraic\nsolutions. In the first case, all solutions can uniquely be represented by a\nsufficiently large truncation and in the latter case by its minimal polynomial.\nThe main contribution of this paper is the implementation, in a MAPLE-package\nnamed FirstOrderSolve, of the algorithmic ideas presented therein. More\nprecisely, all formal Puiseux series and algebraic solutions, including the\ngeneric and singular solutions, are computed and described uniquely. The\ncomputation strategy is to reduce the given differential equation to a simpler\none by using local parametrizations and the already known degree bounds.\n", "versions": [{"version": "v1", "created": "Fri, 5 Mar 2021 13:20:47 GMT"}], "update_date": "2021-03-08", "authors_parsed": [["Boulier", "Francois", ""], ["Cano", "Jose", ""], ["Falkensteiner", "Sebastian", ""], ["Sendra", "Rafael", ""]]}, {"id": "2103.03653", "submitter": "Maciej Besta", "authors": "Maciej Besta, Zur Vonarburg-Shmaria, Yannick Schaffner, Leonardo\n  Schwarz, Grzegorz Kwasniewski, Lukas Gianinazzi, Jakub Beranek, Kacper Janda,\n  Tobias Holenstein, Sebastian Leisinger, Peter Tatkowski, Esref Ozdemir,\n  Adrian Balla, Marcin Copik, Philipp Lindenberger, Pavel Kalvoda, Marek\n  Konieczny, Onur Mutlu, Torsten Hoefler", "title": "GraphMineSuite: Enabling High-Performance and Programmable Graph Mining\n  Algorithms with Set Algebra", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.CV cs.DS cs.MS cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We propose GraphMineSuite (GMS): the first benchmarking suite for graph\nmining that facilitates evaluating and constructing high-performance graph\nmining algorithms. First, GMS comes with a benchmark specification based on\nextensive literature review, prescribing representative problems, algorithms,\nand datasets. Second, GMS offers a carefully designed software platform for\nseamless testing of different fine-grained elements of graph mining algorithms,\nsuch as graph representations or algorithm subroutines. The platform includes\nparallel implementations of more than 40 considered baselines, and it\nfacilitates developing complex and fast mining algorithms. High modularity is\npossible by harnessing set algebra operations such as set intersection and\ndifference, which enables breaking complex graph mining algorithms into simple\nbuilding blocks that can be separately experimented with. GMS is supported with\na broad concurrency analysis for portability in performance insights, and a\nnovel performance metric to assess the throughput of graph mining algorithms,\nenabling more insightful evaluation. As use cases, we harness GMS to rapidly\nredesign and accelerate state-of-the-art baselines of core graph mining\nproblems: degeneracy reordering (by up to >2x), maximal clique listing (by up\nto >9x), k-clique listing (by 1.1x), and subgraph isomorphism (by up to 2.5x),\nalso obtaining better theoretical performance bounds.\n", "versions": [{"version": "v1", "created": "Fri, 5 Mar 2021 13:26:18 GMT"}], "update_date": "2021-03-08", "authors_parsed": [["Besta", "Maciej", ""], ["Vonarburg-Shmaria", "Zur", ""], ["Schaffner", "Yannick", ""], ["Schwarz", "Leonardo", ""], ["Kwasniewski", "Grzegorz", ""], ["Gianinazzi", "Lukas", ""], ["Beranek", "Jakub", ""], ["Janda", "Kacper", ""], ["Holenstein", "Tobias", ""], ["Leisinger", "Sebastian", ""], ["Tatkowski", "Peter", ""], ["Ozdemir", "Esref", ""], ["Balla", "Adrian", ""], ["Copik", "Marcin", ""], ["Lindenberger", "Philipp", ""], ["Kalvoda", "Pavel", ""], ["Konieczny", "Marek", ""], ["Mutlu", "Onur", ""], ["Hoefler", "Torsten", ""]]}, {"id": "2103.04652", "submitter": "Maxence Reberol", "authors": "Maxence Reberol, Christos Georgiadis, Jean-Fran\\c{c}ois Remacle", "title": "Quasi-structured quadrilateral meshing in Gmsh -- a robust pipeline for\n  complex CAD models", "comments": "33 pages, 10 figures, supplemental at\n  https://www.hextreme.eu/data/quadqs2021_supplemental.pdf", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CE cs.CG cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We propose an end-to-end pipeline to robustly generate high-quality\nquadrilateral meshes for complex CAD models. An initial quad-dominant mesh is\ngenerated with frontal point insertion guided by a locally integrable cross\nfield and a scalar size map adapted to the small CAD features. After triangle\ncombination and midpoint-subdivision into an all-quadrilateral mesh, the\ntopology of the mesh is modified to reduce the number of irregular vertices.\nThe idea is to preserve the irregular vertices matching cross-field\nsingularities and to eliminate the others. The topological modifications are\neither local and based on disk quadrangulations, or more global with the\nremeshing of patches of quads according to predefined patterns. Validity of the\nquad mesh is guaranteed by monitoring element quality during all operations and\nreverting the changes when necessary. Advantages of our approach include\nrobustness, strict respect of the CAD features and support for user-prescribed\nsize constraints. The quad mesher, which is available in Gmsh, is validated and\nillustrated on two datasets of CAD models.\n", "versions": [{"version": "v1", "created": "Mon, 8 Mar 2021 10:23:55 GMT"}], "update_date": "2021-03-09", "authors_parsed": [["Reberol", "Maxence", ""], ["Georgiadis", "Christos", ""], ["Remacle", "Jean-Fran\u00e7ois", ""]]}, {"id": "2103.05244", "submitter": "Christopher Rackauckas", "authors": "Yingbo Ma, Shashi Gowda, Ranjan Anantharaman, Chris Laughman, Viral\n  Shah, Chris Rackauckas", "title": "ModelingToolkit: A Composable Graph Transformation System For\n  Equation-Based Modeling", "comments": "10 pages, 3 figures, 1 table", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.SC cs.SE", "license": "http://creativecommons.org/licenses/by-nc-nd/4.0/", "abstract": "  Getting good performance out of numerical equation solvers requires that the\nuser has provided stable and efficient functions representing their model.\nHowever, users should not be trusted to write good code. In this manuscript we\ndescribe ModelingToolkit (MTK), a symbolic equation-based modeling system which\nallows for composable transformations to generate stable, efficient, and\nparallelized model implementations. MTK blurs the lines of traditional symbolic\ncomputing by acting directly on a user's numerical code. We show the ability to\napply graph algorithms for automatically parallelizing and performing index\nreduction on code written for differential-algebraic equation (DAE) solvers,\n\"fixing\" the performance and stability of the model without requiring any\nchanges to on the user's part. We demonstrate how composable model\ntransformations can be combined with automated data-driven surrogate generation\ntechniques, allowing machine learning methods to generate accelerated\napproximate models within an acausal modeling framework. These reduced models\nare shown to outperform the Dymola Modelica compiler on an HVAC model by 590x\nat 3\\% error. Together, this demonstrates MTK as a system for bringing the\nlatest research in graph transformations directly to modeling applications.\n", "versions": [{"version": "v1", "created": "Tue, 9 Mar 2021 06:31:24 GMT"}, {"version": "v2", "created": "Wed, 24 Mar 2021 19:08:04 GMT"}], "update_date": "2021-03-26", "authors_parsed": [["Ma", "Yingbo", ""], ["Gowda", "Shashi", ""], ["Anantharaman", "Ranjan", ""], ["Laughman", "Chris", ""], ["Shah", "Viral", ""], ["Rackauckas", "Chris", ""]]}, {"id": "2103.05694", "submitter": "Ian Henriksen", "authors": "Ian Henriksen, Bozhi You, Keshav Pingali", "title": "Exploiting Asynchronous Priority Scheduling in Parallel Eikonal Solvers", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.MS cs.NA math.NA", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  Numerical solutions to the Eikonal equation are computed using variants of\nthe fast marching method, the fast sweeping method, and the fast iterative\nmethod. In this paper, we provide a unified view of these algorithms that\nhighlights their similarities and suggests a wider class of Eikonal solvers. We\nthen use this framework to justify applying concurrent priority scheduling\ntechniques to Eikonal solvers. We demonstrate that doing so results in good\nparallel performance for a problem from seismology. We explain why existing\nEikonal solvers may produce different results despite using the same\ndifferencing scheme and demonstrate techniques to address these discrepancies.\nThese techniques allow us to obtain deterministic output from our asynchronous\nfine-grained parallel Eikonal solver.\n", "versions": [{"version": "v1", "created": "Tue, 9 Mar 2021 19:58:10 GMT"}], "update_date": "2021-03-11", "authors_parsed": [["Henriksen", "Ian", ""], ["You", "Bozhi", ""], ["Pingali", "Keshav", ""]]}, {"id": "2103.07329", "submitter": "Boris Krasnopolsky Dr.", "authors": "Boris Krasnopolsky and Alexey Medvedev", "title": "XAMG: A library for solving linear systems with multiple right-hand side\n  vectors", "comments": null, "journal-ref": null, "doi": "10.1016/j.softx.2021.100695", "report-no": null, "categories": "cs.MS cs.DC cs.NA math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper presents the XAMG library for solving large sparse systems of\nlinear algebraic equations with multiple right-hand side vectors. The library\nspecializes but is not limited to the solution of linear systems obtained from\nthe discretization of elliptic differential equations. A corresponding set of\nnumerical methods includes Krylov subspace, algebraic multigrid, Jacobi,\nGauss-Seidel, and Chebyshev iterative methods. The parallelization is\nimplemented with MPI+POSIX shared memory hybrid programming model, which\nintroduces a three-level hierarchical decomposition using the corresponding\nper-level synchronization and communication primitives. The code contains a\nnumber of optimizations, including the multilevel data segmentation,\ncompression of indices, mixed-precision floating-point calculations, vector\nstatus flags, and others. The XAMG library uses the program code of the\nwell-known hypre library to construct the multigrid matrix hierarchy. The\nXAMG's own implementation for the solve phase of the iterative methods provides\nup to a twofold speedup compared to hypre for the tests performed.\nAdditionally, XAMG provides extended functionality to solve systems with\nmultiple right-hand side vectors.\n", "versions": [{"version": "v1", "created": "Fri, 12 Mar 2021 14:54:09 GMT"}], "update_date": "2021-04-20", "authors_parsed": [["Krasnopolsky", "Boris", ""], ["Medvedev", "Alexey", ""]]}, {"id": "2103.09226", "submitter": "Olivier Pannekoucke", "authors": "Olivier Pannekoucke, Philippe Arbogast", "title": "SymPKF: a symbolic and computational toolbox for the design of\n  parametric Kalman filter dynamics", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "physics.data-an cs.MS cs.NA math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Recent researches in data assimilation lead to the introduction of the\nparametric Kalman filter (PKF): an implementation of the Kalman filter, where\nthe covariance matrices are approximated by a parameterized covariance model.\nIn the PKF, the dynamics of the covariance during the forecast step relies on\nthe prediction of the covariance parameters. Hence, the design of the parameter\ndynamics is crucial while it can be tedious to do this by hand. This\ncontribution introduces a python package, SymPKF, able to compute PKF dynamics\nfor univariate statistics and when the covariance model is parameterized from\nthe variance and the local anisotropy of the correlations. The ability of\nSymPKF to produce the PKF dynamics is shown on a non-linear diffusive advection\n(Burgers equation) over a 1D domain and the linear advection over a 2D domain.\nThe computation of the PKF dynamics is performed at a symbolic level, but an\nautomatic code generator is also introduced to perform numerical simulations. A\nfinal multivariate example illustrates the potential of SymPKF to go beyond the\nunivariate case.\n", "versions": [{"version": "v1", "created": "Tue, 16 Mar 2021 17:56:13 GMT"}, {"version": "v2", "created": "Sun, 21 Mar 2021 07:27:44 GMT"}], "update_date": "2021-03-23", "authors_parsed": [["Pannekoucke", "Olivier", ""], ["Arbogast", "Philippe", ""]]}, {"id": "2103.09480", "submitter": "Uwe Naumann", "authors": "Uwe Naumann and Shubhaditya Burela", "title": "A Dynamic Programming Heuristic for Dense Hessian Chain Bracketing", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.NA math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Second derivatives of mathematical models for real-world phenomena are\nfundamental ingredients of a wide range of numerical simulation methods\nincluding parameter sensitivity analysis, uncertainty quantification, nonlinear\noptimization and model calibration. The evaluation of such Hessians often\ndominates the overall computational effort. Various combinatorial optimization\nproblems can be formulated based on the highly desirable exploitation of the\nassociativity of the chain rule of differential calculus. The fundamental\nHessian Accumulation problem aiming to minimize the number of floating-point\noperations required for the computation of a Hessian turns out to be\nNP-complete. The restriction to suitable subspaces of the exponential search\nspace proposed in this paper ensures computational tractability while yielding\nimprovements by factors of ten and higher over standard approaches based on\nsecond-order tangent and adjoint algorithmic differentiation.\n  Motivated by second-order parameter sensitivity analysis of surrogate\nnumerical models obtained through training and pruning of deep neural networks\nthis paper focusses on bracketing of dense Hessian chain products with the aim\nof minimizing the total number of floating-point operations to be performed.\nThe results from a given dynamic programming algorithm for optimized bracketing\nof the underlying dense Jacobian chain product are used to reduce the\ncomputational cost of the corresponding Hessian. Minimal additional algorithmic\neffort is required.\n", "versions": [{"version": "v1", "created": "Wed, 17 Mar 2021 07:25:24 GMT"}], "update_date": "2021-03-18", "authors_parsed": [["Naumann", "Uwe", ""], ["Burela", "Shubhaditya", ""]]}, {"id": "2103.09663", "submitter": "Shukai Ya SBFem", "authors": "Shukai Ya, Sascha Eisentr\\\"ager, Chongmin Song, Jianbo Li", "title": "An open-source ABAQUS implementation of the scaled boundary finite\n  element method to study interfacial problems using polyhedral meshes", "comments": "34 pages, 34 figures", "journal-ref": null, "doi": "10.1016/j.cma.2021.113766", "report-no": null, "categories": "cs.MS", "license": "http://creativecommons.org/licenses/by-nc-nd/4.0/", "abstract": "  The scaled boundary finite element method (SBFEM) is capable of generating\npolyhedral elements with an arbitrary number of surfaces. This salient feature\nsignificantly alleviates the meshing burden being a bottleneck in the analysis\npipeline in the standard finite element method (FEM). In this paper, we\nimplement polyhedral elements based on the SBFEM into the commercial finite\nelement software ABAQUS. To this end, user elements are provided through the\nuser subroutine UEL. Detailed explanations regarding the data structures and\nimplementational aspects of the procedures are given. The focus of the current\nimplementation is on interfacial problems and therefore, element-based surfaces\nare created on polyhedral user elements to establish interactions. This is\nachieved by an overlay of standard finite elements with negligible stiffness,\nprovided in the ABAQUS element library, with polyhedral user elements. By means\nof several numerical examples, the advantages of polyhedral elements regarding\nthe treatment of non-matching interfaces and automatic mesh generation are\nclearly demonstrated. Thus, the performance of ABAQUS for problems involving\ninterfaces is augmented based on the availability of polyhedral meshes. Due to\nthe implementation of polyhedral user elements, ABAQUS can directly handle\ncomplex geometries given in the form of digital images or stereolithography\n(STL) files. In order to facilitate the use of the proposed approach, the code\nof the UEL is published open-source and can be downloaded from\nhttps://github.com/ShukaiYa/SBFEM-UEL.\n", "versions": [{"version": "v1", "created": "Tue, 16 Mar 2021 03:19:41 GMT"}], "update_date": "2021-04-21", "authors_parsed": [["Ya", "Shukai", ""], ["Eisentr\u00e4ger", "Sascha", ""], ["Song", "Chongmin", ""], ["Li", "Jianbo", ""]]}, {"id": "2103.10116", "submitter": "Terry Cojean", "authors": "Yuhsiang M. Tsai and Terry Cojean and Hartwig Anzt", "title": "Porting a sparse linear algebra math library to Intel GPUs", "comments": "preprint, not submitted", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.MS cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  With the announcement that the Aurora Supercomputer will be composed of\ngeneral purpose Intel CPUs complemented by discrete high performance Intel\nGPUs, and the deployment of the oneAPI ecosystem, Intel has committed to enter\nthe arena of discrete high performance GPUs. A central requirement for the\nscientific computing community is the availability of production-ready software\nstacks and a glimpse of the performance they can expect to see on Intel high\nperformance GPUs. In this paper, we present the first platform-portable open\nsource math library supporting Intel GPUs via the DPC++ programming\nenvironment. We also benchmark some of the developed sparse linear algebra\nfunctionality on different Intel GPUs to assess the efficiency of the DPC++\nprogramming ecosystem to translate raw performance into application\nperformance. Aside from quantifying the efficiency within the hardware-specific\nroofline model, we also compare against routines providing the same\nfunctionality that ship with Intel's oneMKL vendor library.\n", "versions": [{"version": "v1", "created": "Thu, 18 Mar 2021 09:44:17 GMT"}], "update_date": "2021-03-19", "authors_parsed": [["Tsai", "Yuhsiang M.", ""], ["Cojean", "Terry", ""], ["Anzt", "Hartwig", ""]]}, {"id": "2103.11191", "submitter": "Benjamin Rodenberg", "authors": "Benjamin Rodenberg, Ishaan Desai, Richard Hertrich, Alexander Jaust,\n  Benjamin Uekermann", "title": "FEniCS-preCICE: Coupling FEniCS to other Simulation Software", "comments": "submitted to SoftwareX, fixed layout of Fig. 3 & 4, updated reference\n  to code examples to https://github.com/precice/tutorials/tree/a166efa", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://creativecommons.org/licenses/by-nc-nd/4.0/", "abstract": "  The new software FEniCS-preCICE is a middle software layer, sitting in\nbetween the existing finite-element library FEniCS and the coupling library\npreCICE. The middle layer simplifies coupling (existing) FEniCS application\ncodes to other simulation software via preCICE. To this end, FEniCS-preCICE\nconverts between FEniCS and preCICE mesh and data structures, provides\neasy-to-use coupling conditions, and manages data checkpointing for implicit\ncoupling. The new software is a library itself and follows a FEniCS-native\nstyle. Only a few lines of additional code are necessary to prepare a FEniCS\napplication code for coupling. We illustrate the functionality of\nFEniCS-preCICE by two examples: a FEniCS heat conduction code coupled to\nOpenFOAM and a FEniCS linear elasticity code coupled to SU2. The results of\nboth scenarios are compared with other simulation software showing good\nagreement.\n", "versions": [{"version": "v1", "created": "Sat, 20 Mar 2021 14:51:46 GMT"}, {"version": "v2", "created": "Tue, 23 Mar 2021 10:58:39 GMT"}], "update_date": "2021-03-24", "authors_parsed": [["Rodenberg", "Benjamin", ""], ["Desai", "Ishaan", ""], ["Hertrich", "Richard", ""], ["Jaust", "Alexander", ""], ["Uekermann", "Benjamin", ""]]}, {"id": "2103.11615", "submitter": "Hiromi Ishii", "authors": "Hiromi Ishii", "title": "A Succinct Multivariate Lazy Multivariate Tower AD for Weil Algebra\n  Computation", "comments": null, "journal-ref": "Computer Algebra - Theory and its Applications,RIMS K\\^oky\\^uroku,\n  No.2185 (2021). pp.104-112", "doi": null, "report-no": null, "categories": "cs.SC cs.MS cs.NA math.DG math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We propose a functional implementation of \\emph{Multivariate Tower Automatic\nDifferentiation}. Our implementation is intended to be used in implementing\n$C^\\infty$-structure computation of an arbitrary Weil algebra, which we\ndiscussed in the previous work.\n", "versions": [{"version": "v1", "created": "Mon, 22 Mar 2021 06:54:32 GMT"}, {"version": "v2", "created": "Mon, 5 Jul 2021 03:21:00 GMT"}], "update_date": "2021-07-06", "authors_parsed": [["Ishii", "Hiromi", ""]]}, {"id": "2103.11962", "submitter": "Luc Berger-Vergiat", "authors": "Matthias Mayr, Luc Berger-Vergiat, Peter Ohm and Raymond S. Tuminaro", "title": "Non-invasive multigrid for semi-structured grids", "comments": null, "journal-ref": null, "doi": null, "report-no": "SAND2021-3211 O", "categories": "math.NA cs.MS cs.NA", "license": "http://creativecommons.org/licenses/by-nc-sa/4.0/", "abstract": "  Multigrid solvers for hierarchical hybrid grids (HHG) have been proposed to\npromote the efficient utilization of high performance computer architectures.\nThese HHG meshes are constructed by uniformly refining a relatively coarse\nfully unstructured mesh. While HHG meshes provide some flexibility for\nunstructured applications, most multigrid calculations can be accomplished\nusing efficient structured grid ideas and kernels. This paper focuses on\ngeneralizing the HHG idea so that it is applicable to a broader community of\ncomputational scientists, and so that it is easier for existing applications to\nleverage structured multigrid components. Specifically, we adapt the structured\nmultigrid methodology to significantly more complex semi-structured meshes.\nFurther, we illustrate how mature applications might adopt a semi-structured\nsolver in a relatively non-invasive fashion. To do this, we propose a formal\nmathematical framework for describing the semi-structured solver. This\nformalism allows us to precisely define the associated multigrid method and to\nshow its relationship to a more traditional multigrid solver. Additionally, the\nmathematical framework clarifies the associated software design and\nimplementation. Numerical experiments highlight the relationship of the new\nsolver with classical multigrid. We also demonstrate the generality and\npotential performance gains associated with this type of semi-structured\nmultigrid.\n", "versions": [{"version": "v1", "created": "Mon, 22 Mar 2021 16:06:32 GMT"}], "update_date": "2021-03-23", "authors_parsed": [["Mayr", "Matthias", ""], ["Berger-Vergiat", "Luc", ""], ["Ohm", "Peter", ""], ["Tuminaro", "Raymond S.", ""]]}, {"id": "2103.11991", "submitter": "Luc Berger-Vergiat", "authors": "Sivasankaran Rajamanickam, Seher Acer, Luc Berger-Vergiat, Vinh Dang,\n  Nathan Ellingwood, Evan Harvey, Brian Kelley, Christian R. Trott, Jeremiah\n  Wilke, Ichitaro Yamazaki", "title": "Kokkos Kernels: Performance Portable Sparse/Dense Linear Algebra and\n  Graph Kernels", "comments": null, "journal-ref": null, "doi": null, "report-no": "SAND2021-3421 O", "categories": "cs.MS", "license": "http://creativecommons.org/licenses/by-nc-sa/4.0/", "abstract": "  As hardware architectures are evolving in the push towards exascale,\ndeveloping Computational Science and Engineering (CSE) applications depend on\nperformance portable approaches for sustainable software development. This\npaper describes one aspect of performance portability with respect to\ndeveloping a portable library of kernels that serve the needs of several CSE\napplications and software frameworks. We describe Kokkos Kernels, a library of\nkernels for sparse linear algebra, dense linear algebra and graph kernels. We\ndescribe the design principles of such a library and demonstrate portable\nperformance of the library using some selected kernels. Specifically, we\ndemonstrate the performance of four sparse kernels, three dense batched\nkernels, two graph kernels and one team level algorithm.\n", "versions": [{"version": "v1", "created": "Mon, 22 Mar 2021 16:36:12 GMT"}], "update_date": "2021-03-23", "authors_parsed": [["Rajamanickam", "Sivasankaran", ""], ["Acer", "Seher", ""], ["Berger-Vergiat", "Luc", ""], ["Dang", "Vinh", ""], ["Ellingwood", "Nathan", ""], ["Harvey", "Evan", ""], ["Kelley", "Brian", ""], ["Trott", "Christian R.", ""], ["Wilke", "Jeremiah", ""], ["Yamazaki", "Ichitaro", ""]]}, {"id": "2103.12067", "submitter": "Matthew Knepley", "authors": "Hannah Morgan and Patrick Sanan and Matthew G. Knepley and Richard\n  Tran Mills", "title": "Understanding performance variability in standard and pipelined parallel\n  Krylov solvers", "comments": "18 pages, 12 figures", "journal-ref": "IJHPCA, 35(1), 2020", "doi": "10.1177/1094342020966835", "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this work, we collect data from runs of Krylov subspace methods and\npipelined Krylov algorithms in an effort to understand and model the impact of\nmachine noise and other sources of variability on performance. We find large\nvariability of Krylov iterations between compute nodes for standard methods\nthat is reduced in pipelined algorithms, directly supporting conjecture, as\nwell as large variation between statistical distributions of runtimes across\niterations. Based on these results, we improve upon a previously introduced\nnondeterministic performance model by allowing iterations to fluctuate over\ntime. We present our data from runs of various Krylov algorithms across\nmultiple platforms as well as our updated non-stationary model that provides\ngood agreement with observations. We also suggest how it can be used as a\npredictive tool.\n", "versions": [{"version": "v1", "created": "Sun, 21 Mar 2021 16:27:51 GMT"}], "update_date": "2021-03-24", "authors_parsed": [["Morgan", "Hannah", ""], ["Sanan", "Patrick", ""], ["Knepley", "Matthew G.", ""], ["Mills", "Richard Tran", ""]]}, {"id": "2103.12819", "submitter": "Zhi Yao", "authors": "Zhi Yao, Revathi Jambunathan, Yadong Zeng, and Andrew Nonaka", "title": "A Massively Parallel Time-Domain Coupled Electrodynamics-Micromagnetics\n  Solver", "comments": "13 pages, 7 figures, two of the figures have sub-panels", "journal-ref": null, "doi": null, "report-no": null, "categories": "physics.comp-ph cs.MS physics.app-ph", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present a new, high-performance coupled electrodynamics-micromagnetics\nsolver for full physical modeling of signals in microelectronic circuitry. The\noverall strategy couples a finite-difference time-domain (FDTD) approach for\nMaxwell's equations to a magnetization model described by the\nLandau-Lifshitz-Gilbert (LLG) equation. The algorithm is implemented in the\nExascale Computing Project software framework, AMReX, which provides effective\nscalability on manycore and GPU-based supercomputing architectures.\nFurthermore, the code leverages ongoing developments of the Exascale\nApplication Code, WarpX, primarily developed for plasma wakefield accelerator\nmodeling. Our novel temporal coupling scheme provides second-order accuracy in\nspace and time by combining the integration steps for the magnetic field and\nmagnetization into an iterative sub-step that includes a trapezoidal\ndiscretization for the magnetization. The performance of the algorithm is\ndemonstrated by the excellent scaling results on NERSC multicore and GPU\nsystems, with a significant (59x) speedup on the GPU using a node-by-node\ncomparison. We demonstrate the utility of our code by performing simulations of\nan electromagnetic waveguide and a magnetically tunable filter.\n", "versions": [{"version": "v1", "created": "Tue, 23 Mar 2021 20:10:47 GMT"}], "update_date": "2021-03-25", "authors_parsed": [["Yao", "Zhi", ""], ["Jambunathan", "Revathi", ""], ["Zeng", "Yadong", ""], ["Nonaka", "Andrew", ""]]}, {"id": "2103.13756", "submitter": "Paolo Bientinesi", "authors": "Christos Psarras (1), Lars Karlsson (2), Jiajia Li (3, 4), Paolo\n  Bientinesi (2) ((1) RWTH Aachen University, (2) Ume{\\aa} University, (3)\n  Pacific Northwest National Laboratory, (4) College of William and Mary)", "title": "The landscape of software for tensor computations", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  Tensors (also commonly seen as multi-linear operators or as multi-dimensional\narrays) are ubiquitous in scientific computing and in data science, and so are\nthe software efforts for tensor operations. Particularly in recent years, we\nhave observed an explosion in libraries, compilers, packages, and toolboxes;\nunfortunately these efforts are very much scattered among the different\nscientific domains, and inevitably suffer from replication, suboptimal\nimplementations, and in many cases, limited visibility. As a first step towards\ncountering these inefficiencies, here we survey and loosely classify software\npackages related to tensor computations. Our aim is to assemble a comprehensive\nand up-to-date snapshot of the tensor software landscape, with the intention of\nhelping both users and developers. Aware of the difficulties inherent in any\nmulti-discipline survey, we very much welcome the reader's help in amending and\nexpanding our software list, which currently features 72 projects.\n", "versions": [{"version": "v1", "created": "Thu, 25 Mar 2021 11:13:27 GMT"}, {"version": "v2", "created": "Wed, 12 May 2021 15:57:28 GMT"}], "update_date": "2021-05-13", "authors_parsed": [["Psarras", "Christos", ""], ["Karlsson", "Lars", ""], ["Li", "Jiajia", ""], ["Bientinesi", "Paolo", ""]]}, {"id": "2103.14469", "submitter": "Omar Ashour", "authors": "Omar A. Ashour", "title": "NonlinearSchrodinger: Higher-Order Algorithms and Darboux\n  Transformations for Nonlinear Schr\\\"odinger Equations", "comments": "43 pages, 15 figures. Submitted to Scipost Physics Codebases", "journal-ref": null, "doi": null, "report-no": null, "categories": "physics.comp-ph cs.MS cs.NA math.NA nlin.SI", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  NonlinearSchrodinger.jl is a Julia package with a simple interface for\nstudying solutions of nonlinear Schr\\\"odinger equations (NLSEs). In\napproximately ten lines of code, one can perform a simulation of the cubic NLSE\nusing one of 32 algorithms, including symplectic and Runge-Kutta-Nystr\\\"om\nintegrators up to eighth order. Furthermore, it is possible to compute\nanalytical solutions via a numerical implementation of the Darboux\ntransformation for extended NLSEs up to fifth order, with an equally simple\ninterface. In what follows, we review the fundamentals of solving this class of\nequations numerically and analytically, discuss the implementation, and provide\nseveral examples.\n", "versions": [{"version": "v1", "created": "Sat, 27 Feb 2021 22:21:36 GMT"}], "update_date": "2021-03-29", "authors_parsed": [["Ashour", "Omar A.", ""]]}, {"id": "2103.14974", "submitter": "Alexander Novikov", "authors": "Alexander Novikov, Maxim Rakhuba, Ivan Oseledets", "title": "Automatic differentiation for Riemannian optimization on low-rank matrix\n  and tensor-train manifolds", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "math.OC cs.LG cs.MS cs.NA math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In scientific computing and machine learning applications, matrices and more\ngeneral multidimensional arrays (tensors) can often be approximated with the\nhelp of low-rank decompositions. Since matrices and tensors of fixed rank form\nsmooth Riemannian manifolds, one of the popular tools for finding the low-rank\napproximations is to use the Riemannian optimization. Nevertheless, efficient\nimplementation of Riemannian gradients and Hessians, required in Riemannian\noptimization algorithms, can be a nontrivial task in practice. Moreover, in\nsome cases, analytic formulas are not even available. In this paper, we build\nupon automatic differentiation and propose a method that, given an\nimplementation of the function to be minimized, efficiently computes Riemannian\ngradients and matrix-by-vector products between approximate Riemannian Hessian\nand a given vector.\n", "versions": [{"version": "v1", "created": "Sat, 27 Mar 2021 19:56:00 GMT"}], "update_date": "2021-03-30", "authors_parsed": [["Novikov", "Alexander", ""], ["Rakhuba", "Maxim", ""], ["Oseledets", "Ivan", ""]]}, {"id": "2103.15203", "submitter": "Jeremy Kepner", "authors": "Jeremy Kepner, Timothy Davis, Vijay Gadepally, Hayden Jananthan,\n  Lauren Milechin", "title": "Mathematics of Digital Hyperspace", "comments": "9 pages, 8 figures, 2 tables, accepted to GrAPL 2021. arXiv admin\n  note: text overlap with arXiv:1807.03165, arXiv:2004.01181, arXiv:1909.05631,\n  arXiv:1708.02937", "journal-ref": null, "doi": "10.1109/IPDPSW52791.2021.00048", "report-no": null, "categories": "cs.MS cs.DB cs.DM cs.NE math.RA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Social media, e-commerce, streaming video, e-mail, cloud documents, web\npages, traffic flows, and network packets fill vast digital lakes, rivers, and\noceans that we each navigate daily. This digital hyperspace is an amorphous\nflow of data supported by continuous streams that stretch standard concepts of\ntype and dimension. The unstructured data of digital hyperspace can be\nelegantly represented, traversed, and transformed via the mathematics of\nhypergraphs, hypersparse matrices, and associative array algebra. This paper\nexplores a novel mathematical concept, the semilink, that combines pairs of\nsemirings to provide the essential operations for graph analytics, database\noperations, and machine learning. The GraphBLAS standard currently supports\nhypergraphs, hypersparse matrices, the mathematics required for semilinks, and\nseamlessly performs graph, network, and matrix operations. With the addition of\nkey based indices (such as pointers to strings) and semilinks, GraphBLAS can\nbecome a richer associative array algebra and be a plug-in replacement for\nspreadsheets, database tables, and data centric operating systems, enhancing\nthe navigation of unstructured data found in digital hyperspace.\n", "versions": [{"version": "v1", "created": "Sun, 28 Mar 2021 19:11:28 GMT"}], "update_date": "2021-07-20", "authors_parsed": [["Kepner", "Jeremy", ""], ["Davis", "Timothy", ""], ["Gadepally", "Vijay", ""], ["Jananthan", "Hayden", ""], ["Milechin", "Lauren", ""]]}, {"id": "2103.16034", "submitter": "Levi McClenny", "authors": "Levi D. McClenny, Mulugeta A. Haile, Ulisses M. Braga-Neto", "title": "TensorDiffEq: Scalable Multi-GPU Forward and Inverse Solvers for Physics\n  Informed Neural Networks", "comments": "Source Code: https://github.com/tensordiffeq/TensorDiffEq,\n  Documentation: https://docs.tensordiffeq.io", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS physics.comp-ph", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  Physics-Informed Neural Networks promise to revolutionize science and\nengineering practice, by introducing domain-aware deep machine learning models\ninto scientific computation. Several software suites have emerged to make the\nimplementation and usage of these architectures available to the research and\nindustry communities. Here we introduce\\linebreak TensorDiffEq, built on\nTensorflow 2.x, which presents an intuitive Keras-like interface for problem\ndomain definition, model definition, and solution of forward and inverse\nproblems using physics-aware deep learning methods. TensorDiffEq takes full\nadvantage of Tensorflow 2.x infrastructure for deployment on multiple GPUs,\nallowing the implementation of large high-dimensional and complex models.\nSimultaneously, TensorDiffEq supports the Keras API for custom neural network\narchitecture definitions. In the case of smaller or simpler models, the package\nallows for rapid deployment on smaller-scale CPU platforms with negligible\nchanges to the implementation scripts. We demonstrate the basic usage and\ncapabilities of TensorDiffEq in solving forward, inverse, and data assimilation\nproblems of varying sizes and levels of complexity. The source code is\navailable at https://github.com/tensordiffeq.\n", "versions": [{"version": "v1", "created": "Tue, 30 Mar 2021 02:41:40 GMT"}], "update_date": "2021-03-31", "authors_parsed": [["McClenny", "Levi D.", ""], ["Haile", "Mulugeta A.", ""], ["Braga-Neto", "Ulisses M.", ""]]}, {"id": "2103.17238", "submitter": "Piotr Bartman", "authors": "Piotr Bartman, Sylwester Arabas, Kamil G\\'orski, Anna Jaruga, Grzegorz\n  {\\L}azarski, Michael Olesik, Bartosz Piasecki, Aleksandra Talar", "title": "PySDM v1: particle-based cloud modelling package for warm-rain\n  microphysics and aqueous chemistry", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "physics.ao-ph cs.MS physics.comp-ph", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  PySDM is an open-source Python package for simulating the dynamics of\nparticles undergoing condensational and collisional growth, interacting with a\nfluid flow and subject to chemical composition changes. It is intended to serve\nas a building block for process-level as well as computational-fluid-dynamics\nsimulation systems involving representation of a continuous phase (air) and a\ndispersed phase (aerosol), with PySDM being responsible for representation of\nthe dispersed phase. The PySDM package core is a Pythonic high-performance\nimplementation of the Super-Droplet Method (SDM) Monte-Carlo algorithm for\nrepresenting collisional growth, hence the name. PySDM has two alternative\nparallel number-crunching backends available: multi-threaded CPU backend based\non Numba and GPU-resident backend built on top of ThrustRTC. The usage examples\nare built on top of four simple atmospheric cloud modelling frameworks: box,\nadiabatic parcel, single-column and 2D prescribed flow kinematic models. In\naddition, the package ships with tutorial code depicting how PySDM can be used\nfrom Julia and Matlab.\n", "versions": [{"version": "v1", "created": "Wed, 31 Mar 2021 17:37:09 GMT"}], "update_date": "2021-04-01", "authors_parsed": [["Bartman", "Piotr", ""], ["Arabas", "Sylwester", ""], ["G\u00f3rski", "Kamil", ""], ["Jaruga", "Anna", ""], ["\u0141azarski", "Grzegorz", ""], ["Olesik", "Michael", ""], ["Piasecki", "Bartosz", ""], ["Talar", "Aleksandra", ""]]}]