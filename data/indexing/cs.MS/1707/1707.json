[{"id": "1707.00164", "submitter": "Chenhan Yu", "authors": "Chenhan D. Yu, James Levitt, Severin Reiz, George Biros", "title": "Geometry-Oblivious FMM for Compressing Dense SPD Matrices", "comments": "13 pages, accepted by SC'17", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.NA cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present GOFMM (geometry-oblivious FMM), a novel method that creates a\nhierarchical low-rank approximation, \"compression,\" of an arbitrary dense\nsymmetric positive definite (SPD) matrix. For many applications, GOFMM enables\nan approximate matrix-vector multiplication in $N \\log N$ or even $N$ time,\nwhere $N$ is the matrix size. Compression requires $N \\log N$ storage and work.\nIn general, our scheme belongs to the family of hierarchical matrix\napproximation methods. In particular, it generalizes the fast multipole method\n(FMM) to a purely algebraic setting by only requiring the ability to sample\nmatrix entries. Neither geometric information (i.e., point coordinates) nor\nknowledge of how the matrix entries have been generated is required, thus the\nterm \"geometry-oblivious.\" Also, we introduce a shared-memory parallel scheme\nfor hierarchical matrix computations that reduces synchronization barriers. We\npresent results on the Intel Knights Landing and Haswell architectures, and on\nthe NVIDIA Pascal architecture for a variety of matrices.\n", "versions": [{"version": "v1", "created": "Sat, 1 Jul 2017 14:57:20 GMT"}], "update_date": "2017-07-04", "authors_parsed": [["Yu", "Chenhan D.", ""], ["Levitt", "James", ""], ["Reiz", "Severin", ""], ["Biros", "George", ""]]}, {"id": "1707.01271", "submitter": "Bernard Parisse", "authors": "Bernard Parisse", "title": "Compiling LATEX to computer algebra-enabled HTML5", "comments": "The interactive HTML5/MathML version of the document is available at\n  https://www-fourier.ujf-grenoble.fr/~parisse/giac/castex.htmlThe LaTeX source\n  will not compile properly to PDF without installing the software described in\n  the document", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.SC cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This document explains how to create or modify an existing LATEX document\nwith commands enabling computations in the HTML5 output: when the reader opens\nthe HTML5 output, he can run a computation in his browser, or modify the\ncommand to be executed and run it. This is done by combining different\nsoftwares: hevea for compilation to HTML5, giac.js for the CAS computing kernel\n(itself compiled from the C++ Giac library with emscripten), and a modified\nversion of itex2MML for fast and nice rendering in MathML in browsers that\nsupport MathML.\n", "versions": [{"version": "v1", "created": "Wed, 5 Jul 2017 09:24:46 GMT"}], "update_date": "2017-07-06", "authors_parsed": [["Parisse", "Bernard", ""]]}, {"id": "1707.01898", "submitter": "Shiyu Ji", "authors": "Shiyu Ji, Kun Wan", "title": "Adaptive Modular Exponentiation Methods v.s. Python's Power Function", "comments": "4 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DS cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this paper we use Python to implement two efficient modular exponentiation\nmethods: the adaptive m-ary method and the adaptive sliding-window method of\nwindow size k, where both m's are adaptively chosen based on the length of\nexponent. We also conduct the benchmark for both methods. Evaluation results\nshow that compared to the industry-standard efficient implementations of\nmodular power function in CPython and Pypy, our algorithms can reduce 1-5%\ncomputing time for exponents with more than 3072 bits.\n", "versions": [{"version": "v1", "created": "Thu, 6 Jul 2017 04:12:25 GMT"}], "update_date": "2017-07-10", "authors_parsed": [["Ji", "Shiyu", ""], ["Wan", "Kun", ""]]}, {"id": "1707.02347", "submitter": "Dylan McCormick", "authors": "Dylan McCormick", "title": "Applying the Polyhedral Model to Tile Time Loops in Devito", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The run time of many scientific computation applications for numerical\nmethods is heavily dependent on just a few multi-dimensional loop nests. Since\nthese applications are often limited by memory bandwidth rather than\ncomputational resources they can benefit greatly from any optimizations which\ndecrease the run time of their loops by improving data reuse and thus reducing\nthe total memory traffic. Some of the most effective of these optimizations are\nnot suitable for development by hand or require advanced software engineering\nknowledge which is beyond the level of many researchers who are not specialists\nin code optimization. Several tools exist to automate the generation of\nhigh-performance code for numerical methods, such as Devito which produces code\nfor finite-difference approximations typically used in the seismic imaging\ndomain. We present a loop-tiling optimization which can be applied to\nDevito-generated loops and improves run time by up to 27.5%, and options for\nautomating this optimization in the Devito framework.\n", "versions": [{"version": "v1", "created": "Fri, 30 Jun 2017 14:51:26 GMT"}], "update_date": "2017-07-11", "authors_parsed": [["McCormick", "Dylan", ""]]}, {"id": "1707.03776", "submitter": "Michael Lange", "authors": "Michael Lange, Navjot Kukreja, Fabio Luporini, Mathias Louboutin,\n  Charles Yount, Jan H\\\"uckelheim, Gerard J. Gorman", "title": "Optimised finite difference computation from symbolic equations", "comments": "Accepted for publication in Proceedings of the 16th Python in Science\n  Conference (SciPy 2017)", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Domain-specific high-productivity environments are playing an increasingly\nimportant role in scientific computing due to the levels of abstraction and\nautomation they provide. In this paper we introduce Devito, an open-source\ndomain-specific framework for solving partial differential equations from\nsymbolic problem definitions by the finite difference method. We highlight the\ngeneration and automated execution of highly optimized stencil code from only a\nfew lines of high-level symbolic Python for a set of scientific equations,\nbefore exploring the use of Devito operators in seismic inversion problems.\n", "versions": [{"version": "v1", "created": "Wed, 12 Jul 2017 15:51:35 GMT"}], "update_date": "2017-07-13", "authors_parsed": [["Lange", "Michael", ""], ["Kukreja", "Navjot", ""], ["Luporini", "Fabio", ""], ["Louboutin", "Mathias", ""], ["Yount", "Charles", ""], ["H\u00fcckelheim", "Jan", ""], ["Gorman", "Gerard J.", ""]]}, {"id": "1707.04254", "submitter": "EPTCS", "authors": "Andrea Vandin (IMT School for Advanced Studies Lucca)", "title": "Language-based Abstractions for Dynamical Systems", "comments": "In Proceedings QAPL 2017, arXiv:1707.03668", "journal-ref": "EPTCS 250, 2017, pp. 15-24", "doi": "10.4204/EPTCS.250.2", "report-no": null, "categories": "cs.MS cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Ordinary differential equations (ODEs) are the primary means to modelling\ndynamical systems in many natural and engineering sciences. The number of\nequations required to describe a system with high heterogeneity limits our\ncapability of effectively performing analyses. This has motivated a large body\nof research, across many disciplines, into abstraction techniques that provide\nsmaller ODE systems while preserving the original dynamics in some appropriate\nsense. In this paper we give an overview of a recently proposed\ncomputer-science perspective to this problem, where ODE reduction is recast to\nfinding an appropriate equivalence relation over ODE variables, akin to\nclassical models of computation based on labelled transition systems.\n", "versions": [{"version": "v1", "created": "Thu, 13 Jul 2017 13:51:26 GMT"}], "update_date": "2017-07-17", "authors_parsed": [["Vandin", "Andrea", "", "IMT School for Advanced Studies Lucca"]]}, {"id": "1707.05141", "submitter": "Wajih Halim Boukaram", "authors": "Wajih Halim Boukaram, George Turkiyyah, Hatem Ltaief and David E.\n  Keyes", "title": "Batched QR and SVD Algorithms on GPUs with Applications in Hierarchical\n  Matrix Compression", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.DS cs.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present high performance implementations of the QR and the singular value\ndecomposition of a batch of small matrices hosted on the GPU with applications\nin the compression of hierarchical matrices. The one-sided Jacobi algorithm is\nused for its simplicity and inherent parallelism as a building block for the\nSVD of low rank blocks using randomized methods. We implement multiple kernels\nbased on the level of the GPU memory hierarchy in which the matrices can reside\nand show substantial speedups against streamed cuSOLVER SVDs. The resulting\nbatched routine is a key component of hierarchical matrix compression, opening\nup opportunities to perform H-matrix arithmetic efficiently on GPUs.\n", "versions": [{"version": "v1", "created": "Thu, 13 Jul 2017 12:25:52 GMT"}], "update_date": "2017-07-18", "authors_parsed": [["Boukaram", "Wajih Halim", ""], ["Turkiyyah", "George", ""], ["Ltaief", "Hatem", ""], ["Keyes", "David E.", ""]]}, {"id": "1707.05943", "submitter": "Yao-Lung Leo Fang", "authors": "Yao-Lung L. Fang", "title": "FDTD: solving 1+1D delay PDE in parallel", "comments": "Introduced two parallelization approaches along with other\n  improvements in the presentation. Code open sourced at\n  https://github.com/leofang/FDTD. To appear in Computer Physics Communications", "journal-ref": "Computer Physics Communications 235, 422 (2019)", "doi": "10.1016/j.cpc.2018.08.018", "report-no": null, "categories": "cs.MS cs.NA math.NA physics.comp-ph quant-ph", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present a proof of concept for solving a 1+1D complex-valued, delay\npartial differential equation (PDE) that emerges in the study of waveguide\nquantum electrodynamics (QED) by adapting the finite-difference time-domain\n(FDTD) method. The delay term is spatially non-local, rendering conventional\napproaches such as the method of lines inapplicable. We show that by properly\ndesigning the grid and by supplying the (partial) exact solution as the\nboundary condition, the delay PDE can be numerically solved. In addition, we\ndemonstrate that while the delay imposes strong data dependency, multi-thread\nparallelization can nevertheless be applied to such a problem. Our code\nprovides a numerically exact solution to the time-dependent multi-photon\nscattering problem in waveguide QED.\n", "versions": [{"version": "v1", "created": "Wed, 19 Jul 2017 06:06:13 GMT"}, {"version": "v2", "created": "Tue, 4 Sep 2018 02:51:39 GMT"}], "update_date": "2018-11-19", "authors_parsed": [["Fang", "Yao-Lung L.", ""]]}, {"id": "1707.08265", "submitter": "Ting Pan", "authors": "Ting Pan", "title": "Dragon: A Computation Graph Virtual Machine Based Deep Learning\n  Framework", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.SE cs.LG cs.MS cs.NE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Deep Learning has made a great progress for these years. However, it is still\ndifficult to master the implement of various models because different\nresearchers may release their code based on different frameworks or interfaces.\nIn this paper, we proposed a computation graph based framework which only aims\nto introduce well-known interfaces. It will help a lot when reproducing a newly\nmodel or transplanting models that were implemented by other frameworks.\nAdditionally, we implement numerous recent models covering both Computer Vision\nand Nature Language Processing. We demonstrate that our framework will not\nsuffer from model-starving because it is much easier to make full use of the\nworks that are already done.\n", "versions": [{"version": "v1", "created": "Wed, 26 Jul 2017 01:16:29 GMT"}], "update_date": "2017-07-28", "authors_parsed": [["Pan", "Ting", ""]]}, {"id": "1707.08711", "submitter": "Jan Heiland", "authors": "Maximilian Behr, Peter Benner, Jan Heiland", "title": "Example Setups of Navier-Stokes Equations with Control and Observation:\n  Spatial Discretization and Representation via Linear-quadratic Matrix\n  Coefficients", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS math.DS", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  We provide spatial discretizations of nonlinear incompressible Navier-Stokes\nequations with inputs and outputs in the form of matrices ready to use in any\nnumerical linear algebra package. We discuss the assembling of the system\noperators and the realization of boundary conditions and inputs and outputs. We\ndescribe the two benchmark problems - the driven cavity and the cylinder wake -\nand provide the corresponding data. The use of the data is illustrated by\nnumerous example setups. The test cases are provided as plain PYTHON or\nOCTAVE/MATLAB script files for immediate replication.\n", "versions": [{"version": "v1", "created": "Thu, 27 Jul 2017 05:42:54 GMT"}], "update_date": "2017-07-28", "authors_parsed": [["Behr", "Maximilian", ""], ["Benner", "Peter", ""], ["Heiland", "Jan", ""]]}, {"id": "1707.09094", "submitter": "Conrad Sanderson", "authors": "Conrad Sanderson, Ryan Curtin", "title": "An Open Source C++ Implementation of Multi-Threaded Gaussian Mixture\n  Models, k-Means and Expectation Maximisation", "comments": null, "journal-ref": "International Conference on Signal Processing and Communication\n  Systems, 2017", "doi": "10.1109/ICSPCS.2017.8270510", "report-no": null, "categories": "cs.MS cs.LG", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Modelling of multivariate densities is a core component in many signal\nprocessing, pattern recognition and machine learning applications. The\nmodelling is often done via Gaussian mixture models (GMMs), which use\ncomputationally expensive and potentially unstable training algorithms. We\nprovide an overview of a fast and robust implementation of GMMs in the C++\nlanguage, employing multi-threaded versions of the Expectation Maximisation\n(EM) and k-means training algorithms. Multi-threading is achieved through\nreformulation of the EM and k-means algorithms into a MapReduce-like framework.\nFurthermore, the implementation uses several techniques to improve numerical\nstability and modelling accuracy. We demonstrate that the multi-threaded\nimplementation achieves a speedup of an order of magnitude on a recent 16 core\nmachine, and that it can achieve higher modelling accuracy than a previously\nwell-established publically accessible implementation. The multi-threaded\nimplementation is included as a user-friendly class in recent releases of the\nopen source Armadillo C++ linear algebra library. The library is provided under\nthe permissive Apache~2.0 license, allowing unencumbered use in commercial\nproducts.\n", "versions": [{"version": "v1", "created": "Fri, 28 Jul 2017 03:15:22 GMT"}], "update_date": "2018-05-10", "authors_parsed": [["Sanderson", "Conrad", ""], ["Curtin", "Ryan", ""]]}, {"id": "1707.09616", "submitter": "Liang Wang", "authors": "Liang Wang", "title": "Owl: A General-Purpose Numerical Library in OCaml", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.DC cs.LO", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Owl is a new numerical library developed in the OCaml language. It focuses on\nproviding a comprehensive set of high-level numerical functions so that\ndevelopers can quickly build up data analytical applications. In this abstract,\nwe will present Owl's design, core components, and its key functionality.\n", "versions": [{"version": "v1", "created": "Sun, 30 Jul 2017 13:18:06 GMT"}, {"version": "v2", "created": "Fri, 22 Sep 2017 16:44:26 GMT"}, {"version": "v3", "created": "Tue, 28 Aug 2018 06:42:48 GMT"}], "update_date": "2018-08-29", "authors_parsed": [["Wang", "Liang", ""]]}]