[{"id": "1903.02153", "submitter": "Chao Chen", "authors": "Ruoxi Wang, Chao Chen, Jonghyun Lee, Eric Darve", "title": "PBBFMM3D: a parallel black-box algorithm for kernel matrix-vector\n  multiplication", "comments": null, "journal-ref": "Journal of Parallel and Distributed Computing Volume 154, August\n  2021, Pages 64-73", "doi": "10.1016/j.jpdc.2021.04.005", "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Kernel matrix-vector product is ubiquitous in many science and engineering\napplications. However, a naive method requires $O(N^2)$ operations, which\nbecomes prohibitive for large-scale problems. We introduce a parallel method\nthat provably requires $O(N)$ operations to reduce the computation cost. The\ndistinct feature of our method is that it requires only the ability to evaluate\nthe kernel function, offering a black-box interface to users. Our parallel\napproach targets multi-core shared-memory machines and is implemented using\nOpenMP. Numerical results demonstrate up to $19\\times$ speedup on 32 cores. We\nalso present a real-world application in geostatistics, where our parallel\nmethod was used to deliver fast principle component analysis of covariance\nmatrices.\n", "versions": [{"version": "v1", "created": "Wed, 6 Mar 2019 03:33:18 GMT"}, {"version": "v2", "created": "Wed, 13 May 2020 05:00:45 GMT"}, {"version": "v3", "created": "Tue, 27 Apr 2021 17:12:22 GMT"}], "update_date": "2021-04-30", "authors_parsed": [["Wang", "Ruoxi", ""], ["Chen", "Chao", ""], ["Lee", "Jonghyun", ""], ["Darve", "Eric", ""]]}, {"id": "1903.02423", "submitter": "Milena Veneva", "authors": "Milena Veneva and Alexander Ayriyan", "title": "Performance Analysis of Effective Symbolic Methods for Solving Band\n  Matrix SLAEs", "comments": "7 pages, 9 tables, 4 figures", "journal-ref": null, "doi": "10.1051/epjconf/201921405004", "report-no": null, "categories": "cs.MS", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  This paper presents an experimental performance study of implementations of\nthree symbolic algorithms for solving band matrix systems of linear algebraic\nequations with heptadiagonal, pentadiagonal, and tridiagonal coefficient\nmatrices. The only assumption on the coefficient matrix in order for the\nalgorithms to be stable is nonsingularity. These algorithms are implemented\nusing the GiNaC library of C++ and the SymPy library of Python, considering\nfive different data storing classes. Performance analysis of the\nimplementations is done using the high-performance computing (HPC) platforms\n\"HybriLIT\" and \"Avitohol\". The experimental setup and the results from the\nconducted computations on the individual computer systems are presented and\ndiscussed. An analysis of the three algorithms is performed.\n", "versions": [{"version": "v1", "created": "Mon, 4 Mar 2019 19:44:24 GMT"}], "update_date": "2019-10-02", "authors_parsed": [["Veneva", "Milena", ""], ["Ayriyan", "Alexander", ""]]}, {"id": "1903.02632", "submitter": "Tobias Weber", "authors": "T. Weber and R. Georgii and P. B\\\"oni", "title": "Takin: An open-source software for experiment planning, visualisation,\n  and data analysis", "comments": "This is a collection of the three software papers on \"Takin\"", "journal-ref": "SoftwareX 5 121-126 (2016); SoftwareX 6 148-149 (2017); SoftwareX\n  14, 100667 (2021)", "doi": "10.1016/j.softx.2016.06.002 10.1016/j.softx.2017.06.002\n  10.1016/j.softx.2021.100667", "report-no": null, "categories": "physics.ins-det cs.MS", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  Due to the instrument's non-trivial resolution function, measurements on\ntriple-axis spectrometers require extra care from the experimenter in order to\nobtain optimal results and to avoid unwanted spurious artefacts. We present a\nfree and open-source software system that aims to ease many of the tasks\nencountered during the planning phase, in the execution and in data treatment\nof experiments performed on neutron triple-axis spectrometers. The software is\ncurrently in use and has been successfully tested at the MLZ, but can be\nconfigured to work with other triple-axis instruments and instrument control\nsystems.\n", "versions": [{"version": "v1", "created": "Tue, 26 Feb 2019 10:56:52 GMT"}, {"version": "v2", "created": "Tue, 16 Feb 2021 08:27:39 GMT"}], "update_date": "2021-02-17", "authors_parsed": [["Weber", "T.", ""], ["Georgii", "R.", ""], ["B\u00f6ni", "P.", ""]]}, {"id": "1903.04243", "submitter": "Ashish Agarwal", "authors": "Ashish Agarwal, Igor Ganichev", "title": "Auto-Vectorizing TensorFlow Graphs: Jacobians, Auto-Batching And Beyond", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.LG cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We propose a static loop vectorization optimization on top of high level\ndataflow IR used by frameworks like TensorFlow. A new statically vectorized\nparallel-for abstraction is provided on top of TensorFlow, and used for\napplications ranging from auto-batching and per-example gradients, to jacobian\ncomputation, optimized map functions and input pipeline optimization. We report\nhuge speedups compared to both loop based implementations, as well as run-time\nbatching adopted by the DyNet framework.\n", "versions": [{"version": "v1", "created": "Fri, 8 Mar 2019 03:11:02 GMT"}], "update_date": "2019-03-12", "authors_parsed": [["Agarwal", "Ashish", ""], ["Ganichev", "Igor", ""]]}, {"id": "1903.05567", "submitter": "Maxim Gonchar", "authors": "Anna Fatkina, Maxim Gonchar, Anastasia Kalitkina, Liudmila Kolupaeva,\n  Dmitry Naumov, Dmitry Selivanov, Konstantin Treskov", "title": "GNA: new framework for statistical data analysis", "comments": "9 pages, 3 figures, CHEP 2018, submitted to EPJ Web of Conferences", "journal-ref": null, "doi": "10.1051/epjconf/201921405024", "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We report on the status of GNA --- a new framework for fitting large-scale\nphysical models. GNA utilizes the data flow concept within which a model is\nrepresented by a directed acyclic graph. Each node is an operation on an array\n(matrix multiplication, derivative or cross section calculation, etc). The\nframework enables the user to create flexible and efficient large-scale lazily\nevaluated models, handle large numbers of parameters, propagate parameters'\nuncertainties while taking into account possible correlations between them, fit\nmodels, and perform statistical analysis. The main goal of the paper is to give\nan overview of the main concepts and methods as well as reasons behind their\ndesign. Detailed technical information is to be published in further works.\n", "versions": [{"version": "v1", "created": "Wed, 13 Mar 2019 16:09:08 GMT"}], "update_date": "2019-10-02", "authors_parsed": [["Fatkina", "Anna", ""], ["Gonchar", "Maxim", ""], ["Kalitkina", "Anastasia", ""], ["Kolupaeva", "Liudmila", ""], ["Naumov", "Dmitry", ""], ["Selivanov", "Dmitry", ""], ["Treskov", "Konstantin", ""]]}, {"id": "1903.05575", "submitter": "David Williams-Young", "authors": "David Williams-Young and Xiaosong Li", "title": "On the Efficacy and High-Performance Implementation of Quaternion Matrix\n  Multiplication", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Quaternion symmetry is ubiquitous in the physical sciences. As such, much\nwork has been afforded over the years to the development of efficient schemes\nto exploit this symmetry using real and complex linear algebra. Recent years\nhave also seen many advances in the formal theoretical development of\nexplicitly quaternion linear algebra with promising applications in image\nprocessing and machine learning. Despite these advances, there do not currently\nexist optimized software implementations of quaternion linear algebra. The\nleverage of optimized linear algebra software is crucial in the achievement of\nhigh levels of performance on modern computing architectures, and thus provides\na central tool in the development of high-performance scientific software. In\nthis work, a case will be made for the efficacy of high-performance quaternion\nlinear algebra software for appropriate problems. In this pursuit, an optimized\nsoftware implementation of quaternion matrix multiplication will be presented\nand will be shown to outperform a vendor tuned implementation for the analogous\ncomplex matrix operation. The results of this work pave the path for further\ndevelopment of high-performance quaternion linear algebra software which will\nimprove the performance of the next generation of applicable scientific\napplications.\n", "versions": [{"version": "v1", "created": "Wed, 13 Mar 2019 16:19:27 GMT"}], "update_date": "2019-03-14", "authors_parsed": [["Williams-Young", "David", ""], ["Li", "Xiaosong", ""]]}, {"id": "1903.08243", "submitter": "Tianjiao Sun", "authors": "Tianjiao Sun, Lawrence Mitchell, Kaushik Kulkarni, Andreas Kl\\\"ockner,\n  David A. Ham and Paul H. J. Kelly", "title": "A study of vectorization for matrix-free finite element methods", "comments": null, "journal-ref": "International Journal of High Performance Computing Applications\n  (2020)", "doi": "10.1177/1094342020945005", "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Vectorization is increasingly important to achieve high performance on modern\nhardware with SIMD instructions. Assembly of matrices and vectors in the finite\nelement method, which is characterized by iterating a local assembly kernel\nover unstructured meshes, poses difficulties to effective vectorization.\nMaintaining a user-friendly high-level interface with a suitable degree of\nabstraction while generating efficient, vectorized code for the finite element\nmethod is a challenge for numerical software systems and libraries. In this\nwork, we study cross-element vectorization in the finite element framework\nFiredrake via code transformation and demonstrate the efficacy of such an\napproach by evaluating a wide range of matrix-free operators spanning different\npolynomial degrees and discretizations on two recent CPUs using three\nmainstream compilers. Our experiments show that our approaches for\ncross-element vectorization achieve 30\\% of theoretical peak performance for\nmany examples of practical significance, and exceed 50\\% for cases with high\narithmetic intensities, with consistent speed-up over (intra-element)\nvectorization restricted to the local assembly kernels.\n", "versions": [{"version": "v1", "created": "Tue, 19 Mar 2019 20:15:03 GMT"}, {"version": "v2", "created": "Tue, 19 May 2020 14:23:13 GMT"}], "update_date": "2020-08-26", "authors_parsed": [["Sun", "Tianjiao", ""], ["Mitchell", "Lawrence", ""], ["Kulkarni", "Kaushik", ""], ["Kl\u00f6ckner", "Andreas", ""], ["Ham", "David A.", ""], ["Kelly", "Paul H. J.", ""]]}, {"id": "1903.10441", "submitter": "Gregory Moille", "authors": "Gregory Moille, Qing Li, Xiyuan Lu and Kartik Srinivasan", "title": "pyLLE: a Fast and User Friendly Lugiato-Lefever Equation Solver", "comments": null, "journal-ref": "Journal of Research of National Institute of Standards and\n  Technology, Volume 124, Article No. 124012 (2019)", "doi": "10.6028/jres.124.012", "report-no": null, "categories": "cs.MS physics.optics", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  We present the development of pyLLE, a freely accessible and cross-platform\nLugiato-Lefever equation solver programmed in Python and Julia and optimized\nfor the simulation of microresonator frequency combs. Examples illustrating its\noperation, the simplicity of use, and performance against other programming\nlanguage are presented. The documentation of the software can be found at\nhttps://gregmoille.github.io/pyLLE/\n", "versions": [{"version": "v1", "created": "Fri, 22 Mar 2019 17:38:23 GMT"}, {"version": "v2", "created": "Thu, 30 May 2019 12:12:54 GMT"}], "update_date": "2019-05-31", "authors_parsed": [["Moille", "Gregory", ""], ["Li", "Qing", ""], ["Lu", "Xiyuan", ""], ["Srinivasan", "Kartik", ""]]}, {"id": "1903.11521", "submitter": "Carsten Uphoff", "authors": "Carsten Uphoff and Michael Bader", "title": "Yet Another Tensor Toolbox for discontinuous Galerkin methods and other\n  applications", "comments": "Submitted to ACM TOMS", "journal-ref": null, "doi": "10.1145/3406835", "report-no": null, "categories": "cs.MS cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The numerical solution of partial differential equations is at the heart of\nmany grand challenges in supercomputing. Solvers based on high-order\ndiscontinuous Galerkin (DG) discretisation have been shown to scale on large\nsupercomputers with excellent performance and efficiency, if the implementation\nexploits all levels of parallelism and is tailored to the specific\narchitecture. However, every year new supercomputers emerge and the list of\nhardware-specific considerations grows, simultaneously with the list of desired\nfeatures in a DG code. Thus we believe that a sustainable DG code needs an\nabstraction layer to implement the numerical scheme in a suitable language. We\nexplore the possibility to abstract the numerical scheme as small tensor\noperations, describe them in a domain-specific language (DSL) resembling the\nEinstein notation, and to map them to existing code generators which generate\nsmall matrix matrix multiplication routines. The compiler for our DSL\nimplements classic optimisations that are used for large tensor contractions,\nand we present novel optimisation techniques such as equivalent sparsity\npatterns and optimal index permutations for temporary tensors. Our application\nexamples, which include the earthquake simulation software SeisSol, show that\nthe generated kernels achieve over 50 % peak performance while the DSL\nconsiderably simplifies the implementation.\n", "versions": [{"version": "v1", "created": "Wed, 27 Mar 2019 16:17:01 GMT"}], "update_date": "2020-11-12", "authors_parsed": [["Uphoff", "Carsten", ""], ["Bader", "Michael", ""]]}, {"id": "1903.12427", "submitter": "Bernard Parisse", "authors": "Bernard Parisse (IF)", "title": "Computing huge Groebner basis like cyclic10 over $\\Q$ with Giac", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.SC cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present a short description on how to fine-tune the modular algorithm\nimplemented in the Giac computer algebra system to reconstruct huge Groebner\nbasis over $\\Q$.The classical cyclic10 benchmark will serve as example.\n", "versions": [{"version": "v1", "created": "Fri, 29 Mar 2019 10:00:47 GMT"}], "update_date": "2019-04-01", "authors_parsed": [["Parisse", "Bernard", "", "IF"]]}, {"id": "1903.12482", "submitter": "Chris Stevens", "authors": "Georgios Doulis, J\\\"org Frauendiener, Chris Stevens, Ben Whale", "title": "COFFEE -- An MPI-parallelized Python package for the numerical evolution\n  of differential equations", "comments": "12 pages, 1 figure, accepted to be published in SoftwareX", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS gr-qc", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  COFFEE (ConFormal Field Equation Evolver) is a Python package primarily\ndeveloped to numerically evolve systems of partial differential equations over\ntime using the method of lines. It includes a variety of time integrators and\nfinite differencing stencils with the summation-by-parts property, as well as\npseudo-spectral functionality for angular derivatives of spin-weighted\nfunctions. Some additional capabilities include being MPI-parallelisable on a\nvariety of different geometries, HDF data output and post processing scripts to\nvisualize data, and an actions class that allows users to create code for\nanalysis after each timestep.\n", "versions": [{"version": "v1", "created": "Fri, 29 Mar 2019 12:40:01 GMT"}, {"version": "v2", "created": "Thu, 4 Jul 2019 06:47:49 GMT"}], "update_date": "2019-07-05", "authors_parsed": [["Doulis", "Georgios", ""], ["Frauendiener", "J\u00f6rg", ""], ["Stevens", "Chris", ""], ["Whale", "Ben", ""]]}]