[{"id": "1703.00985", "submitter": "Alexander Gilbert", "authors": "Alexander D. Gilbert and Greg W. Wasilkowski", "title": "Small Superposition Dimension and Active Set Construction for\n  Multivariate Integration Under Modest Error Demand", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "math.NA cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Constructing active sets is a key part of the Multivariate Decomposition\nMethod. An algorithm for constructing optimal or quasi-optimal active sets is\nproposed in the paper. By numerical experiments, it is shown that the new\nmethod can provide sets that are significantly smaller than the sets\nconstructed by the already existing method. The experiments also show that the\nsuperposition dimension could surprisingly be very small, at most 3, when the\nerror demand is not smaller than $10^{-3}$ and the weights decay sufficiently\nfast.\n", "versions": [{"version": "v1", "created": "Thu, 2 Mar 2017 23:27:33 GMT"}], "update_date": "2017-03-06", "authors_parsed": [["Gilbert", "Alexander D.", ""], ["Wasilkowski", "Greg W.", ""]]}, {"id": "1703.01325", "submitter": "Bo Yang", "authors": "Bo Yang, Hui Liu, He Zhong and Zhangxin Chen", "title": "Decoupled Block-Wise ILU(k) Preconditioner on GPU", "comments": "14 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.NA cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This research investigates the implementation mechanism of block-wise ILU(k)\npreconditioner on GPU. The block-wise ILU(k) algorithm requires both the level\nk and the block size to be designed as variables. A decoupled ILU(k) algorithm\nconsists of a symbolic phase and a factorization phase. In the symbolic phase,\na ILU(k) nonzero pattern is established from the point-wise structure extracted\nfrom a block-wise matrix. In the factorization phase, the block-wise matrix\nwith a variable block size is factorized into a block lower triangular matrix\nand a block upper triangular matrix. And a further diagonal factorization is\nrequired to perform on the block upper triangular matrix for adapting a\nparallel triangular solver on GPU.We also present the numerical experiments to\nstudy the preconditioner actions on different k levels and block sizes.\n", "versions": [{"version": "v1", "created": "Fri, 3 Mar 2017 20:08:02 GMT"}], "update_date": "2017-03-07", "authors_parsed": [["Yang", "Bo", ""], ["Liu", "Hui", ""], ["Zhong", "He", ""], ["Chen", "Zhangxin", ""]]}, {"id": "1703.03116", "submitter": "Donna Calhoun", "authors": "Donna Calhoun, Carsten Burstedde", "title": "ForestClaw: A parallel algorithm for patch-based adaptive mesh\n  refinement on a forest of quadtrees", "comments": "26 pages, 12 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We describe a parallel, adaptive, multi-block algorithm for explicit\nintegration of time dependent partial differential equations on two-dimensional\nCartesian grids. The grid layout we consider consists of a nested hierarchy of\nfixed size, non-overlapping, logically Cartesian grids stored as leaves in a\nquadtree. Dynamic grid refinement and parallel partitioning of the grids is\ndone through the use of the highly scalable quadtree/octree library p4est.\nBecause our concept is multi-block, we are able to easily solve on a variety of\ngeometries including the cubed sphere. In this paper, we pay special attention\nto providing details of the parallel ghost-filling algorithm needed to ensure\nthat both corner and edge ghost regions around each grid hold valid values.\n  We have implemented this algorithm in the ForestClaw code using single-grid\nsolvers from ClawPack, a software package for solving hyperbolic PDEs using\nfinite volumes methods. We show weak and strong scalability results for scalar\nadvection problems on two-dimensional manifold domains on 1 to 64Ki MPI\nprocesses, demonstrating neglible regridding overhead.\n", "versions": [{"version": "v1", "created": "Thu, 9 Mar 2017 03:01:31 GMT"}], "update_date": "2017-03-10", "authors_parsed": [["Calhoun", "Donna", ""], ["Burstedde", "Carsten", ""]]}, {"id": "1703.04036", "submitter": "Nelson Merino", "authors": "C. Inostroza, I. Kondrashuk, N. Merino and F. Nadal", "title": "A Java library to perform S-expansions of Lie algebras", "comments": "54 pages, 2 figures. The full Java library for S-Expansions is\n  available at https://github.com/SemigroupExp/Sexpansion/releases/tag/v1.0.0.\n  Revised version: three references are added, the code of the programs\n  \"loadfile\" and \"loadfromfile\" is removed", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS hep-th math-ph math.MP", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The contraction method is a procedure that allows to establish non-trivial\nrelations between Lie algebras and has had succesful applications in both\nmathematics and theoretical physics. This work deals with generalizations of\nthe contraction procedure with a main focus in the so called S-expansion method\nas it includes most of the other generalized contractions. Basically, the\nS-exansion combines a Lie algebra $\\mathcal{G}$ with a finite abelian semigroup\n$S$ in order to define new S-expanded algebras. After giving a description of\nthe main ingredients used in this paper, we present a Java library that\nautomatizes the S-expansion procedure. With this computational tool we are able\nto represent Lie algebras and semigroups, so we can perform S-expansions of Lie\nalgebras using arbitrary semigroups. We explain how the library methods has\nbeen constructed and how they work; then we give a set of example programs\naimed to solve different problems. They are presented so that any user can\neasily modify them to perform his own calculations, without being necessarily\nan expert in Java. Finally, some comments about further developements and\npossible new applications are made.\n", "versions": [{"version": "v1", "created": "Sat, 11 Mar 2017 22:46:19 GMT"}, {"version": "v2", "created": "Tue, 11 Apr 2017 22:45:00 GMT"}], "update_date": "2017-04-13", "authors_parsed": [["Inostroza", "C.", ""], ["Kondrashuk", "I.", ""], ["Merino", "N.", ""], ["Nadal", "F.", ""]]}, {"id": "1703.05298", "submitter": "Dario Zanca", "authors": "Francesco Giannini, Vincenzo Laveglia, Alessandro Rossi, Dario Zanca,\n  Andrea Zugarini", "title": "Neural Networks for Beginners. A fast implementation in Matlab, Torch,\n  TensorFlow", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.LG cs.CV cs.MS stat.ML", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This report provides an introduction to some Machine Learning tools within\nthe most common development environments. It mainly focuses on practical\nproblems, skipping any theoretical introduction. It is oriented to both\nstudents trying to approach Machine Learning and experts looking for new\nframeworks.\n", "versions": [{"version": "v1", "created": "Fri, 10 Mar 2017 18:01:20 GMT"}, {"version": "v2", "created": "Thu, 16 Mar 2017 08:32:19 GMT"}], "update_date": "2017-03-17", "authors_parsed": [["Giannini", "Francesco", ""], ["Laveglia", "Vincenzo", ""], ["Rossi", "Alessandro", ""], ["Zanca", "Dario", ""], ["Zugarini", "Andrea", ""]]}, {"id": "1703.06494", "submitter": "Pavel Kus", "authors": "Pavel K\\r{u}s, Jakub \\v{S}\\'istek", "title": "Coupling parallel adaptive mesh refinement with a nonoverlapping domain\n  decomposition solver", "comments": null, "journal-ref": "Advances in Engineering Software 110 (2017), 34-54", "doi": "10.1016/j.advengsoft.2017.03.012", "report-no": null, "categories": "math.NA cs.MS cs.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We study the effect of adaptive mesh refinement on a parallel domain\ndecomposition solver of a linear system of algebraic equations. These concepts\nneed to be combined within a parallel adaptive finite element software. A\nprototype implementation is presented for this purpose. It uses adaptive mesh\nrefinement with one level of hanging nodes. Two and three-level versions of the\nBalancing Domain Decomposition based on Constraints (BDDC) method are used to\nsolve the arising system of algebraic equations. The basic concepts are\nrecalled and components necessary for the combination are studied in detail. Of\nparticular interest is the effect of disconnected subdomains, a typical output\nof the employed mesh partitioning based on space-filling curves, on the\nconvergence and solution time of the BDDC method. It is demonstrated using a\nlarge set of experiments that while both refined meshes and disconnected\nsubdomains have a negative effect on the convergence of BDDC, the number of\niterations remains acceptable. In addition, scalability of the three-level BDDC\nsolver remains good on up to a few thousands of processor cores. The largest\npresented problem using adaptive mesh refinement has over 10^9 unknowns and is\nsolved on 2048 cores.\n", "versions": [{"version": "v1", "created": "Sun, 19 Mar 2017 19:25:42 GMT"}], "update_date": "2020-01-08", "authors_parsed": [["K\u016fs", "Pavel", ""], ["\u0160\u00edstek", "Jakub", ""]]}, {"id": "1703.07206", "submitter": "Carlos M\\'alaga Dr.", "authors": "J. T. Becerra-Sagredo, F. Mandujano and C. Malaga", "title": "A GPU-based Multi-level Algorithm for Boundary Value Problems", "comments": "14 pages, 7 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.NA physics.comp-ph", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  A novel and scalable geometric multi-level algorithm is presented for the\nnumerical solution of elliptic partial differential equations, specially\ndesigned to run with high occupancy of streaming processors inside Graphics\nProcessing Units(GPUs). The algorithm consists of iterative, superposed\noperations on a single grid, and it is composed of two simple full-grid\nroutines: a restriction and a coarsened interpolation-relaxation. The\nrestriction is used to collect sources using recursive coarsened averages, and\nthe interpolation-relaxation simultaneously applies coarsened finite-difference\noperators and interpolations. The routines are scheduled in a saw-like refining\ncycle. Convergence to machine precision is achieved repeating the full cycle\nusing accumulated residuals and successively collecting the solution. Its total\nnumber of operations scale linearly with the number of nodes. It provides an\nattractive fast solver for Boundary Value Problems (BVPs), specially for\nsimulations running entirely in the GPU. Applications shown in this work\ninclude the deformation of two-dimensional grids, the computation of\nthree-dimensional streamlines for a singular trifoil-knot vortex and the\ncalculation of three-dimensional electric potentials in heterogeneous\ndielectric media.\n", "versions": [{"version": "v1", "created": "Thu, 16 Mar 2017 15:35:08 GMT"}], "update_date": "2017-03-22", "authors_parsed": [["Becerra-Sagredo", "J. T.", ""], ["Mandujano", "F.", ""], ["Malaga", "C.", ""]]}, {"id": "1703.09268", "submitter": "Curt Da Silva", "authors": "Curt Da Silva, Felix J. Herrmann", "title": "A Unified 2D/3D Large Scale Software Environment for Nonlinear Inverse\n  Problems", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Large scale parameter estimation problems are among some of the most\ncomputationally demanding problems in numerical analysis. An academic\nresearcher's domain-specific knowledge often precludes that of software design,\nwhich results in inversion frameworks that are technically correct, but not\nscalable to realistically-sized problems. On the other hand, the computational\ndemands for realistic problems result in industrial codebases that are geared\nsolely for high performance, rather than comprehensibility or flexibility. We\npropose a new software design for inverse problems constrained by partial\ndifferential equations that bridges the gap between these two seemingly\ndisparate worlds. A hierarchical and modular design allows a user to delve into\nas much detail as she desires, while exploiting high performance primitives at\nthe lower levels. Our code has the added benefit of actually reflecting the\nunderlying mathematics of the problem, which lowers the cognitive load on user\nusing it and reduces the initial startup period before a researcher can be\nfully productive. We also introduce a new preconditioner for the 3D Helmholtz\nequation that is suitable for fault-tolerant distributed systems. Numerical\nexperiments on a variety of 2D and 3D test problems demonstrate the\neffectiveness of this approach on scaling algorithms from small to large scale\nproblems with minimal code changes.\n", "versions": [{"version": "v1", "created": "Mon, 27 Mar 2017 19:01:10 GMT"}, {"version": "v2", "created": "Tue, 4 Apr 2017 00:19:08 GMT"}], "update_date": "2017-04-05", "authors_parsed": [["Da Silva", "Curt", ""], ["Herrmann", "Felix J.", ""]]}]