[{"id": "1110.2263", "submitter": "Christopher Winfield", "authors": "Christopher J. Winfield", "title": "Asymptotic Methods of ODEs: Exploring Singularities of the Second Kind", "comments": "12 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.SC cs.MS math.CA math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We develop symbolic methods of asymptotic approximations for solutions of\nlinear ordinary differential equations and use to them stabilize numerical\ncalculations. Our method follows classical analysis for first-order systems and\nhigher-order scalar equations where growth behavior is expressed in terms of\nelementary functions. We then recast our equations in mollified form - thereby\nobtaining stability.\n", "versions": [{"version": "v1", "created": "Tue, 11 Oct 2011 04:03:22 GMT"}], "update_date": "2011-10-12", "authors_parsed": [["Winfield", "Christopher J.", ""]]}, {"id": "1110.3233", "submitter": "Mario Mulansky", "authors": "Mario Mulansky and Karsten Ahnert", "title": "Metaprogramming Applied to Numerical Problems", "comments": "4 pages,2 figures,3 listings", "journal-ref": "AIP Conf. Proc. 1389, pp. 1582-1585 (2011)", "doi": "10.1063/1.3637933", "report-no": null, "categories": "physics.comp-ph cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  From the discovery that the template system of C++ forms a Turing complete\nlanguage in 1994, a programming technique called Template Metaprogramming has\nemerged that allows for the creation of faster, more generic and better code.\nHere, we apply Template Metaprogramming to implement a generic Runge-Kutta\nscheme that can be used to numerically solve ordinary differential equations.\nWe show that using Template Metaprogramming results in a significantly improved\nperformance compared to a classical implementation.\n", "versions": [{"version": "v1", "created": "Fri, 14 Oct 2011 15:04:14 GMT"}], "update_date": "2012-06-12", "authors_parsed": [["Mulansky", "Mario", ""], ["Ahnert", "Karsten", ""]]}, {"id": "1110.3397", "submitter": "Karsten Ahnert", "authors": "Karsten Ahnert, Mario Mulansky", "title": "Odeint - Solving ordinary differential equations in C++", "comments": "4 pages, 1 figure", "journal-ref": "IP Conf. Proc. - September 14, 2011 - Volume 1389, pp. 1586-1589", "doi": "10.1063/1.3637934", "report-no": null, "categories": "cs.MS nlin.CD physics.comp-ph", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Many physical, biological or chemical systems are modeled by ordinary\ndifferential equations (ODEs) and finding their solution is an every-day-task\nfor many scientists. Here, we introduce a new C++ library dedicated to find\nnumerical solutions of initial value problems of ODEs: odeint (www.odeint.com).\nodeint is implemented in a highly generic way and provides extensive\ninteroperability at top performance. For example, due to it's modular design it\ncan be easily parallized with OpenMP and even runs on CUDA GPUs. Despite that,\nit provides a convenient interface that allows for a simple and easy usage.\n", "versions": [{"version": "v1", "created": "Sat, 15 Oct 2011 09:41:24 GMT"}], "update_date": "2011-10-18", "authors_parsed": [["Ahnert", "Karsten", ""], ["Mulansky", "Mario", ""]]}, {"id": "1110.4473", "submitter": "EPTCS", "authors": "David Hardin (Rockwell Collins), Julien Schmaltz (Open University of\n  the Netherlands)", "title": "Proceedings 10th International Workshop on the ACL2 Theorem Prover and\n  its Applications", "comments": null, "journal-ref": "EPTCS 70, 2011", "doi": "10.4204/EPTCS.70", "report-no": null, "categories": "cs.LO cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This volume contains the proceedings of ACL2 2011, the International Workshop\non the ACL2 Theorem Prover and its Applications. The workshop was held in\nAustin, Texas, USA, on November 3-4 2011. ACL2 2011 is the tenth in a series of\nworkshops on the ACL2 Theorem Prover and its Applications. The workshop was\nco-located with the eleventh Conference on Formal Methods in Computer Aided\nDesign (FMCAD'11). The ACL2 Workshop series provide a major technical forum for\nresearchers to present and discuss improvements and extensions to the theorem\nprover, comparisons of ACL2 with other systems, and applications of ACL2 in\nformal verification or formalized mathematics. Workshops have been held at\napproxiamately 18 month intervals since 1999. ACL2 is the most recent\nincarnation of the Boyer-Moore family of theorem provers, for which, Robert\nBoyer, Matt Kaufmann and J Strother Moore received the 2005 ACM Software System\nAward. It is state-of-the-art automated reasoning system that has been\nsuccessfully used in academia, government and industry for specification and\nverification of computing systems. More details can be found in the proceedings\nand on the workshop web page (www.cs.ru.nl/~julien/acl2-11/).\n", "versions": [{"version": "v1", "created": "Thu, 20 Oct 2011 08:48:32 GMT"}], "update_date": "2011-10-21", "authors_parsed": [["Hardin", "David", "", "Rockwell Collins"], ["Schmaltz", "Julien", "", "Open University of\n  the Netherlands"]]}, {"id": "1110.4673", "submitter": "EPTCS", "authors": "Matt Kaufmann (Univ. of Texas at Austin), J Strother Moore (Univ. of\n  Texas at Austin)", "title": "How Can I Do That with ACL2? Recent Enhancements to ACL2", "comments": "In Proceedings ACL2 2011, arXiv:1110.4473", "journal-ref": "EPTCS 70, 2011, pp. 46-60", "doi": "10.4204/EPTCS.70.4", "report-no": null, "categories": "cs.MS cs.LO cs.SC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The last several years have seen major enhancements to ACL2 functionality,\nlargely driven by requests from its user community, including utilities now in\ncommon use such as 'make-event', 'mbe', and trust tags. In this paper we\nprovide user-level summaries of some ACL2 enhancements introduced after the\nrelease of Version 3.5 (in May, 2009, at about the time of the 2009 ACL2\nworkshop) up through the release of Version 4.3 in July, 2011, roughly a couple\nof years later. Many of these features are not particularly well known yet, but\nmost ACL2 users could take advantage of at least some of them. Some of the\nchanges could affect existing proof efforts, such as a change that treats pairs\nof functions such as 'member' and 'member-equal' as the same function.\n", "versions": [{"version": "v1", "created": "Fri, 21 Oct 2011 00:45:38 GMT"}], "update_date": "2011-10-24", "authors_parsed": [["Kaufmann", "Matt", "", "Univ. of Texas at Austin"], ["Moore", "J Strother", "", "Univ. of\n  Texas at Austin"]]}, {"id": "1110.4675", "submitter": "EPTCS", "authors": "Peter-Michael Seidel (Advanced Micro Devices)", "title": "Formal Verification of an Iterative Low-Power x86 Floating-Point\n  Multiplier with Redundant Feedback", "comments": "In Proceedings ACL2 2011, arXiv:1110.4473", "journal-ref": "EPTCS 70, 2011, pp. 70-83", "doi": "10.4204/EPTCS.70.6", "report-no": null, "categories": "cs.LO cs.AR cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present the formal verification of a low-power x86 floating-point\nmultiplier. The multiplier operates iteratively and feeds back intermediate\nresults in redundant representation. It supports x87 and SSE instructions in\nvarious precisions and can block the issuing of new instructions. The design\nhas been optimized for low-power operation and has not been constrained by the\nformal verification effort. Additional improvements for the implementation were\nidentified through formal verification. The formal verification of the design\nalso incorporates the implementation of clock-gating and control logic. The\ncore of the verification effort was based on ACL2 theorem proving.\nAdditionally, model checking has been used to verify some properties of the\nfloating-point scheduler that are relevant for the correct operation of the\nunit.\n", "versions": [{"version": "v1", "created": "Fri, 21 Oct 2011 00:45:53 GMT"}], "update_date": "2011-10-24", "authors_parsed": [["Seidel", "Peter-Michael", "", "Advanced Micro Devices"]]}, {"id": "1110.5441", "submitter": "Gabriel Wlaz{\\l}owski", "authors": "Piotr Magierski, Gabriel Wlazlowski", "title": "LINPRO: linear inverse problem library for data contaminated by\n  statistical noise", "comments": "The associated computer program is available at:\n  http://tja.if.pw.edu.pl/linpro/", "journal-ref": "Comput. Phys. Commun. 183 (2012) 2264-2271", "doi": "10.1016/j.cpc.2012.05.005", "report-no": null, "categories": "cs.MS hep-lat physics.data-an", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The library LINPRO which provides solution to the linear inverse problem for\ndata contaminated by a statistical noise is presented. The library makes use of\ntwo methods: Maximum Entropy Method and Singular Value Decomposition. As an\nexample it has been applied to perform an analytic continuation of the\nimaginary time propagator obtained within the Quantum Monte Carlo method.\n", "versions": [{"version": "v1", "created": "Tue, 25 Oct 2011 08:44:51 GMT"}, {"version": "v2", "created": "Wed, 27 Jun 2012 22:30:05 GMT"}], "update_date": "2012-06-29", "authors_parsed": [["Magierski", "Piotr", ""], ["Wlazlowski", "Gabriel", ""]]}, {"id": "1110.5765", "submitter": "Yiannis Andreopoulos", "authors": "Davide Anastasia and Yiannis Andreopoulos", "title": "Throughput-Distortion Computation Of Generic Matrix Multiplication:\n  Toward A Computation Channel For Digital Signal Processing Systems", "comments": "IEEE Transactions on Signal Processing (vol. 60, 2012)", "journal-ref": null, "doi": "10.1109/TSP.2011.2176337", "report-no": null, "categories": "cs.MS cs.CE", "license": "http://creativecommons.org/licenses/by-nc-sa/3.0/", "abstract": "  The generic matrix multiply (GEMM) function is the core element of\nhigh-performance linear algebra libraries used in many\ncomputationally-demanding digital signal processing (DSP) systems. We propose\nan acceleration technique for GEMM based on dynamically adjusting the\nimprecision (distortion) of computation. Our technique employs adaptive scalar\ncompanding and rounding to input matrix blocks followed by two forms of packing\nin floating-point that allow for concurrent calculation of multiple results.\nSince the adaptive companding process controls the increase of concurrency (via\npacking), the increase in processing throughput (and the corresponding increase\nin distortion) depends on the input data statistics. To demonstrate this, we\nderive the optimal throughput-distortion control framework for GEMM for the\nbroad class of zero-mean, independent identically distributed, input sources.\nOur approach converts matrix multiplication in programmable processors into a\ncomputation channel: when increasing the processing throughput, the output\nnoise (error) increases due to (i) coarser quantization and (ii) computational\nerrors caused by exceeding the machine-precision limitations. We show that,\nunder certain distortion in the GEMM computation, the proposed framework can\nsignificantly surpass 100% of the peak performance of a given processor. The\npractical benefits of our proposal are shown in a face recognition system and a\nmulti-layer perceptron system trained for metadata learning from a large music\nfeature database.\n", "versions": [{"version": "v1", "created": "Wed, 26 Oct 2011 11:17:21 GMT"}], "update_date": "2015-05-30", "authors_parsed": [["Anastasia", "Davide", ""], ["Andreopoulos", "Yiannis", ""]]}]