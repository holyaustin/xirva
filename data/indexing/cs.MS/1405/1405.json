[{"id": "1405.0320", "submitter": "Jan Verschelde", "authors": "Danko Adrovic and Jan Verschelde", "title": "Computing all Affine Solution Sets of Binomial Systems", "comments": "4 page extended abstract accepted by EACA 2014, a conference on\n  Computer Algebra and its Applications", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.SC cs.MS math.AG", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  To compute solutions of sparse polynomial systems efficiently we have to\nexploit the structure of their Newton polytopes. While the application of\npolyhedral methods naturally excludes solutions with zero components, an\nirreducible decomposition of a variety is typically understood in affine space,\nincluding also those components with zero coordinates. For the problem of\ncomputing solution sets in the intersection of some coordinate planes, the\ndirect application of a polyhedral method fails, because the original facial\nstructure of the Newton polytopes may alter completely when selected variables\nbecome zero. Our new proposed method enumerates all factors contributing to a\ngeneralized permanent and toric solutions as a special case of this\nenumeration. For benchmark problems such as the adjacent 2-by-2 minors of a\ngeneral matrix, our methods scale much better than the witness set\nrepresentations of numerical algebraic geometry.\n", "versions": [{"version": "v1", "created": "Thu, 1 May 2014 23:00:24 GMT"}], "update_date": "2014-05-05", "authors_parsed": [["Adrovic", "Danko", ""], ["Verschelde", "Jan", ""]]}, {"id": "1405.0700", "submitter": "Abdou M. Abdel-Rehim", "authors": "A. Abdel-Rehim, C. Alexandrou, N. Anastopoulos, G. Koutsou, I.\n  Liabotis and N. Papadopoulou", "title": "PLQCD library for Lattice QCD on multi-core machines", "comments": "7 pages, presented at the 31st International Symposium on Lattice\n  Field Theory (Lattice 2013), 29 July - 3 August 2013, Mainz, Germany", "journal-ref": null, "doi": null, "report-no": null, "categories": "hep-lat cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  PLQCD is a stand-alone software library developed under PRACE for lattice\nQCD. It provides an implementation of the Dirac operator for Wilson type\nfermions and few efficient linear solvers. The library is optimized for\nmulti-core machines using a hybrid parallelization with OpenMP+MPI. The main\nobjectives of the library is to provide a scalable implementation of the Dirac\noperator for efficient computation of the quark propagator. In this\ncontribution, a description of the PLQCD library is given together with some\nbenchmark results.\n", "versions": [{"version": "v1", "created": "Sun, 4 May 2014 14:12:53 GMT"}], "update_date": "2014-05-06", "authors_parsed": [["Abdel-Rehim", "A.", ""], ["Alexandrou", "C.", ""], ["Anastopoulos", "N.", ""], ["Koutsou", "G.", ""], ["Liabotis", "I.", ""], ["Papadopoulou", "N.", ""]]}, {"id": "1405.3426", "submitter": "Moa Johansson", "authors": "Moa Johansson and Dan Rosen and Nicholas Smallbone and Koen Claessen", "title": "Hipster: Integrating Theory Exploration in a Proof Assistant", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.LO cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper describes Hipster, a system integrating theory exploration with\nthe proof assistant Isabelle/HOL. Theory exploration is a technique for\nautomatically discovering new interesting lemmas in a given theory development.\nHipster can be used in two main modes. The first is exploratory mode, used for\nautomatically generating basic lemmas about a given set of datatypes and\nfunctions in a new theory development. The second is proof mode, used in a\nparticular proof attempt, trying to discover the missing lemmas which would\nallow the current goal to be proved. Hipster's proof mode complements and\nboosts existing proof automation techniques that rely on automatically\nselecting existing lemmas, by inventing new lemmas that need induction to be\nproved. We show example uses of both modes.\n", "versions": [{"version": "v1", "created": "Wed, 14 May 2014 09:43:09 GMT"}], "update_date": "2014-05-15", "authors_parsed": [["Johansson", "Moa", ""], ["Rosen", "Dan", ""], ["Smallbone", "Nicholas", ""], ["Claessen", "Koen", ""]]}, {"id": "1405.3630", "submitter": "Vasyl Choliy Dr.", "authors": "Vasyl Choliy", "title": "DDscat.C++ User and programmer guide", "comments": "26 pages, 7 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "physics.comp-ph cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  DDscat.C++ 7.3.0 is a freely available open-source C++ software package\napplying the \"discrete dipole approximation\" (DDA) to calculate scattering and\nabsorption of electromagnetic waves by targets with arbitrary geometries and a\ncomplex refractive index. DDscat.C++ is a clone of well known DDscat Fortran-90\nsoftware. We refer to DDscat as to the parent code in this document. Versions\n7.3.0 of both codes have the identical functionality but the quite different\nimplementation. Started as a teaching project, the DDscat.C++ code differs from\nthe parent code DDscat in programming techniques and features, essential for\nC++ but quite seldom in Fortran.\n  As DDscat.C++ in its current version is just a clone, usage of DDscat.C++ for\nelectromagnetic calculations is the same as of DDscat. Please, refer to \"User\nGuide for the Discrete Dipole Approximation Code DDSCAT 7.3\" to start using the\ncode(s).\n  This document consists of two parts. In the first part we present Quick start\nguide for users who want to begin to use the code. Only differencies between\nDDscat.C++ and DDscat are explained. The second part of the document explains\nprogramming tips for the persons who want to change the code, to add the\nfunctionality or help the author with code refactoring and debugging.\n", "versions": [{"version": "v1", "created": "Fri, 20 Dec 2013 10:29:47 GMT"}], "update_date": "2014-05-15", "authors_parsed": [["Choliy", "Vasyl", ""]]}, {"id": "1405.3758", "submitter": "Andrea Kohlhase", "authors": "Andrea Kohlhase", "title": "Search Interfaces for Mathematicians", "comments": "conference article \"CICM'14: International Conference on Computer\n  Mathematics 2014\", DML-Track: Digital Math Libraries 17 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.HC cs.DL cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Access to mathematical knowledge has changed dramatically in recent years,\ntherefore changing mathematical search practices. Our aim with this study is to\nscrutinize professional mathematicians' search behavior. With this\nunderstanding we want to be able to reason why mathematicians use which tool\nfor what search problem in what phase of the search process. To gain these\ninsights we conducted 24 repertory grid interviews with mathematically inclined\npeople (ranging from senior professional mathematicians to non-mathematicians).\nFrom the interview data we elicited patterns for the user group\n\"mathematicians\" that can be applied when understanding design issues or\ncreating new designs for mathematical search interfaces.\n", "versions": [{"version": "v1", "created": "Thu, 15 May 2014 06:55:21 GMT"}], "update_date": "2014-05-16", "authors_parsed": [["Kohlhase", "Andrea", ""]]}, {"id": "1405.4644", "submitter": "Pavel Klav\\'ik", "authors": "Pavel Klav\\'ik, A. Cristiano I. Malossi, Constantin Bekas, and\n  Alessandro Curioni", "title": "Changing Computing Paradigms Towards Power Efficiency", "comments": null, "journal-ref": "Philosophical Transactions of the Royal Society A: Physical,\n  Mathematical and Engineering Sciences. 372(2018)", "doi": "10.1098/rsta.2013.0278", "report-no": null, "categories": "cs.MS cs.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Power awareness is fast becoming immensely important in computing, ranging\nfrom the traditional High Performance Computing applications, to the new\ngeneration of data centric workloads.\n  In this work we describe our efforts towards a power efficient computing\nparadigm that combines low precision and high precision arithmetic. We showcase\nour ideas for the widely used kernel of solving systems of linear equations\nthat finds numerous applications in scientific and engineering disciplines as\nwell as in large scale data analytics, statistics and machine learning.\n  Towards this goal we developed tools for the seamless power profiling of\napplications at a fine grain level. In addition, we verify here previous work\non post FLOPS/Watt metrics and show that these can shed much more light in the\npower/energy profile of important applications.\n", "versions": [{"version": "v1", "created": "Mon, 19 May 2014 09:03:58 GMT"}], "update_date": "2014-05-20", "authors_parsed": [["Klav\u00edk", "Pavel", ""], ["Malossi", "A. Cristiano I.", ""], ["Bekas", "Constantin", ""], ["Curioni", "Alessandro", ""]]}, {"id": "1405.4921", "submitter": "Annette Pressman Dr", "authors": "Annette Pressman, Kai Hock", "title": "Zgoubi: A startup guide for the complete beginner", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "physics.acc-ph cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Zgoubi is a code which can be used to model accelerators and beam lines,\ncomprised of magnetic and electrostatic elements. It has been extensively\ndeveloped since the mid-1980s to include circular accelerators and related beam\nphysics. It has been made freely available by its author on a code development\nsite, including a Users' Guide, a data treatment/graphic interfacing tool, and\nmany examples. This startup guide give directions to install the required\nelements onto a Windows or Unix system to enable running of the Zgoubi code\nwith examples of code written to model the EMMA accelerator based at the\nCockcroft Institute.\n", "versions": [{"version": "v1", "created": "Mon, 19 May 2014 23:53:58 GMT"}], "update_date": "2014-05-21", "authors_parsed": [["Pressman", "Annette", ""], ["Hock", "Kai", ""]]}, {"id": "1405.5668", "submitter": "Victor Magron", "authors": "Victor Magron", "title": "NLCertify: A Tool for Formal Nonlinear Optimization", "comments": "6 pages, 2 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.LO math.OC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  NLCertify is a software package for handling formal certification of\nnonlinear inequalities involving transcendental multivariate functions. The\ntool exploits sparse semialgebraic optimization techniques with approximation\nmethods for transcendental functions, as well as formal features. Given a box\nand a transcendental multivariate function as input, NLCertify provides OCaml\nlibraries that produce nonnegativity certificates for the function over the\nbox, which can be ultimately proved correct inside the Coq proof assistant.\n", "versions": [{"version": "v1", "created": "Thu, 22 May 2014 08:41:00 GMT"}], "update_date": "2014-05-23", "authors_parsed": [["Magron", "Victor", ""]]}, {"id": "1405.5956", "submitter": "Jacques Carette", "authors": "Jacques Carette, William M. Farmer, Michael Kohlhase", "title": "Realms: A Structure for Consolidating Knowledge about Mathematical\n  Theories", "comments": "As accepted for CICM 2014", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.LO", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Since there are different ways of axiomatizing and developing a mathematical\ntheory, knowledge about a such a theory may reside in many places and in many\nforms within a library of formalized mathematics. We introduce the notion of a\nrealm as a structure for consolidating knowledge about a mathematical theory. A\nrealm contains several axiomatizations of a theory that are separately\ndeveloped. Views interconnect these developments and establish that the\naxiomatizations are equivalent in the sense of being mutually interpretable. A\nrealm also contains an external interface that is convenient for users of the\nlibrary who want to apply the concepts and facts of the theory without delving\ninto the details of how the concepts and facts were developed. We illustrate\nthe utility of realms through a series of examples. We also give an outline of\nthe mechanisms that are needed to create and maintain realms.\n", "versions": [{"version": "v1", "created": "Fri, 23 May 2014 03:05:42 GMT"}], "update_date": "2014-05-26", "authors_parsed": [["Carette", "Jacques", ""], ["Farmer", "William M.", ""], ["Kohlhase", "Michael", ""]]}, {"id": "1405.7012", "submitter": "Johannes H\\\"olzl", "authors": "Jeremy Avigad and Johannes H\\\"olzl and Luke Serafin", "title": "A formally verified proof of the Central Limit Theorem", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.LO math.PR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We describe a proof of the Central Limit Theorem that has been formally\nverified in the Isabelle proof assistant. Our formalization builds upon and\nextends Isabelle's libraries for analysis and measure-theoretic probability.\nThe proof of the theorem uses characteristic functions, which are a kind of\nFourier transform, to demonstrate that, under suitable hypotheses, sums of\nrandom variables converge weakly to the standard normal distribution. We also\ndiscuss the libraries and infrastructure that supported the formalization, and\nreflect on some of the lessons we have learned from the effort.\n", "versions": [{"version": "v1", "created": "Tue, 27 May 2014 19:01:57 GMT"}, {"version": "v2", "created": "Tue, 19 Jul 2016 14:49:45 GMT"}, {"version": "v3", "created": "Wed, 18 Jan 2017 21:09:09 GMT"}, {"version": "v4", "created": "Wed, 1 Feb 2017 15:53:42 GMT"}], "update_date": "2017-02-02", "authors_parsed": [["Avigad", "Jeremy", ""], ["H\u00f6lzl", "Johannes", ""], ["Serafin", "Luke", ""]]}, {"id": "1405.7290", "submitter": "Christian Jacobs", "authors": "Christian T. Jacobs, Alexandros Avdis, Gerard J. Gorman, Matthew D.\n  Piggott", "title": "PyRDM: A Python-based library for automating the management and online\n  publication of scientific software and data", "comments": "Revised version. The main changes are: Added pdfLaTeX to the\n  dependencies list; Improved Figure 1 to show the 'publish' option selected in\n  Diamond; Added two paragraphs to explain why users would want to use PyRDM;\n  Added some content on the PyRDM roadmap, and also some content regarding\n  engagement with libraries and research software engineers", "journal-ref": "Journal of Open Research Software 2:e28 (2014) 1-6", "doi": "10.5334/jors.bj", "report-no": null, "categories": "cs.CE cs.DL cs.MS", "license": "http://creativecommons.org/licenses/by/3.0/", "abstract": "  The recomputability and reproducibility of results from scientific software\nrequires access to both the source code and all associated input and output\ndata. However, the full collection of these resources often does not accompany\nthe key findings published in journal articles, thereby making it difficult or\nimpossible for the wider scientific community to verify the correctness of a\nresult or to build further research on it. This paper presents a new\nPython-based library, PyRDM, whose functionality aims to automate the process\nof sharing the software and data via online, citable repositories such as\nFigshare. The library is integrated into the workflow of an open-source\ncomputational fluid dynamics package, Fluidity, to demonstrate an example of\nits usage.\n", "versions": [{"version": "v1", "created": "Wed, 28 May 2014 16:07:12 GMT"}, {"version": "v2", "created": "Thu, 21 Aug 2014 10:48:05 GMT"}], "update_date": "2015-12-24", "authors_parsed": [["Jacobs", "Christian T.", ""], ["Avdis", "Alexandros", ""], ["Gorman", "Gerard J.", ""], ["Piggott", "Matthew D.", ""]]}, {"id": "1405.7470", "submitter": "Andreas Kl\\\"ockner", "authors": "Andreas Kl\\\"ockner", "title": "Loo.py: transformation-based code generation for GPUs and CPUs", "comments": null, "journal-ref": "Proceedings of ARRAY 2014: ACM SIGPLAN Workshop on Libraries,\n  Languages, and Compilers for Array Programming", "doi": "10.1145/2627373.2627387", "report-no": null, "categories": "cs.PL cs.MS math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Today's highly heterogeneous computing landscape places a burden on\nprogrammers wanting to achieve high performance on a reasonably broad\ncross-section of machines. To do so, computations need to be expressed in many\ndifferent but mathematically equivalent ways, with, in the worst case, one\nvariant per target machine.\n  Loo.py, a programming system embedded in Python, meets this challenge by\ndefining a data model for array-style computations and a library of\ntransformations that operate on this model. Offering transformations such as\nloop tiling, vectorization, storage management, unrolling, instruction-level\nparallelism, change of data layout, and many more, it provides a convenient way\nto capture, parametrize, and re-unify the growth among code variants. Optional,\ndeep integration with numpy and PyOpenCL provides a convenient computing\nenvironment where the transition from prototype to high-performance\nimplementation can occur in a gradual, machine-assisted form.\n", "versions": [{"version": "v1", "created": "Thu, 29 May 2014 05:53:56 GMT"}], "update_date": "2014-06-02", "authors_parsed": [["Kl\u00f6ckner", "Andreas", ""]]}, {"id": "1405.7879", "submitter": "Alex Eftimiades", "authors": "Alex Eftimiades", "title": "Kahler: An Implementation of Discrete Exterior Calculus on Hermitian\n  Manifolds", "comments": "Added a link to the code", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.NA cs.CG cs.MS math.DG math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper details the techniques and algorithms implemented in Kahler, a\nPython library that implements discrete exterior calculus on arbitrary\nHermitian manifolds. Borrowing techniques and ideas first implemented in PyDEC,\nKahler provides a uniquely general framework for computation using discrete\nexterior calculus. Manifolds can have arbitrary dimension, topology, bilinear\nHermitian metrics, and embedding dimension. Kahler comes equipped with tools\nfor generating triangular meshes in arbitrary dimensions with arbitrary\ntopology. Kahler can also generate discrete sharp operators and implement de\nRham maps. Computationally intensive tasks are automatically parallelized over\nthe number of cores detected. The program itself is written in Cython--a\nsuperset of the Python language that is translated to C and compiled for extra\nspeed. Kahler is applied to several example problems: normal modes of a\nvibrating membrane, electromagnetic resonance in a cavity, the quantum harmonic\noscillator, and the Dirac-Kahler equation. Convergence is demonstrated on\nrandom meshes.\n", "versions": [{"version": "v1", "created": "Fri, 30 May 2014 14:36:33 GMT"}, {"version": "v2", "created": "Wed, 4 Jun 2014 14:42:41 GMT"}], "update_date": "2014-06-05", "authors_parsed": [["Eftimiades", "Alex", ""]]}]