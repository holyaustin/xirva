[{"id": "1505.00344", "submitter": "Robert Merrison-Hort", "authors": "Robert Merrison-Hort", "title": "Fireflies: New software for interactively exploring dynamical systems\n  using GPU computing", "comments": "31 pages, 8 figures, 4 supplementary videos", "journal-ref": null, "doi": "10.1142/S0218127415501813", "report-no": null, "categories": "cs.MS cs.DC math.DS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In non-linear systems, where explicit analytic solutions usually can't be\nfound, visualisation is a powerful approach which can give insights into the\ndynamical behaviour of models; it is also crucial for teaching this area of\nmathematics. In this paper we present new software, Fireflies, which exploits\nthe power of graphical processing unit (GPU) computing to produce spectacular\ninteractive visualisations of arbitrary systems of ordinary differential\nequations. In contrast to typical phase portraits, Fireflies draws the current\nposition of trajectories (projected onto 2D or 3D space) as single points of\nlight, which move as the system is simulated. Due to the massively parallel\nnature of GPU hardware, Fireflies is able to simulate millions of trajectories\nin parallel (even on standard desktop computer hardware), producing \"swarms\" of\nparticles that move around the screen in real-time according to the equations\nof the system. Particles that move forwards in time reveal stable attractors\n(e.g. fixed points and limit cycles), while the option of integrating another\ngroup of trajectories backwards in time can reveal unstable objects\n(repellers). Fireflies allows the user to change the parameters of the system\nas it is running, in order to see the effect that they have on the dynamics and\nto observe bifurcations. We demonstrate the capabilities of the software with\nthree examples: a two-dimensional \"mean field\" model of neuronal activity, the\nclassical Lorenz system, and a 15-dimensional model of three interacting\nbiologically realistic neurons.\n", "versions": [{"version": "v1", "created": "Sat, 2 May 2015 13:57:16 GMT"}], "update_date": "2016-01-20", "authors_parsed": [["Merrison-Hort", "Robert", ""]]}, {"id": "1505.00383", "submitter": "Jan Verschelde", "authors": "Jan Verschelde and Xiangcheng Yu", "title": "Tracking Many Solution Paths of a Polynomial Homotopy on a Graphics\n  Processing Unit", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.NA math.AG math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Polynomial systems occur in many areas of science and engineering. Unlike\ngeneral nonlinear systems, the algebraic structure enables to compute all\nsolutions of a polynomial system. We describe our massive parallel\npredictor-corrector algorithms to track many solution paths of a polynomial\nhomotopy. The data parallelism that provides the speedups stems from the\nevaluation and differentiation of the monomials in the same polynomial system\nat different data points, which are the points on the solution paths.\nPolynomial homotopies that have tens of thousands of solution paths can keep a\nsufficiently large amount of threads occupied. Our accelerated code combines\nthe reverse mode of algorithmic differentiation with double double and quad\ndouble precision to compute more accurate results faster.\n", "versions": [{"version": "v1", "created": "Sun, 3 May 2015 00:50:23 GMT"}], "update_date": "2015-05-05", "authors_parsed": [["Verschelde", "Jan", ""], ["Yu", "Xiangcheng", ""]]}, {"id": "1505.00838", "submitter": "Slaven Peles", "authors": "Slaven Peles and Stefan Klus", "title": "Sparse Automatic Differentiation for Complex Networks of\n  Differential-Algebraic Equations Using Abstract Elementary Algebra", "comments": null, "journal-ref": "International Journal of Numerical Analysis & Modeling 14.6 (2017)", "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Most numerical solvers and libraries nowadays are implemented to use\nmathematical models created with language-specific built-in data types (e.g.\nreal in Fortran or double in C) and their respective elementary algebra\nimplementations. However, the built-in elementary algebra typically has limited\nfunctionality and often restricts the flexibility of mathematical models and\nthe analysis types that can be applied to those models. To overcome this\nlimitation, a number of domain-specific languages such as gPROMS or Modelica\nwith more feature-rich built-in data types have been proposed. In this paper,\nwe argue that if numerical libraries and solvers are designed to use abstract\nelementary algebra rather than the language-specific built-in algebra, modern\nmainstream languages can be as effective as any domain-specific language. We\nillustrate our ideas using the example of sparse Jacobian matrix computation.\nWe implement an automatic differentiation method that takes advantage of sparse\nsystem structures and is straightforward to parallelize in a distributed memory\nsetting. Furthermore, we show that the computational cost scales linearly with\nthe size of the system.\n", "versions": [{"version": "v1", "created": "Mon, 4 May 2015 23:05:54 GMT"}, {"version": "v2", "created": "Wed, 12 May 2021 22:22:54 GMT"}], "update_date": "2021-05-14", "authors_parsed": [["Peles", "Slaven", ""], ["Klus", "Stefan", ""]]}, {"id": "1505.01577", "submitter": "Kazuhisa Nakasho", "authors": "Kazuhisa Nakasho and Yasunari Shidama", "title": "Documentation Generator Focusing on Symbols for the HTML-ized Mizar\n  Library", "comments": "5 pages, 1 figures, Conference on Intelligent Computer Mathematics\n  2015 (CICM2015)", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The purpose of this project is to collect symbol information in the Mizar\nMathematical Library and manipulate it into practical and organized\ndocumentation. Inspired by the MathWiki project and API reference systems for\ncomputer programs, we developed a documentation generator focusing on symbols\nfor the HTML-ized Mizar library. The system has several helpful features,\nincluding a symbol list, incremental search, and a referrer list. It targets\nthose who use proof assistance systems, the volume of whose libraries has been\nrapidly increasing year by year.\n", "versions": [{"version": "v1", "created": "Thu, 7 May 2015 04:09:24 GMT"}], "update_date": "2015-05-08", "authors_parsed": [["Nakasho", "Kazuhisa", ""], ["Shidama", "Yasunari", ""]]}, {"id": "1505.01629", "submitter": "Christoph Benzmueller", "authors": "Max Wisniewski and Alexander Steen and Christoph Benzm\\\"uller", "title": "LeoPARD --- A Generic Platform for the Implementation of Higher-Order\n  Reasoners", "comments": "6 pages, to appear in the proceedings of CICM'2015 conference", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.LO cs.AI cs.MA cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  LeoPARD supports the implementation of knowledge representation and reasoning\ntools for higher-order logic(s). It combines a sophisticated data structure\nlayer (polymorphically typed {\\lambda}-calculus with nameless spine notation,\nexplicit substitutions, and perfect term sharing) with an ambitious multi-agent\nblackboard architecture (supporting prover parallelism at the term, clause, and\nsearch level). Further features of LeoPARD include a parser for all TPTP\ndialects, a command line interpreter, and generic means for the integration of\nexternal reasoners.\n", "versions": [{"version": "v1", "created": "Thu, 7 May 2015 08:54:19 GMT"}], "update_date": "2015-05-08", "authors_parsed": [["Wisniewski", "Max", ""], ["Steen", "Alexander", ""], ["Benzm\u00fcller", "Christoph", ""]]}, {"id": "1505.01962", "submitter": "Peter Schneider-Kamp", "authors": "Michael Codish and Lu\\'is Cruz-Filipe and Markus Nebel and Peter\n  Schneider-Kamp", "title": "Applying Sorting Networks to Synthesize Optimized Sorting Libraries", "comments": "IMADA-preprint-cs", "journal-ref": null, "doi": "10.1007/978-3-319-27436-2_8", "report-no": null, "categories": "cs.DS cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper shows an application of the theory of sorting networks to\nfacilitate the synthesis of optimized general purpose sorting libraries.\nStandard sorting libraries are often based on combinations of the classic\nQuicksort algorithm with insertion sort applied as the base case for small\nfixed numbers of inputs. Unrolling the code for the base case by ignoring loop\nconditions eliminates branching and results in code which is equivalent to a\nsorting network. This enables the application of further program\ntransformations based on sorting network optimizations, and eventually the\nsynthesis of code from sorting networks. We show that if considering the number\nof comparisons and swaps then theory predicts no real advantage of this\napproach. However, significant speed-ups are obtained when taking advantage of\ninstruction level parallelism and non-branching conditional assignment\ninstructions, both of which are common in modern CPU architectures. We provide\nempirical evidence that using code synthesized from efficient sorting networks\nas the base case for Quicksort libraries results in significant real-world\nspeed-ups.\n", "versions": [{"version": "v1", "created": "Fri, 8 May 2015 09:13:25 GMT"}, {"version": "v2", "created": "Fri, 16 Oct 2015 14:33:46 GMT"}], "update_date": "2017-08-09", "authors_parsed": [["Codish", "Michael", ""], ["Cruz-Filipe", "Lu\u00eds", ""], ["Nebel", "Markus", ""], ["Schneider-Kamp", "Peter", ""]]}, {"id": "1505.03357", "submitter": "Mikl\\'os Homolya", "authors": "Mikl\\'os Homolya and David A. Ham", "title": "A parallel edge orientation algorithm for quadrilateral meshes", "comments": "Second revision: minor changes", "journal-ref": "SIAM Journal on Scientific Computing, 38 (2016), pp. S48-S61", "doi": "10.1137/15M1021325", "report-no": null, "categories": "cs.MS cs.CG", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  One approach to achieving correct finite element assembly is to ensure that\nthe local orientation of facets relative to each cell in the mesh is consistent\nwith the global orientation of that facet. Rognes et al. have shown how to\nachieve this for any mesh composed of simplex elements, and deal.II contains a\nserial algorithm to construct a consistent orientation of any quadrilateral\nmesh of an orientable manifold.\n  The core contribution of this paper is the extension of this algorithm for\ndistributed memory parallel computers, which facilitates its seamless\napplication as part of a parallel simulation system.\n  Furthermore, our analysis establishes a link between the well-known\nUnion-Find algorithm and the construction of a consistent orientation of a\nquadrilateral mesh. As a result, existing work on the parallelisation of the\nUnion-Find algorithm can be easily adapted to construct further parallel\nalgorithms for mesh orientations.\n", "versions": [{"version": "v1", "created": "Wed, 13 May 2015 12:34:54 GMT"}, {"version": "v2", "created": "Sun, 20 Sep 2015 13:51:14 GMT"}, {"version": "v3", "created": "Fri, 11 Dec 2015 17:24:01 GMT"}], "update_date": "2016-11-17", "authors_parsed": [["Homolya", "Mikl\u00f3s", ""], ["Ham", "David A.", ""]]}, {"id": "1505.04633", "submitter": "Matthew Knepley", "authors": "Michael Lange and Matthew G. Knepley and Gerard J. Gorman", "title": "Flexible, Scalable Mesh and Data Management using PETSc DMPlex", "comments": "6 pages, 6 figures, to appear in EASC 2015", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Designing a scientific software stack to meet the needs of the\nnext-generation of mesh-based simulation demands, not only scalable and\nefficient mesh and data management on a wide range of platforms, but also an\nabstraction layer that makes it useful for a wide range of application codes.\nCommon utility tasks, such as file I/O, mesh distribution, and work\npartitioning, should be delegated to external libraries in order to promote\ncode re-use, extensibility and software interoperability. In this paper we\ndemonstrate the use of PETSc's DMPlex data management API to perform mesh input\nand domain partitioning in Fluidity, a large scale CFD application. We\ndemonstrate that raising the level of abstraction adds new functionality to the\napplication code, such as support for additional mesh file formats and mesh re-\nordering, while improving simulation startup cost through more efficient mesh\ndistribution. Moreover, the separation of concerns accomplished through this\ninterface shifts critical performance and interoperability issues, such as\nscalable I/O and file format support, to a widely used and supported open\nsource community library, improving the sustainability, performance, and\nfunctionality of Fluidity.\n", "versions": [{"version": "v1", "created": "Mon, 18 May 2015 13:35:50 GMT"}], "update_date": "2015-05-19", "authors_parsed": [["Lange", "Michael", ""], ["Knepley", "Matthew G.", ""], ["Gorman", "Gerard J.", ""]]}, {"id": "1505.05028", "submitter": "Theo Zimmermann", "authors": "Th\\'eo Zimmermann (ENS Paris, PPS), Hugo Herbelin (PPS, PI.R2)", "title": "Automatic and Transparent Transfer of Theorems along Isomorphisms in the\n  Coq Proof Assistant", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.LO cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In mathematics, it is common practice to have several constructions for the\nsame objects. Mathematicians will identify them modulo isomorphism and will not\nworry later on which construction they use, as theorems proved for one\nconstruction will be valid for all.\n  When working with proof assistants, it is also common to see several\ndata-types representing the same objects. This work aims at making the use of\nseveral isomorphic constructions as simple and as transparent as it can be done\ninformally in mathematics. This requires inferring automatically the missing\nproof-steps.\n  We are designing an algorithm which finds and fills these missing proof-steps\nand we are implementing it as a plugin for Coq.\n", "versions": [{"version": "v1", "created": "Tue, 19 May 2015 14:50:14 GMT"}, {"version": "v2", "created": "Mon, 1 Jun 2015 19:10:17 GMT"}, {"version": "v3", "created": "Fri, 12 Jun 2015 20:10:09 GMT"}, {"version": "v4", "created": "Thu, 9 Jul 2015 11:45:47 GMT"}], "update_date": "2015-07-10", "authors_parsed": [["Zimmermann", "Th\u00e9o", "", "ENS Paris, PPS"], ["Herbelin", "Hugo", "", "PPS, PI.R2"]]}, {"id": "1505.05241", "submitter": "Frank Sottile", "authors": "Daniel J. Bates, Jonathan D. Hauenstein, Matthew E. Niemerg, and Frank\n  Sottile", "title": "Software for the Gale transform of fewnomial systems and a Descartes\n  rule for fewnomials", "comments": "22 pages, 4 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "math.AG cs.MS math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We give a Descartes'-like bound on the number of positive solutions to a\nsystem of fewnomials that holds when its exponent vectors are not in convex\nposition and a sign condition is satisfied. This was discovered while\ndeveloping algorithms and software for computing the Gale transform of a\nfewnomial system, which is our main goal. This software is a component of a\npackage we are developing for Khovanskii-Rolle continuation, which is a\nnumerical algorithm to compute the real solutions to a system of fewnomials.\n", "versions": [{"version": "v1", "created": "Wed, 20 May 2015 04:11:49 GMT"}], "update_date": "2015-05-21", "authors_parsed": [["Bates", "Daniel J.", ""], ["Hauenstein", "Jonathan D.", ""], ["Niemerg", "Matthew E.", ""], ["Sottile", "Frank", ""]]}, {"id": "1505.06807", "submitter": "Ameet Talwalkar", "authors": "Xiangrui Meng, Joseph Bradley, Burak Yavuz, Evan Sparks, Shivaram\n  Venkataraman, Davies Liu, Jeremy Freeman, DB Tsai, Manish Amde, Sean Owen,\n  Doris Xin, Reynold Xin, Michael J. Franklin, Reza Zadeh, Matei Zaharia, Ameet\n  Talwalkar", "title": "MLlib: Machine Learning in Apache Spark", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.LG cs.DC cs.MS stat.ML", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Apache Spark is a popular open-source platform for large-scale data\nprocessing that is well-suited for iterative machine learning tasks. In this\npaper we present MLlib, Spark's open-source distributed machine learning\nlibrary. MLlib provides efficient functionality for a wide range of learning\nsettings and includes several underlying statistical, optimization, and linear\nalgebra primitives. Shipped with Spark, MLlib supports several languages and\nprovides a high-level API that leverages Spark's rich ecosystem to simplify the\ndevelopment of end-to-end machine learning pipelines. MLlib has experienced a\nrapid growth due to its vibrant open-source community of over 140 contributors,\nand includes extensive documentation to support further growth and to let users\nquickly get up to speed.\n", "versions": [{"version": "v1", "created": "Tue, 26 May 2015 05:12:23 GMT"}], "update_date": "2015-05-27", "authors_parsed": [["Meng", "Xiangrui", ""], ["Bradley", "Joseph", ""], ["Yavuz", "Burak", ""], ["Sparks", "Evan", ""], ["Venkataraman", "Shivaram", ""], ["Liu", "Davies", ""], ["Freeman", "Jeremy", ""], ["Tsai", "DB", ""], ["Amde", "Manish", ""], ["Owen", "Sean", ""], ["Xin", "Doris", ""], ["Xin", "Reynold", ""], ["Franklin", "Michael J.", ""], ["Zadeh", "Reza", ""], ["Zaharia", "Matei", ""], ["Talwalkar", "Ameet", ""]]}, {"id": "1505.06848", "submitter": "Mofreh Zaghloul", "authors": "Mofreh R. Zaghloul", "title": "Remark on \"Algorithm 916: Computing the Faddeyeva and Voigt functions\":\n  Efficiency Improvements and Fortran Translation", "comments": "11 pages, 5 tables, Under review", "journal-ref": null, "doi": null, "report-no": null, "categories": "astro-ph.IM cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This remark describes efficiency improvements to Algorithm 916 [Zaghloul and\nAli 2011]. It is shown that the execution time required by the algorithm, when\nrun at its highest accuracy, may be improved by more than a factor of two. A\nbetter accuracy vs efficiency trade off scheme is also implemented; this\nrequires the user to supply the number of significant figures desired in the\ncomputed values as an extra input argument to the function. Using this\ntrade-off, it is shown that the efficiency of the algorithm may be further\nimproved significantly while maintaining reasonably accurate and safe results\nthat are free of the pitfalls and complete loss of accuracy seen in other\ncompetitive techniques. The current version of the code is provided in Matlab\nand Scilab in addition to a Fortran translation prepared to meet the needs of\nreal-world problems where very large numbers of function evaluations would\nrequire the use of a compiled language. To fulfill this last requirement, a\nrecently proposed reformed version of Humlicek's w4 routine, shown to maintain\nthe claimed accuracy of the algorithm over a wide and fine grid is implemented\nin the present Fortran translation for the case of 4 significant figures. This\nlatter modification assures the reliability of the code to be employed in the\nsolution of practical problems requiring numerous evaluation of the function\nfor applications tolerating low accuracy computations (<10-4).\n", "versions": [{"version": "v1", "created": "Tue, 26 May 2015 08:25:45 GMT"}], "update_date": "2015-05-27", "authors_parsed": [["Zaghloul", "Mofreh R.", ""]]}, {"id": "1505.07570", "submitter": "Shusen Wang", "authors": "Shusen Wang", "title": "A Practical Guide to Randomized Matrix Computations with MATLAB\n  Implementations", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.LG", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Matrix operations such as matrix inversion, eigenvalue decomposition,\nsingular value decomposition are ubiquitous in real-world applications.\nUnfortunately, many of these matrix operations so time and memory expensive\nthat they are prohibitive when the scale of data is large. In real-world\napplications, since the data themselves are noisy, machine-precision matrix\noperations are not necessary at all, and one can sacrifice a reasonable amount\nof accuracy for computational efficiency.\n  In recent years, a bunch of randomized algorithms have been devised to make\nmatrix computations more scalable. Mahoney (2011) and Woodruff (2014) have\nwritten excellent but very technical reviews of the randomized algorithms.\nDifferently, the focus of this manuscript is on intuition, algorithm\nderivation, and implementation. This manuscript should be accessible to people\nwith knowledge in elementary matrix algebra but unfamiliar with randomized\nmatrix computations. The algorithms introduced in this manuscript are all\nsummarized in a user-friendly way, and they can be implemented in lines of\nMATLAB code. The readers can easily follow the implementations even if they do\nnot understand the maths and algorithms.\n", "versions": [{"version": "v1", "created": "Thu, 28 May 2015 07:33:21 GMT"}, {"version": "v2", "created": "Wed, 3 Jun 2015 14:33:48 GMT"}, {"version": "v3", "created": "Sun, 7 Jun 2015 07:52:43 GMT"}, {"version": "v4", "created": "Wed, 29 Jul 2015 09:26:48 GMT"}, {"version": "v5", "created": "Mon, 17 Aug 2015 06:39:40 GMT"}, {"version": "v6", "created": "Tue, 3 Nov 2015 03:26:49 GMT"}], "update_date": "2015-11-04", "authors_parsed": [["Wang", "Shusen", ""]]}, {"id": "1505.07589", "submitter": "Paul Liu", "authors": "Chen Greif, Shiwen He, Paul Liu", "title": "SYM-ILDL: Incomplete $LDL^{T}$ Factorization of Symmetric Indefinite and\n  Skew-Symmetric Matrices", "comments": "19 pages, 3 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.NA math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  SYM-ILDL is a numerical software package that computes incomplete $LDL^{T}$\n(or `ILDL') factorizations of symmetric indefinite and real skew-symmetric\nmatrices. The core of the algorithm is a Crout variant of incomplete LU (ILU),\noriginally introduced and implemented for symmetric matrices by [Li and Saad,\nCrout versions of ILU factorization with pivoting for sparse symmetric\nmatrices, Transactions on Numerical Analysis 20, pp. 75--85, 2005]. Our code is\neconomical in terms of storage and it deals with real skew-symmetric matrices\nas well, in addition to symmetric ones. The package is written in C++ and it is\ntemplated, open source, and includes a MATLAB interface. The code includes\nbuilt-in RCM and AMD reordering, two equilibration strategies, threshold\nBunch-Kaufman pivoting and rook pivoting, as well as a wrapper to MC64, a\npopular matching based equilibration and reordering algorithm. We also include\ntwo built-in iterative solvers: SQMR preconditioned with ILDL, or MINRES\npreconditioned with a symmetric positive definite preconditioner based on the\nILDL factorization.\n", "versions": [{"version": "v1", "created": "Thu, 28 May 2015 08:25:45 GMT"}, {"version": "v2", "created": "Fri, 25 Mar 2016 00:19:02 GMT"}, {"version": "v3", "created": "Tue, 1 Nov 2016 23:54:16 GMT"}], "update_date": "2016-11-03", "authors_parsed": [["Greif", "Chen", ""], ["He", "Shiwen", ""], ["Liu", "Paul", ""]]}, {"id": "1505.08019", "submitter": "Fei Fei Shen", "authors": "Feifei Shen, Zhenjian Song, Congrui Wu, Jiaqi Geng, Qingyun Wang", "title": "Research on the fast Fourier transform of image based on GPU", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.CV", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Study of general purpose computation by GPU (Graphics Processing Unit) can\nimprove the image processing capability of micro-computer system. This paper\nstudies the parallelism of the different stages of decimation in time radix 2\nFFT algorithm, designs the butterfly and scramble kernels and implements 2D FFT\non GPU. The experiment result demonstrates the validity and advantage over\ngeneral CPU, especially in the condition of large input size. The approach can\nalso be generalized to other transforms alike.\n", "versions": [{"version": "v1", "created": "Fri, 29 May 2015 12:33:52 GMT"}], "update_date": "2015-06-01", "authors_parsed": [["Shen", "Feifei", ""], ["Song", "Zhenjian", ""], ["Wu", "Congrui", ""], ["Geng", "Jiaqi", ""], ["Wang", "Qingyun", ""]]}, {"id": "1505.08023", "submitter": "Meng Wu", "authors": "Meng Wu, Can Yang, Taoran Xiang, Daning Cheng", "title": "The Research and Optimization of Parallel Finite Element Algorithm based\n  on MiniFE", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Finite element method (FEM) is one of the most important numerical methods in\nmodern engineering design and analysis. Since traditional serial FEM is\ndifficult to solve large FE problems efficiently and accurately,\nhigh-performance parallel FEM has become one of the essential way to solve\npractical engineering problems. Based on MiniFE program, which is released by\nNational Energy Research Scientific Computing Center(NERSC), this work analyzes\nconcrete steps, key computing pattern and parallel mechanism of parallel FEM.\nAccording to experimental results, this work analyzes the proportion of\ncalculation amount of each module and concludes the main performance bottleneck\nof the program. Based on that, we optimize the MiniFE program on a server\nplatform. The optimization focuses on the bottleneck of the program - SpMV\nkernel, and uses an efficient storage format named BCRS. Moreover, an improving\nplan of hybrid MPI+OpenMP programming is provided. Experimental results show\nthat the optimized program performs better in both SpMV kernel and\nsynchronization. It can increase the performance of the program, on average, by\n8.31%. Keywords : finite element, parallel, MiniFE, SpMV, performance\noptimization\n", "versions": [{"version": "v1", "created": "Fri, 29 May 2015 12:44:04 GMT"}], "update_date": "2015-06-01", "authors_parsed": [["Wu", "Meng", ""], ["Yang", "Can", ""], ["Xiang", "Taoran", ""], ["Cheng", "Daning", ""]]}, {"id": "1505.08067", "submitter": "Mohamed Amine Bergach", "authors": "Mohamed Amine Bergach and Emilien Kofman and Robert de Simone and\n  Serge Tissot and Michel Syska", "title": "Efficient FFT mapping on GPU for radar processing application: modeling\n  and implementation", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.DC cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  General-purpose multiprocessors (as, in our case, Intel IvyBridge and Intel\nHaswell) increasingly add GPU computing power to the former multicore\narchitectures. When used for embedded applications (for us, Synthetic aperture\nradar) with intensive signal processing requirements, they must constantly\ncompute convolution algorithms, such as the famous Fast Fourier Transform. Due\nto its \"fractal\" nature (the typical butterfly shape, with larger FFTs defined\nas combination of smaller ones with auxiliary data array transpose functions),\none can hope to compute analytically the size of the largest FFT that can be\nperformed locally on an elementary GPU compute block. Then, the full\napplication must be organized around this given building block size. Now, due\nto phenomena involved in the data transfers between various memory levels\nacross CPUs and GPUs, the optimality of such a scheme is only loosely\npredictable (as communications tend to overcome in time the complexity of\ncomputations). Therefore a mix of (theoretical) analytic approach and\n(practical) runtime validation is here needed. As we shall illustrate, this\noccurs at both stage, first at the level of deciding on a given elementary FFT\nblock size, then at the full application level.\n", "versions": [{"version": "v1", "created": "Fri, 29 May 2015 14:45:03 GMT"}], "update_date": "2015-06-01", "authors_parsed": [["Bergach", "Mohamed Amine", ""], ["Kofman", "Emilien", ""], ["de Simone", "Robert", ""], ["Tissot", "Serge", ""], ["Syska", "Michel", ""]]}]