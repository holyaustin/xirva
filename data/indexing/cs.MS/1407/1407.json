[{"id": "1407.0039", "submitter": "Edinah Gnang K", "authors": "Edinah K. Gnang", "title": "Integer formula encoding SageTeX package", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS math.CO", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The paper describes a SageTeX implementation of an integer encoding\nprocedures.\n", "versions": [{"version": "v1", "created": "Fri, 27 Jun 2014 00:13:14 GMT"}], "update_date": "2014-07-02", "authors_parsed": [["Gnang", "Edinah K.", ""]]}, {"id": "1407.0904", "submitter": "Fabio Luporini", "authors": "Fabio Luporini, Ana Lucia Varbanescu, Florian Rathgeber,\n  Gheorghe-Teodor Bercea, J. Ramanujam, David A. Ham, Paul H.J. Kelly", "title": "COFFEE: an Optimizing Compiler for Finite Element Local Assembly", "comments": "Remove volume metadata", "journal-ref": null, "doi": "10.1145/2687415", "report-no": null, "categories": "cs.MS cs.CE cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The numerical solution of partial differential equations using the finite\nelement method is one of the key applications of high performance computing.\nLocal assembly is its characteristic operation. This entails the execution of a\nproblem-specific kernel to numerically evaluate an integral for each element in\nthe discretized problem domain. Since the domain size can be huge, executing\nefficient kernels is fundamental. Their op- timization is, however, a\nchallenging issue. Even though affine loop nests are generally present, the\nshort trip counts and the complexity of mathematical expressions make it hard\nto determine a single or unique sequence of successful transformations.\nTherefore, we present the design and systematic evaluation of COF- FEE, a\ndomain-specific compiler for local assembly kernels. COFFEE manipulates\nabstract syntax trees generated from a high-level domain-specific language for\nPDEs by introducing domain-aware composable optimizations aimed at improving\ninstruction-level parallelism, especially SIMD vectorization, and register\nlocality. It then generates C code including vector intrinsics. Experiments\nusing a range of finite-element forms of increasing complexity show that\nsignificant performance improvement is achieved.\n", "versions": [{"version": "v1", "created": "Thu, 3 Jul 2014 13:01:45 GMT"}, {"version": "v2", "created": "Fri, 4 Jul 2014 09:12:46 GMT"}], "update_date": "2017-05-11", "authors_parsed": [["Luporini", "Fabio", ""], ["Varbanescu", "Ana Lucia", ""], ["Rathgeber", "Florian", ""], ["Bercea", "Gheorghe-Teodor", ""], ["Ramanujam", "J.", ""], ["Ham", "David A.", ""], ["Kelly", "Paul H. J.", ""]]}, {"id": "1407.2905", "submitter": "Jed Brown", "authors": "Jed Brown and Matthew G. Knepley and Barry F. Smith", "title": "Run-time extensibility and librarization of simulation software", "comments": "6 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.SE cs.CE cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Build-time configuration and environment assumptions are hampering progress\nand usability in scientific software. That which would be utterly unacceptable\nin non-scientific software somehow passes for the norm in scientific packages.\nThe community needs reusable software packages that are easy use and flexible\nenough to accommodate next-generation simulation and analysis demands.\n", "versions": [{"version": "v1", "created": "Thu, 10 Jul 2014 19:08:32 GMT"}], "update_date": "2014-07-11", "authors_parsed": [["Brown", "Jed", ""], ["Knepley", "Matthew G.", ""], ["Smith", "Barry F.", ""]]}, {"id": "1407.2925", "submitter": "Stefan Cruceanu Gicu", "authors": "Stelian Ion, Dorin Marinescu, Stefan-Gicu Cruceanu, Virgil Iordache", "title": "A data porting tool for coupling models with different discretization\n  needs", "comments": null, "journal-ref": "Environmental Modelling & Software 62 (2014) 240-252", "doi": "10.1016/j.envsoft.2014.09.012", "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The presented work is part of a larger research program dealing with\ndeveloping tools for coupling biogeochemical models in contaminated landscapes.\nThe specific objective of this article is to provide the researchers a tool to\nbuild hexagonal raster using information from a rectangular raster data (e.g.\nGIS format), data porting. This tool involves a computational algorithm and an\nopen source software (written in C). The method of extending the reticulated\nfunctions defined on 2D networks is an essential key of this algorithm and can\nalso be used for other purposes than data porting. The algorithm allows one to\nbuild the hexagonal raster with a cell size independent from the geometry of\nthe rectangular raster. The extended function is a bi-cubic spline which can\nexactly reconstruct polynomials up to degree three in each variable. We\nvalidate the method by analyzing errors in some theoretical case studies\nfollowed by other studies with real terrain elevation data. We also introduce\nand briefly present an iterative water routing method and use it for validation\non a case with concrete terrain data.\n", "versions": [{"version": "v1", "created": "Wed, 9 Jul 2014 10:45:40 GMT"}], "update_date": "2020-09-03", "authors_parsed": [["Ion", "Stelian", ""], ["Marinescu", "Dorin", ""], ["Cruceanu", "Stefan-Gicu", ""], ["Iordache", "Virgil", ""]]}, {"id": "1407.3189", "submitter": "Lukas Einkemmer", "authors": "Lukas Einkemmer", "title": "A modern resistive magnetohydrodynamics solver using C++ and the Boost\n  library", "comments": null, "journal-ref": "Computer Physics Communications, Volume 206, September 2016, Pages\n  69-77", "doi": "10.1016/j.cpc.2016.04.015", "report-no": null, "categories": "cs.NA cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this paper we describe the implementation of our C++ resistive\nmagnetohydrodynamics solver. The framework developed facilitates the separation\nof the code implementing the specific numerical method and the physical model,\non the one hand, from the handling of boundary conditions and the management of\nthe computational domain, on the other hand. In particular, this will allow us\nto use finite difference stencils which are only defined in the interior of the\ndomain (the boundary conditions are handled automatically). We will discuss\nthis and other design considerations and their impact on performance in some\ndetail. In addition, we provide a documentation of the code developed and\ndemonstrate that a performance comparable to Fortran can be achieved, while\nstill maintaining a maximum of code readability and extensibility.\n", "versions": [{"version": "v1", "created": "Fri, 11 Jul 2014 15:05:33 GMT"}], "update_date": "2017-01-06", "authors_parsed": [["Einkemmer", "Lukas", ""]]}, {"id": "1407.3262", "submitter": "Brice Boyer", "authors": "Brice Boyer, Jean-Guillaume Dumas (LJK), Pascal Giorgi (LIRMM),\n  Cl\\'ement Pernet (INRIA Grenoble Rh\\^one-Alpes / LIG Laboratoire\n  d'Informatique de Grenoble), B. David Saunders (CIS)", "title": "Elements of Design for Containers and Solutions in the LinBox Library", "comments": "8 pages, 4th International Congress on Mathematical Software, Seoul :\n  Korea, Republic Of (2014)", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.SC cs.SE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We describe in this paper new design techniques used in the \\cpp exact linear\nalgebra library \\linbox, intended to make the library safer and easier to use,\nwhile keeping it generic and efficient. First, we review the new simplified\nstructure for containers, based on our \\emph{founding scope allocation} model.\nWe explain design choices and their impact on coding: unification of our matrix\nclasses, clearer model for matrices and submatrices, \\etc Then we present a\nvariation of the \\emph{strategy} design pattern that is comprised of a\ncontroller--plugin system: the controller (solution) chooses among plug-ins\n(algorithms) that always call back the controllers for subtasks. We give\nexamples using the solution \\mul. Finally we present a benchmark architecture\nthat serves two purposes: Providing the user with easier ways to produce\ngraphs; Creating a framework for automatically tuning the library and\nsupporting regression testing.\n", "versions": [{"version": "v1", "created": "Wed, 25 Jun 2014 19:38:09 GMT"}], "update_date": "2014-07-14", "authors_parsed": [["Boyer", "Brice", "", "LJK"], ["Dumas", "Jean-Guillaume", "", "LJK"], ["Giorgi", "Pascal", "", "LIRMM"], ["Pernet", "Cl\u00e9ment", "", "INRIA Grenoble Rh\u00f4ne-Alpes / LIG Laboratoire\n  d'Informatique de Grenoble"], ["Saunders", "B. David", "", "CIS"]]}, {"id": "1407.3383", "submitter": "Joris van der Hoeven", "authors": "Joris van der Hoeven, Gr\\'egoire Lecerf, Guillaume Quintin", "title": "Modular SIMD arithmetic in Mathemagix", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Modular integer arithmetic occurs in many algorithms for computer algebra,\ncryptography, and error correcting codes. Although recent microprocessors\ntypically offer a wide range of highly optimized arithmetic functions, modular\ninteger operations still require dedicated implementations. In this article, we\nsurvey existing algorithms for modular integer arithmetic, and present detailed\nvectorized counterparts. We also present several applications, such as fast\nmodular Fourier transforms and multiplication of integer polynomials and\nmatrices. The vectorized algorithms have been implemented in C++ inside the\nfree computer algebra and analysis system Mathemagix. The performance of our\nimplementation is illustrated by various benchmarks.\n", "versions": [{"version": "v1", "created": "Sat, 12 Jul 2014 13:21:01 GMT"}], "update_date": "2014-07-15", "authors_parsed": [["van der Hoeven", "Joris", ""], ["Lecerf", "Gr\u00e9goire", ""], ["Quintin", "Guillaume", ""]]}, {"id": "1407.5953", "submitter": "Andreas Enge", "authors": "Andreas Enge (INRIA Bordeaux - Sud-Ouest, IMB), J\\'er\\^ome Milan\n  (INRIA Futurs)", "title": "Implementing cryptographic pairings at standard security levels", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "math.NT cs.CR cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This study reports on an implementation of cryptographic pairings in a\ngeneral purpose computer algebra system. For security levels equivalent to the\ndifferent AES flavours, we exhibit suitable curves in parametric families and\nshow that optimal ate and twisted ate pairings exist and can be efficiently\nevaluated. We provide a correct description of Miller's algorithm for signed\nbinary expansions such as the NAF and extend a recent variant due to Boxall et\nal. to addition-subtraction chains. We analyse and compare several algorithms\nproposed in the literature for the final exponentiation. Finally, we ive\nrecommendations on which curve and pairing to choose at each security level.\n", "versions": [{"version": "v1", "created": "Tue, 22 Jul 2014 17:42:29 GMT"}], "update_date": "2014-07-23", "authors_parsed": [["Enge", "Andreas", "", "INRIA Bordeaux - Sud-Ouest, IMB"], ["Milan", "J\u00e9r\u00f4me", "", "INRIA Futurs"]]}, {"id": "1407.6245", "submitter": "Fran\\c{c}ois Boulogne", "authors": "Stefan van der Walt, Johannes L. Sch\\\"onberger, Juan Nunez-Iglesias,\n  Fran\\c{c}ois Boulogne, Joshua D. Warner, Neil Yager, Emmanuelle Gouillart,\n  Tony Yu, the scikit-image contributors", "title": "scikit-image: Image processing in Python", "comments": "Distributed under Creative Commons CC-BY 4.0. Published in PeerJ", "journal-ref": null, "doi": "10.7717/peerj.453", "report-no": null, "categories": "cs.MS cs.CV", "license": "http://creativecommons.org/licenses/by/3.0/", "abstract": "  scikit-image is an image processing library that implements algorithms and\nutilities for use in research, education and industry applications. It is\nreleased under the liberal \"Modified BSD\" open source license, provides a\nwell-documented API in the Python programming language, and is developed by an\nactive, international team of collaborators. In this paper we highlight the\nadvantages of open source to achieve the goals of the scikit-image library, and\nwe showcase several real-world image processing applications that use\nscikit-image.\n", "versions": [{"version": "v1", "created": "Wed, 23 Jul 2014 14:55:21 GMT"}], "update_date": "2014-07-24", "authors_parsed": [["van der Walt", "Stefan", ""], ["Sch\u00f6nberger", "Johannes L.", ""], ["Nunez-Iglesias", "Juan", ""], ["Boulogne", "Fran\u00e7ois", ""], ["Warner", "Joshua D.", ""], ["Yager", "Neil", ""], ["Gouillart", "Emmanuelle", ""], ["Yu", "Tony", ""], ["contributors", "the scikit-image", ""]]}, {"id": "1407.6954", "submitter": "Robert Kl\\\"ofkorn", "authors": "Martin Alk\\\"amper, Andreas Dedner, Robert Kl\\\"ofkorn, and Martin Nolte", "title": "The DUNE-ALUGrid Module", "comments": "25 pages, 11 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this paper we present the new DUNE-ALUGrid module. This module contains a\nmajor overhaul of the sources from the ALUgrid library and the binding to the\nDUNE software framework. The main changes include user defined load balancing,\nparallel grid construction, and an redesign of the 2d grid which can now also\nbe used for parallel computations. In addition many improvements have been\nintroduced into the code to increase the parallel efficiency and to decrease\nthe memory footprint.\n  The original ALUGrid library is widely used within the DUNE community due to\nits good parallel performance for problems requiring local adaptivity and\ndynamic load balancing. Therefore, this new model will benefit a number of DUNE\nusers. In addition we have added features to increase the range of problems for\nwhich the grid manager can be used, for example, introducing a 3d tetrahedral\ngrid using a parallel newest vertex bisection algorithm for conforming grid\nrefinement. In this paper we will discuss the new features, extensions to the\nDUNE interface, and explain for various examples how the code is used in\nparallel environments.\n", "versions": [{"version": "v1", "created": "Fri, 25 Jul 2014 16:12:26 GMT"}, {"version": "v2", "created": "Wed, 30 Jul 2014 08:02:59 GMT"}, {"version": "v3", "created": "Sat, 15 Aug 2015 11:23:22 GMT"}], "update_date": "2015-08-18", "authors_parsed": [["Alk\u00e4mper", "Martin", ""], ["Dedner", "Andreas", ""], ["Kl\u00f6fkorn", "Robert", ""], ["Nolte", "Martin", ""]]}, {"id": "1407.7786", "submitter": "John Pearson", "authors": "John W. Pearson, Sheehan Olver, and Mason A. Porter", "title": "Numerical Methods for the Computation of the Confluent and Gauss\n  Hypergeometric Functions", "comments": "42 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "math.NA cs.MS math-ph math.MP physics.comp-ph", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The two most commonly used hypergeometric functions are the confluent\nhypergeometric function and the Gauss hypergeometric function. We review the\navailable techniques for accurate, fast, and reliable computation of these two\nhypergeometric functions in different parameter and variable regimes. The\nmethods that we investigate include Taylor and asymptotic series computations,\nGauss-Jacobi quadrature, numerical solution of differential equations,\nrecurrence relations, and others. We discuss the results of numerical\nexperiments used to determine the best methods, in practice, for each parameter\nand variable regime considered. We provide 'roadmaps' with our recommendation\nfor which methods should be used in each situation.\n", "versions": [{"version": "v1", "created": "Tue, 29 Jul 2014 17:30:23 GMT"}, {"version": "v2", "created": "Fri, 28 Aug 2015 17:54:25 GMT"}], "update_date": "2015-08-31", "authors_parsed": [["Pearson", "John W.", ""], ["Olver", "Sheehan", ""], ["Porter", "Mason A.", ""]]}, {"id": "1407.8078", "submitter": "Eric Polizzi", "authors": "Stefan Guettel, Eric Polizzi, Ping Tak Peter Tang, Gautier Viaud", "title": "Zolotarev Quadrature Rules and Load Balancing for the FEAST Eigensolver", "comments": "22 pages, 8 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "math.NA cs.MS cs.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The FEAST method for solving large sparse eigenproblems is equivalent to\nsubspace iteration with an approximate spectral projector and implicit\northogonalization. This relation allows to characterize the convergence of this\nmethod in terms of the error of a certain rational approximant to an indicator\nfunction. We propose improved rational approximants leading to FEAST variants\nwith faster convergence, in particular, when using rational approximants based\non the work of Zolotarev. Numerical experiments demonstrate the possible\ncomputational savings especially for pencils whose eigenvalues are not well\nseparated and when the dimension of the search space is only slightly larger\nthan the number of wanted eigenvalues. The new approach improves both\nconvergence robustness and load balancing when FEAST runs on multiple search\nintervals in parallel.\n", "versions": [{"version": "v1", "created": "Wed, 30 Jul 2014 15:13:03 GMT"}], "update_date": "2014-07-31", "authors_parsed": [["Guettel", "Stefan", ""], ["Polizzi", "Eric", ""], ["Tang", "Ping Tak Peter", ""], ["Viaud", "Gautier", ""]]}]