[{"id": "1512.00066", "submitter": "Edgar Solomonik", "authors": "Edgar Solomonik and Torsten Hoefler", "title": "Sparse Tensor Algebra as a Parallel Programming Model", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Dense and sparse tensors allow the representation of most bulk data\nstructures in computational science applications. We show that sparse tensor\nalgebra can also be used to express many of the transformations on these\ndatasets, especially those which are parallelizable. Tensor computations are a\nnatural generalization of matrix and graph computations. We extend the usual\nbasic operations of tensor summation and contraction to arbitrary functions,\nand further operations such as reductions and mapping. The expression of these\ntransformations in a high-level sparse linear algebra domain specific language\nallows our framework to understand their properties at runtime to select the\npreferred communication-avoiding algorithm. To demonstrate the efficacy of our\napproach, we show how key graph algorithms as well as common numerical kernels\ncan be succinctly expressed using our interface and provide performance results\nof a general library implementation.\n", "versions": [{"version": "v1", "created": "Mon, 30 Nov 2015 22:08:23 GMT"}], "update_date": "2015-12-02", "authors_parsed": [["Solomonik", "Edgar", ""], ["Hoefler", "Torsten", ""]]}, {"id": "1512.01274", "submitter": "Mu Li", "authors": "Tianqi Chen, Mu Li, Yutian Li, Min Lin, Naiyan Wang, Minjie Wang,\n  Tianjun Xiao, Bing Xu, Chiyuan Zhang and Zheng Zhang", "title": "MXNet: A Flexible and Efficient Machine Learning Library for\n  Heterogeneous Distributed Systems", "comments": "In Neural Information Processing Systems, Workshop on Machine\n  Learning Systems, 2016", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.LG cs.MS cs.NE", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  MXNet is a multi-language machine learning (ML) library to ease the\ndevelopment of ML algorithms, especially for deep neural networks. Embedded in\nthe host language, it blends declarative symbolic expression with imperative\ntensor computation. It offers auto differentiation to derive gradients. MXNet\nis computation and memory efficient and runs on various heterogeneous systems,\nranging from mobile devices to distributed GPU clusters.\n  This paper describes both the API design and the system implementation of\nMXNet, and explains how embedding of both symbolic expression and tensor\noperation is handled in a unified fashion. Our preliminary experiments reveal\npromising results on large scale deep neural network applications using\nmultiple GPU machines.\n", "versions": [{"version": "v1", "created": "Thu, 3 Dec 2015 22:49:21 GMT"}], "update_date": "2015-12-07", "authors_parsed": [["Chen", "Tianqi", ""], ["Li", "Mu", ""], ["Li", "Yutian", ""], ["Lin", "Min", ""], ["Wang", "Naiyan", ""], ["Wang", "Minjie", ""], ["Xiao", "Tianjun", ""], ["Xu", "Bing", ""], ["Zhang", "Chiyuan", ""], ["Zhang", "Zheng", ""]]}, {"id": "1512.02960", "submitter": "Vladimir V Kisil", "authors": "Vladimir V. Kisil", "title": "An Extension of Moebius--Lie Geometry with Conformal Ensembles of Cycles\n  and Its Implementation in a GiNaC Library", "comments": "LaTeX 16pp+111pp of appendices, including 10 PDF graphic files and\n  program code; v2: major revision of the paper, code in v3.1; v3: formal\n  definition of the extended geometry, connection with integrable systems, code\n  in v3.2rc1", "journal-ref": "Proc. Int. Geom. Cent. v.11 (2018), n.3, pp.45-67", "doi": "10.15673/tmgc.v11i3.1203", "report-no": null, "categories": "cs.CG cs.MS cs.SC math.DG", "license": "http://creativecommons.org/licenses/by-nc-sa/4.0/", "abstract": "  We propose to consider ensembles of cycles (quadrics), which are\ninterconnected through conformal-invariant geometric relations (e.g. \"to be\northogonal\", \"to be tangent\", etc.), as new objects in an extended Moebius--Lie\ngeometry. It was recently demonstrated in several related papers, that such\nensembles of cycles naturally parameterise many other conformally-invariant\nobjects, e.g. loxodromes or continued fractions. The paper describes a method,\nwhich reduces a collection of conformally invariant geometric relations to a\nsystem of linear equations, which may be accompanied by one fixed quadratic\nrelation.\n  To show its usefulness, the method is implemented as a C++ library. It\noperates with numeric and symbolic data of cycles in spaces of arbitrary\ndimensionality and metrics with any signatures. Numeric calculations can be\ndone in exact or approximate arithmetic. In the two- and three-dimensional\ncases illustrations and animations can be produced. An interactive Python\nwrapper of the library is provided as well.\n", "versions": [{"version": "v1", "created": "Wed, 9 Dec 2015 17:32:30 GMT"}, {"version": "v2", "created": "Mon, 19 Feb 2018 09:09:18 GMT"}, {"version": "v3", "created": "Sun, 19 Aug 2018 20:16:48 GMT"}], "update_date": "2019-02-05", "authors_parsed": [["Kisil", "Vladimir V.", ""]]}, {"id": "1512.03487", "submitter": "Peter Boyle", "authors": "Peter Boyle, Azusa Yamaguchi, Guido Cossu, Antonin Portelli", "title": "Grid: A next generation data parallel C++ QCD library", "comments": "14 pages, Lattice 2015", "journal-ref": null, "doi": null, "report-no": null, "categories": "hep-lat cs.DC cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this proceedings we discuss the motivation, implementation details, and\nperformance of a new physics code base called Grid. It is intended to be more\nperformant, more general, but similar in spirit to QDP++\\cite{QDP}. Our\napproach is to engineer the basic type system to be consistently fast, rather\nthan bolt on a few optimised routines, and we are attempt to write all our\noptimised routines directly in the Grid framework. It is hoped this will\ndeliver best known practice performance across the next generation of\nsupercomputers, which will provide programming challenges to traditional scalar\ncodes.\n  We illustrate the programming patterns used to implement our goals, and\nadvances in productivity that have been enabled by using new features in C++11.\n", "versions": [{"version": "v1", "created": "Thu, 10 Dec 2015 23:51:19 GMT"}], "update_date": "2015-12-14", "authors_parsed": [["Boyle", "Peter", ""], ["Yamaguchi", "Azusa", ""], ["Cossu", "Guido", ""], ["Portelli", "Antonin", ""]]}, {"id": "1512.06136", "submitter": "Carsten Gr\\\"aser", "authors": "Christian Engwer, Carsten Gr\\\"aser, Steffen M\\\"uthing, Oliver Sander", "title": "The interface for functions in the dune-functions module", "comments": "The C++ source code of tests is attached to pdf file of the paper", "journal-ref": "Archive of Numerical Software 5 (2017) 95-109", "doi": "10.11588/ans.2017.1.27683", "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The dune-functions dune module introduces a new programmer interface for\ndiscrete and non-discrete functions. Unlike the previous interfaces considered\nin the existing dune modules, it is based on overloading operator(), and\nreturning values by-value. This makes user code much more readable, and allows\nthe incorporation of newer C++ features such as lambda expressions. Run-time\npolymorphism is implemented not by inheritance, but by type erasure,\ngeneralizing the ideas of the std::function class from the C++11 standard\nlibrary. We describe the new interface, show its possibilities, and measure the\nperformance impact of type erasure and return-by-value.\n", "versions": [{"version": "v1", "created": "Fri, 18 Dec 2015 21:09:10 GMT"}], "update_date": "2017-04-10", "authors_parsed": [["Engwer", "Christian", ""], ["Gr\u00e4ser", "Carsten", ""], ["M\u00fcthing", "Steffen", ""], ["Sander", "Oliver", ""]]}, {"id": "1512.08790", "submitter": "Ayomide Adedayo", "authors": "A. O. Anidu, S.A. Arekete, A. O. Adedayo, and A. O. Adekoya", "title": "Dynamic Computation of Runge Kutta Fourth Order Algorithm for First and\n  Second Order Ordinary Differential Equation Using Java", "comments": "14 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Differential equations arise in mathematics, physics,medicine, pharmacology,\ncommunications, image processing and animation, etc. An Ordinary Differential\nEquation (ODE) is a differential equation if it involves derivatives with\nrespect to only one independent variable which can be studied from different\nperspectives, such as: analytical methods, graphical methods and numerical\nmethods. This research paper therefore revises the standard Runge - Kutta\nfourth order algorithm by using compiler techniques to dynamically evaluate the\ninputs and implement the algorithm for both first and second order derivatives\nof the ODE. We have been able to develop and implement the software that can be\nused to evaluate inputs and compute solutions (approximately and analytically)\nfor the ODE function at a more efficient rate than the traditional method.\n", "versions": [{"version": "v1", "created": "Sat, 26 Dec 2015 18:18:54 GMT"}], "update_date": "2015-12-31", "authors_parsed": [["Anidu", "A. O.", ""], ["Arekete", "S. A.", ""], ["Adedayo", "A. O.", ""], ["Adekoya", "A. O.", ""]]}]