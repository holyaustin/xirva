[{"id": "1206.0111", "submitter": "Bjoern Andres", "authors": "Bjoern Andres, Thorsten Beier, Joerg H. Kappes", "title": "OpenGM: A C++ Library for Discrete Graphical Models", "comments": "5 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.AI cs.MS stat.ML", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  OpenGM is a C++ template library for defining discrete graphical models and\nperforming inference on these models, using a wide range of state-of-the-art\nalgorithms. No restrictions are imposed on the factor graph to allow for\nhigher-order factors and arbitrary neighborhood structures. Large models with\nrepetitive structure are handled efficiently because (i) functions that occur\nrepeatedly need to be stored only once, and (ii) distinct functions can be\nimplemented differently, using different encodings alongside each other in the\nsame model. Several parametric functions (e.g. metrics), sparse and dense value\ntables are provided and so is an interface for custom C++ code. Algorithms are\nseparated by design from the representation of graphical models and are easily\nexchangeable. OpenGM, its algorithms, HDF5 file format and command line tools\nare modular and extendible.\n", "versions": [{"version": "v1", "created": "Fri, 1 Jun 2012 07:36:54 GMT"}], "update_date": "2012-06-04", "authors_parsed": [["Andres", "Bjoern", ""], ["Beier", "Thorsten", ""], ["Kappes", "Joerg H.", ""]]}, {"id": "1206.0141", "submitter": "Josef Urban", "authors": "Josef Urban", "title": "Parallelizing Mizar", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.LO", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper surveys and describes the implementation of parallelization of the\nMizar proof checking and of related Mizar utilities. The implementation makes\nuse of Mizar's compiler-like division into several relatively independent\npasses, with typically quite different processing speeds. The information\nproduced in earlier (typically much faster) passes can be used to parallelize\nthe later (typically much slower) passes. The parallelization now works by\nsplitting the formalization into a suitable number of pieces that are processed\nin parallel, assembling from them together the required results. The\nimplementation is evaluated on examples from the Mizar library, and future\nextensions are discussed.\n", "versions": [{"version": "v1", "created": "Fri, 1 Jun 2012 10:36:53 GMT"}, {"version": "v2", "created": "Thu, 22 May 2014 09:34:45 GMT"}], "update_date": "2014-05-23", "authors_parsed": [["Urban", "Josef", ""]]}, {"id": "1206.1187", "submitter": "Gleb Beliakov", "authors": "Gleb Beliakov, Michael Johnstone, Doug Creighton, Tim Wilkin", "title": "Parallel random variates generator for GPUs based on normal numbers", "comments": "preprint, 18 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.DC cs.NA math.NA math.PR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Pseudorandom number generators are required for many computational tasks,\nsuch as stochastic modelling and simulation. This paper investigates the serial\nCPU and parallel GPU implementation of a Linear Congruential Generator based on\nthe binary representation of the normal number $\\alpha_{2,3}$. We adapted two\nmethods of modular reduction which allowed us to perform most operations in\n64-bit integer arithmetic, improving on the original implementation based on\n106-bit double-double operations. We found that our implementation is faster\nthan existing methods in literature, and our generation rate is close to the\nlimiting rate imposed by the efficiency of writing to a GPU's global memory.\n", "versions": [{"version": "v1", "created": "Wed, 6 Jun 2012 11:30:42 GMT"}, {"version": "v2", "created": "Fri, 22 Jun 2012 04:42:05 GMT"}], "update_date": "2012-06-25", "authors_parsed": [["Beliakov", "Gleb", ""], ["Johnstone", "Michael", ""], ["Creighton", "Doug", ""], ["Wilkin", "Tim", ""]]}, {"id": "1206.3215", "submitter": "Benson Muite", "authors": "B. Cloutier and B. K. Muite and P. Rigge", "title": "Performance of FORTRAN and C GPU Extensions for a Benchmark Suite of\n  Fourier Pseudospectral Algorithms", "comments": "Revised version. New title. Forthcoming in proceedings of the\n  Symposium on Application Accelerators in High-Performance computing (SAAHPC\n  2012). Related programs are available for download", "journal-ref": null, "doi": null, "report-no": null, "categories": "physics.comp-ph cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  A comparison of PGI OpenACC, FORTRAN CUDA, and Nvidia CUDA pseudospectral\nmethods on a single GPU and GCC FORTRAN on single and multiple CPU cores is\nreported. The GPU implementations use CuFFT and the CPU implementations use\nFFTW. Porting pre-existing FORTRAN codes to utilize a GPUs is efficient and\neasy to implement with OpenACC and CUDA FORTRAN. Example programs are provided.\n", "versions": [{"version": "v1", "created": "Thu, 14 Jun 2012 19:07:42 GMT"}, {"version": "v2", "created": "Sun, 12 Aug 2012 18:20:23 GMT"}], "update_date": "2012-08-14", "authors_parsed": [["Cloutier", "B.", ""], ["Muite", "B. K.", ""], ["Rigge", "P.", ""]]}, {"id": "1206.5754", "submitter": "Aki Vehtari", "authors": "Jarno Vanhatalo, Jaakko Riihim\\\"aki, Jouni Hartikainen, Pasi\n  Jyl\\\"anki, Ville Tolvanen and Aki Vehtari", "title": "Bayesian Modeling with Gaussian Processes using the GPstuff Toolbox", "comments": "- Updated according to GPstuff 4.6. Added, e.g., Pareto smoothed\n  importance sampling", "journal-ref": null, "doi": null, "report-no": null, "categories": "stat.ML cs.AI cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Gaussian processes (GP) are powerful tools for probabilistic modeling\npurposes. They can be used to define prior distributions over latent functions\nin hierarchical Bayesian models. The prior over functions is defined implicitly\nby the mean and covariance function, which determine the smoothness and\nvariability of the function. The inference can then be conducted directly in\nthe function space by evaluating or approximating the posterior process.\nDespite their attractive theoretical properties GPs provide practical\nchallenges in their implementation. GPstuff is a versatile collection of\ncomputational tools for GP models compatible with Linux and Windows MATLAB and\nOctave. It includes, among others, various inference methods, sparse\napproximations and tools for model assessment. In this work, we review these\ntools and demonstrate the use of GPstuff in several models.\n", "versions": [{"version": "v1", "created": "Mon, 25 Jun 2012 18:19:45 GMT"}, {"version": "v2", "created": "Fri, 5 Oct 2012 12:44:54 GMT"}, {"version": "v3", "created": "Fri, 22 Mar 2013 08:01:15 GMT"}, {"version": "v4", "created": "Fri, 26 Apr 2013 06:39:27 GMT"}, {"version": "v5", "created": "Tue, 15 Apr 2014 08:53:01 GMT"}, {"version": "v6", "created": "Wed, 15 Jul 2015 13:04:29 GMT"}], "update_date": "2015-07-16", "authors_parsed": [["Vanhatalo", "Jarno", ""], ["Riihim\u00e4ki", "Jaakko", ""], ["Hartikainen", "Jouni", ""], ["Jyl\u00e4nki", "Pasi", ""], ["Tolvanen", "Ville", ""], ["Vehtari", "Aki", ""]]}, {"id": "1206.6466", "submitter": "Lawrence McAfee", "authors": "Lawrence McAfee (Stanford University), Kunle Olukotun (Stanford\n  University)", "title": "Utilizing Static Analysis and Code Generation to Accelerate Neural\n  Networks", "comments": "Appears in Proceedings of the 29th International Conference on\n  Machine Learning (ICML 2012)", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.NE cs.MS cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  As datasets continue to grow, neural network (NN) applications are becoming\nincreasingly limited by both the amount of available computational power and\nthe ease of developing high-performance applications. Researchers often must\nhave expert systems knowledge to make their algorithms run efficiently.\nAlthough available computing power increases rapidly each year, algorithm\nefficiency is not able to keep pace due to the use of general purpose\ncompilers, which are not able to fully optimize specialized application\ndomains. Within the domain of NNs, we have the added knowledge that network\narchitecture remains constant during training, meaning the architecture's data\nstructure can be statically optimized by a compiler. In this paper, we present\nSONNC, a compiler for NNs that utilizes static analysis to generate optimized\nparallel code. We show that SONNC's use of static optimizations make it able to\noutperform hand-optimized C++ code by up to 7.8X, and MATLAB code by up to 24X.\nAdditionally, we show that use of SONNC significantly reduces code complexity\nwhen using structurally sparse networks.\n", "versions": [{"version": "v1", "created": "Wed, 27 Jun 2012 19:59:59 GMT"}], "update_date": "2012-07-03", "authors_parsed": [["McAfee", "Lawrence", "", "Stanford University"], ["Olukotun", "Kunle", "", "Stanford\n  University"]]}]