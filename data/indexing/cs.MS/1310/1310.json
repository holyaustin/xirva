[{"id": "1310.0056", "submitter": "Jan Verschelde", "authors": "Jan Verschelde", "title": "Modernizing PHCpack through phcpy", "comments": "Part of the Proceedings of the 6th European Conference on Python in\n  Science (EuroSciPy 2013), Pierre de Buyl and Nelle Varoquaux editors, (2014)", "journal-ref": null, "doi": null, "report-no": "euroscipy-proceedings2013-11", "categories": "cs.MS cs.SC math.AG math.NA", "license": "http://creativecommons.org/licenses/by/3.0/", "abstract": "  PHCpack is a large software package for solving systems of polynomial\nequations. The executable phc is menu driven and file oriented. This paper\ndescribes the development of phcpy, a Python interface to PHCpack. Instead of\nnavigating through menus, users of phcpy solve systems in the Python shell or\nvia scripts. Persistent objects replace intermediate files.\n", "versions": [{"version": "v1", "created": "Mon, 30 Sep 2013 21:05:03 GMT"}, {"version": "v2", "created": "Tue, 29 Apr 2014 15:00:39 GMT"}], "update_date": "2014-04-30", "authors_parsed": [["Verschelde", "Jan", ""]]}, {"id": "1310.1191", "submitter": "Krzysztof Bana\\'s", "authors": "Krzysztof Bana\\'s and Przemys{\\l}aw P{\\l}aszewski and Pawe{\\l}\n  Macio{\\l}", "title": "Numerical integration on GPUs for higher order finite elements", "comments": null, "journal-ref": "Computers and Mathematics with Applications, Volume 67, Issue 6,\n  April 2014, Pages 1319-1344", "doi": "10.1016/j.camwa.2014.01.021", "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The paper considers the problem of implementation on graphics processors of\nnumerical integration routines for higher order finite element approximations.\nThe design of suitable GPU kernels is investigated in the context of general\npurpose integration procedures, as well as particular example applications. The\nmost important characteristic of the problem investigated is the large\nvariation of required processor and memory resources associated with different\ndegrees of approximating polynomials. The questions that we try to answer are\nwhether it is possible to design a single integration kernel for different GPUs\nand different orders of approximation and what performance can be expected in\nsuch a case.\n", "versions": [{"version": "v1", "created": "Fri, 4 Oct 2013 07:50:02 GMT"}], "update_date": "2014-03-03", "authors_parsed": [["Bana\u015b", "Krzysztof", ""], ["P\u0142aszewski", "Przemys\u0142aw", ""], ["Macio\u0142", "Pawe\u0142", ""]]}, {"id": "1310.1194", "submitter": "Krzysztof Bana\\'s", "authors": "Filip Kru\\.zel and Krzysztof Bana\\'s", "title": "Vectorized OpenCL implementation of numerical integration for higher\n  order finite elements", "comments": "published online in Computers and Mathematics with Applications:\n  http://www.sciencedirect.com/science/article/pii/S089812211300521X", "journal-ref": "Computers & Mathematics with Applications, Volume 66, Issue 10,\n  December 2013, Pages 2030-2044", "doi": "10.1016/j.camwa.2013.08.026", "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In our work we analyze computational aspects of the problem of numerical\nintegration in finite element calculations and consider an OpenCL\nimplementation of related algorithms for processors with wide vector registers.\n  As a platform for testing the implementation we choose the PowerXCell\nprocessor, being an example of the Cell Broadband Engine (CellBE) architecture.\nAlthough the processor is considered old for today's standards (its design\ndates back to year 2001), we investigate its performance due to two features\nthat it shares with recent Xeon Phi family of coprocessors: wide vector units\nand relatively slow connection of computing cores with main global memory. The\nperformed analysis of parallelization options can also be used for designing\nnumerical integration algorithms for other processors with vector registers,\nsuch as contemporary x86 microprocessors.\n", "versions": [{"version": "v1", "created": "Fri, 4 Oct 2013 08:08:04 GMT"}], "update_date": "2014-03-03", "authors_parsed": [["Kru\u017cel", "Filip", ""], ["Bana\u015b", "Krzysztof", ""]]}, {"id": "1310.2805", "submitter": "Josef Urban", "authors": "Cezary Kaliszyk and Josef Urban", "title": "MizAR 40 for Mizar 40", "comments": null, "journal-ref": "J. Automated Reasoning 55(3): 245-256 (2015)", "doi": "10.1007/s10817-015-9330-8", "report-no": null, "categories": "cs.AI cs.DL cs.LG cs.LO cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  As a present to Mizar on its 40th anniversary, we develop an AI/ATP system\nthat in 30 seconds of real time on a 14-CPU machine automatically proves 40% of\nthe theorems in the latest official version of the Mizar Mathematical Library\n(MML). This is a considerable improvement over previous performance of large-\ntheory AI/ATP methods measured on the whole MML. To achieve that, a large suite\nof AI/ATP methods is employed and further developed. We implement the most\nuseful methods efficiently, to scale them to the 150000 formulas in MML. This\nreduces the training times over the corpus to 1-3 seconds, allowing a simple\npractical deployment of the methods in the online automated reasoning service\nfor the Mizar users (MizAR).\n", "versions": [{"version": "v1", "created": "Thu, 10 Oct 2013 13:24:07 GMT"}], "update_date": "2017-04-13", "authors_parsed": [["Kaliszyk", "Cezary", ""], ["Urban", "Josef", ""]]}, {"id": "1310.3297", "submitter": "Elizabeth Gross", "authors": "Daniel J. Bates, Elizabeth Gross, Anton Leykin, Jose Israel Rodriguez", "title": "Bertini for Macaulay2", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "math.AG cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Numerical algebraic geometry is the field of computational mathematics\nconcerning the numerical solution of polynomial systems of equations. Bertini,\na popular software package for computational applications of this field,\nincludes implementations of a variety of algorithms based on polynomial\nhomotopy continuation. The Macaulay2 package Bertini.m2 provides an interface\nto Bertini, making it possible to access the core run modes of Bertini in\nMacaulay2. With these run modes, users can find approximate solutions to\nzero-dimensional systems and positive-dimensional systems, test numerically\nwhether a point lies on a variety, sample numerically from a variety, and\nperform parameter homotopy runs.\n", "versions": [{"version": "v1", "created": "Fri, 11 Oct 2013 21:17:59 GMT"}], "update_date": "2013-10-15", "authors_parsed": [["Bates", "Daniel J.", ""], ["Gross", "Elizabeth", ""], ["Leykin", "Anton", ""], ["Rodriguez", "Jose Israel", ""]]}, {"id": "1310.4716", "submitter": "James Anderson", "authors": "Antonis Papachristodoulou, James Anderson, Giorgio Valmorbida, Stephen\n  Prajna, Pete Seiler, Pablo Parrilo", "title": "SOSTOOLS Version 3.00 Sum of Squares Optimization Toolbox for MATLAB", "comments": "64 pages, 3 figures, \"software available from\n  http://sysos.eng.ox.ac.uk/sostools/ \"", "journal-ref": null, "doi": null, "report-no": null, "categories": "math.OC cs.MS cs.SY", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  SOSTOOLS v3.00 is the latest release of the freely available MATLAB toolbox\nfor formulating and solving sum of squares (SOS) optimization problems. Such\nproblems arise naturally in the analysis and control of nonlinear dynamical\nsystems, but also in other areas such as combinatorial optimization. Highlights\nof the new release include the ability to create polynomial matrices and\nformulate polynomial matrix inequalities, compatibility with MuPAD, the new\nMATLAB symbolic engine, as well as the multipoly toolbox v2.01. SOSTOOLS v3.00\ncan interface with five semidefinite programming solvers, and includes ten\ndemonstration examples.\n", "versions": [{"version": "v1", "created": "Thu, 17 Oct 2013 14:30:42 GMT"}], "update_date": "2013-10-18", "authors_parsed": [["Papachristodoulou", "Antonis", ""], ["Anderson", "James", ""], ["Valmorbida", "Giorgio", ""], ["Prajna", "Stephen", ""], ["Seiler", "Pete", ""], ["Parrilo", "Pablo", ""]]}, {"id": "1310.5551", "submitter": "Albert Heinle", "authors": "Albert Heinle, Viktor Levandovskyy, Andreas Nareike", "title": "SymbolicData:SDEval - Benchmarking for Everyone", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.SC cs.MS cs.SE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this paper we will present SDeval, a software project that contains tools\nfor creating and running benchmarks with a focus on problems in computer\nalgebra. It is built on top of the Symbolic Data project, able to translate\nproblems in the database into executable code for various computer algebra\nsystems. The included tools are designed to be very flexible to use and to\nextend, such that they can be utilized even in contexts of other communities.\nWith the presentation of SDEval, we will also address particularities of\nbenchmarking in the field of computer algebra. Furthermore, with SDEval, we\nprovide a feasible and automatizable way of reproducing benchmarks published in\ncurrent research works, which appears to be a difficult task in general due to\nthe customizability of the available programs. We will simultaneously present\nthe current developments in the Symbolic Data project.\n", "versions": [{"version": "v1", "created": "Fri, 18 Oct 2013 19:58:03 GMT"}], "update_date": "2013-10-22", "authors_parsed": [["Heinle", "Albert", ""], ["Levandovskyy", "Viktor", ""], ["Nareike", "Andreas", ""]]}, {"id": "1310.8455", "submitter": "Georg Regensburger", "authors": "Anja Korporal, Georg Regensburger", "title": "Composing and Factoring Generalized Green's Operators and Ordinary\n  Boundary Problems", "comments": "19 pages", "journal-ref": "AADIOS 2012, LNCS 8372, pp. 116-134, 2014", "doi": "10.1007/978-3-642-54479-8_5", "report-no": null, "categories": "cs.SC cs.MS cs.NA math.CA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We consider solution operators of linear ordinary boundary problems with \"too\nmany\" boundary conditions, which are not always solvable. These generalized\nGreen's operators are a certain kind of generalized inverses of differential\noperators. We answer the question when the product of two generalized Green's\noperators is again a generalized Green's operator for the product of the\ncorresponding differential operators and which boundary problem it solves.\nMoreover, we show that---provided a factorization of the underlying\ndifferential operator---a generalized boundary problem can be factored into\nlower order problems corresponding to a factorization of the respective Green's\noperators. We illustrate our results by examples using the Maple package\nIntDiffOp, where the presented algorithms are implemented.\n", "versions": [{"version": "v1", "created": "Thu, 31 Oct 2013 10:56:22 GMT"}], "update_date": "2014-06-27", "authors_parsed": [["Korporal", "Anja", ""], ["Regensburger", "Georg", ""]]}]