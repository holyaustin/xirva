[{"id": "1104.0199", "submitter": "Garth Wells", "authors": "Kristian B. {\\O}lgaard and Garth N. Wells", "title": "Optimisations for quadrature representations of finite element tensors\n  through automated code generation", "comments": null, "journal-ref": "ACM Trans. Math. Softw. 37, 1, Article 8 (January 2010), 23 pages", "doi": "10.1145/1644001.1644009", "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We examine aspects of the computation of finite element matrices and vectors\nwhich are made possible by automated code generation. Given a variational form\nin a syntax which resembles standard mathematical notation, the low-level\ncomputer code for building finite element tensors, typically matrices, vectors\nand scalars, can be generated automatically via a form compiler. In particular,\nthe generation of code for computing finite element matrices using a quadrature\napproach is addressed. For quadrature representations, a number of optimisation\nstrategies which are made possible by automated code generation are presented.\nThe relative performance of two different automatically generated\nrepresentations of finite element matrices is examined, with a particular\nemphasis on complicated variational forms. It is shown that approaches which\nperform best for simple forms are not tractable for more complicated problems\nin terms of run time performance, the time required to generate the code or the\nsize of the generated code. The approach and optimisations elaborated here are\neffective for a range of variational forms.\n", "versions": [{"version": "v1", "created": "Fri, 1 Apr 2011 15:29:05 GMT"}], "update_date": "2011-04-04", "authors_parsed": [["\u00d8lgaard", "Kristian B.", ""], ["Wells", "Garth N.", ""]]}, {"id": "1104.0628", "submitter": "Garth Wells", "authors": "Kristian B. {\\O}lgaard, Anders Logg, Garth N. Wells", "title": "Automated code generation for discontinuous Galerkin methods", "comments": null, "journal-ref": "SIAM J. Sci. Comput. 31(2), 2008, pp. 849-864", "doi": "10.1137/070710032", "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  A compiler approach for generating low-level computer code from high-level\ninput for discontinuous Galerkin finite element forms is presented. The input\nlanguage mirrors conventional mathematical notation, and the compiler generates\nefficient code in a standard programming language. This facilitates the rapid\ngeneration of efficient code for general equations in varying spatial\ndimensions. Key concepts underlying the compiler approach and the automated\ngeneration of computer code are elaborated. The approach is demonstrated for a\nrange of common problems, including the Poisson, biharmonic,\nadvection--diffusion and Stokes equations.\n", "versions": [{"version": "v1", "created": "Mon, 4 Apr 2011 17:12:55 GMT"}], "update_date": "2011-04-05", "authors_parsed": [["\u00d8lgaard", "Kristian B.", ""], ["Logg", "Anders", ""], ["Wells", "Garth N.", ""]]}, {"id": "1104.0689", "submitter": "Changbo Chen", "authors": "Changbo Chen and Marc Moreno Maza", "title": "Algorithms for Computing Triangular Decompositions of Polynomial Systems", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.SC cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We propose new algorithms for computing triangular decompositions of\npolynomial systems incrementally. With respect to previous works, our\nimprovements are based on a {\\em weakened} notion of a polynomial GCD modulo a\nregular chain, which permits to greatly simplify and optimize the\nsub-algorithms. Extracting common work from similar expensive computations is\nalso a key feature of our algorithms. In our experimental results the\nimplementation of our new algorithms, realized with the {\\RegularChains}\nlibrary in {\\Maple}, outperforms solvers with similar specifications by several\norders of magnitude on sufficiently difficult problems.\n", "versions": [{"version": "v1", "created": "Mon, 4 Apr 2011 20:52:03 GMT"}], "update_date": "2011-04-06", "authors_parsed": [["Chen", "Changbo", ""], ["Maza", "Marc Moreno", ""]]}, {"id": "1104.1187", "submitter": "Benjamin Jurke", "authors": "Ralph Blumenhagen, Benjamin Jurke, Thorsten Rahn", "title": "Computational Tools for Cohomology of Toric Varieties", "comments": "17 pages, 4 tables; prepared for the special issue \"Computational\n  Algebraic Geometry in String and Gauge Theory\" of Advances in High Energy\n  Physics, cohomCalg implementation available at\n  http://wwwth.mppmu.mpg.de/members/blumenha/cohomcalg/", "journal-ref": "Adv.High Energy Phys.2011:152749", "doi": "10.1155/2011/152749", "report-no": "MPI-2011-39", "categories": "hep-th cs.MS math.AG", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this review, novel non-standard techniques for the computation of\ncohomology classes on toric varieties are summarized. After an introduction of\nthe basic definitions and properties of toric geometry, we discuss a specific\ncomputational algorithm for the determination of the dimension of line-bundle\nvalued cohomology groups on toric varieties. Applications to the computation of\nchiral massless matter spectra in string compactifications are discussed and,\nusing the software package cohomCalg, its utility is highlighted on a new\ntarget space dual pair of (0,2) heterotic string models.\n", "versions": [{"version": "v1", "created": "Wed, 6 Apr 2011 20:29:22 GMT"}], "update_date": "2011-09-08", "authors_parsed": [["Blumenhagen", "Ralph", ""], ["Jurke", "Benjamin", ""], ["Rahn", "Thorsten", ""]]}, {"id": "1104.1533", "submitter": "David Naccache", "authors": "Byungchun Chung and Sandra Marcello and Amir-Pasha Mirbaha and David\n  Naccache and Karim Sabeg", "title": "Operand Folding Hardware Multipliers", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper describes a new accumulate-and-add multiplication algorithm. The\nmethod partitions one of the operands and re-combines the results of\ncomputations done with each of the partitions. The resulting design turns-out\nto be both compact and fast.\n  When the operands' bit-length $m$ is 1024, the new algorithm requires only\n$0.194m+56$ additions (on average), this is about half the number of additions\nrequired by the classical accumulate-and-add multiplication algorithm\n($\\frac{m}2$).\n", "versions": [{"version": "v1", "created": "Fri, 8 Apr 2011 09:40:04 GMT"}], "update_date": "2011-04-11", "authors_parsed": [["Chung", "Byungchun", ""], ["Marcello", "Sandra", ""], ["Mirbaha", "Amir-Pasha", ""], ["Naccache", "David", ""], ["Sabeg", "Karim", ""]]}, {"id": "1104.1696", "submitter": "Milan Tasic", "authors": "Tasi\\'c, M.B. and Stanimirovi\\'c, P.S. and Petkovi\\'c, M.D", "title": "Symbolic computation of weighted Moore-Penrose inverse using\n  partitioning method", "comments": null, "journal-ref": "Applied Mathematics and Computation, Volume 189, Issue 1, 1 June\n  2007, Pages 615-640", "doi": "10.1016/j.amc.2006.11.114", "report-no": null, "categories": "cs.SC cs.DS cs.MS math.FA", "license": "http://creativecommons.org/licenses/by-nc-sa/3.0/", "abstract": "  We propose a method and algorithm for computing the weighted Moore-Penrose\ninverse of one-variable rational matrices. Continuing this idea, we develop an\nalgorithm for computing the weighted Moore-Penrose inverse of one-variable\npolynomial matrix. These methods and algorithms are generalizations of the\nmethod for computing the weighted Moore-Penrose inverse for constant matrices,\noriginated in Wang and Chen [G.R. Wang, Y.L. Chen, A recursive algorithm for\ncomputing the weighted Moore-Penrose inverse AMN, J. Comput. Math. 4 (1986)\n74-85], and the partitioning method for computing the Moore-Penrose inverse of\nrational and polynomial matrices introduced in Stanimirovic and Tasic [P.S.\nStanimirovic, M.B. Tasic, Partitioning method for rational and polynomial\nmatrices, Appl. Math. Comput. 155 (2004) 137-163]. Algorithms are implemented\nin the symbolic computational package MATHEMATICA.\n", "versions": [{"version": "v1", "created": "Sat, 9 Apr 2011 11:54:31 GMT"}], "update_date": "2011-04-12", "authors_parsed": [["Tasi\u0107", "", ""], ["B.", "M.", ""], ["Stanimirovi\u0107", "", ""], ["S.", "P.", ""], ["Petkovi\u0107", "", ""], ["D", "M.", ""]]}, {"id": "1104.1698", "submitter": "Milan Tasic", "authors": "Milan B. Tasi\\'ic, Predrag S. Stanimirovi\\'c, Selver H. Pep\\'i", "title": "About the generalized LM-inverse and the weighted Moore-Penrose inverse", "comments": null, "journal-ref": "Applied Mathematics and Computation, Volume 216, Issue 1, 1 March\n  2010, Pages 114-124", "doi": "10.1016/j.amc.2010.01.019", "report-no": null, "categories": "cs.SC cs.DS cs.MS cs.NA math.FA", "license": "http://creativecommons.org/licenses/by-nc-sa/3.0/", "abstract": "  The recursive method for computing the generalized LM-inverse of a constant\nrectangular matrix augmented by a column vector is proposed in Udwadia and\nPhohomsiri (2007) [16] and [17]. The corresponding algorithm for the sequential\ndetermination of the generalized LM-inverse is established in the present\npaper. We prove that the introduced algorithm for computing the generalized\nLM-inverse and the algorithm for the computation of the weighted Moore-Penrose\ninverse developed by Wang and Chen (1986) in [23] are equivalent algorithms.\nBoth of the algorithms are implemented in the present paper using the package\nMATHEMATICA. Several rational test matrices and randomly generated constant\nmatrices are tested and the CPU time is compared and discussed.\n", "versions": [{"version": "v1", "created": "Sat, 9 Apr 2011 12:09:08 GMT"}], "update_date": "2011-04-12", "authors_parsed": [["Tasi\u00edc", "Milan B.", ""], ["Stanimirovi\u0107", "Predrag S.", ""], ["Pep\u00ed", "Selver H.", ""]]}, {"id": "1104.4518", "submitter": "Aydin Buluc", "authors": "Aydin Buluc, Kamesh Madduri", "title": "Parallel Breadth-First Search on Distributed Memory Systems", "comments": null, "journal-ref": "Proceedings of The International Conference for High Performance\n  Computing, Networking, Storage, and Analysis (SC 2011)", "doi": null, "report-no": null, "categories": "cs.DC cs.MS cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Data-intensive, graph-based computations are pervasive in several scientific\napplications, and are known to to be quite challenging to implement on\ndistributed memory systems. In this work, we explore the design space of\nparallel algorithms for Breadth-First Search (BFS), a key subroutine in several\ngraph algorithms. We present two highly-tuned parallel approaches for BFS on\nlarge parallel systems: a level-synchronous strategy that relies on a simple\nvertex-based partitioning of the graph, and a two-dimensional sparse\nmatrix-partitioning-based approach that mitigates parallel communication\noverhead. For both approaches, we also present hybrid versions with intra-node\nmultithreading. Our novel hybrid two-dimensional algorithm reduces\ncommunication times by up to a factor of 3.5, relative to a common vertex based\napproach. Our experimental study identifies execution regimes in which these\napproaches will be competitive, and we demonstrate extremely high performance\non leading distributed-memory parallel systems. For instance, for a 40,000-core\nparallel execution on Hopper, an AMD Magny-Cours based system, we achieve a BFS\nperformance rate of 17.8 billion edge visits per second on an undirected graph\nof 4.3 billion vertices and 68.7 billion edges with skewed degree distribution.\n", "versions": [{"version": "v1", "created": "Fri, 22 Apr 2011 23:42:40 GMT"}, {"version": "v2", "created": "Fri, 14 Oct 2011 03:36:03 GMT"}], "update_date": "2011-10-17", "authors_parsed": [["Buluc", "Aydin", ""], ["Madduri", "Kamesh", ""]]}]