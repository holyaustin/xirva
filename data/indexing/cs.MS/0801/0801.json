[{"id": "0801.0523", "submitter": "Florent De Dinechin", "authors": "Florent De Dinechin (LIP), Christoph Quirin Lauter (LIP), Guillaume\n  Melquiond (LIP)", "title": "Certifying floating-point implementations using Gappa", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.NA cs.MS", "license": null, "abstract": "  High confidence in floating-point programs requires proving numerical\nproperties of final and intermediate values. One may need to guarantee that a\nvalue stays within some range, or that the error relative to some ideal value\nis well bounded. Such work may require several lines of proof for each line of\ncode, and will usually be broken by the smallest change to the code (e.g. for\nmaintenance or optimization purpose). Certifying these programs by hand is\ntherefore very tedious and error-prone. This article discusses the use of the\nGappa proof assistant in this context. Gappa has two main advantages over\nprevious approaches: Its input format is very close to the actual C code to\nvalidate, and it automates error evaluation and propagation using interval\narithmetic. Besides, it can be used to incrementally prove complex mathematical\nproperties pertaining to the C code. Yet it does not require any specific\nknowledge about automatic theorem proving, and thus is accessible to a wide\ncommunity. Moreover, Gappa may generate a formal proof of the results that can\nbe checked independently by a lower-level proof assistant like Coq, hence\nproviding an even higher confidence in the certification of the numerical code.\nThe article demonstrates the use of this tool on a real-size example, an\nelementary function with correctly rounded output.\n", "versions": [{"version": "v1", "created": "Thu, 3 Jan 2008 13:34:03 GMT"}], "update_date": "2008-01-04", "authors_parsed": [["De Dinechin", "Florent", "", "LIP"], ["Lauter", "Christoph Quirin", "", "LIP"], ["Melquiond", "Guillaume", "", "LIP"]]}]