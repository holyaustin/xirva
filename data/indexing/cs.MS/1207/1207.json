[{"id": "1207.0398", "submitter": "Viviane Pons", "authors": "Viviane Pons", "title": "Multivariate Polynomials in Sage", "comments": "18 pages", "journal-ref": "Seminaire Lotharingien de Combinatoire 66 (2011), Article B66z, 18\n  pp", "doi": null, "report-no": null, "categories": "math.CO cs.MS math.AC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We have developed a patch implementing multivariate polynomials seen as a\nmulti-base algebra. The patch is to be released into the software Sage and can\nalready be found within the Sage-Combinat distribution. One can use our patch\nto define a polynomial in a set of indexed variables and expand it into a\nlinear basis of the multivariate polynomials. So far, we have the Schubert\npolynomials, the Key polynomials of types A, B, C, or D, the Grothendieck\npolynomials and the non-symmetric Macdonald polynomials. One can also use a\ndouble set of variables and work with specific double-linear bases like the\ndouble Schubert polynomials or double Grothendieck polynomials. Our\nimplementation is based on a definition of the basis using divided difference\noperators and one can also define new bases using these operators.\n", "versions": [{"version": "v1", "created": "Mon, 2 Jul 2012 14:19:23 GMT"}], "update_date": "2012-07-03", "authors_parsed": [["Pons", "Viviane", ""]]}, {"id": "1207.1161", "submitter": "Manish Gupta", "authors": "Abhishek Chhajer and Manish K. Gupta and Sandeep Vasani and Jaley\n  Dholakiya", "title": "Modular Arithmetic Expressions and Primality Testing via DNA\n  Self-Assembly", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.ET cs.DS cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Self-assembly is a fundamental process by which supramolecular species form\nspontaneously from their components. This process is ubiquitous throughout the\nlife chemistry and is central to biological information processing. Algorithms\nfor solving many mathematical and computational problems via tile self assembly\nhave been proposed by many researchers in the last decade. In particular tile\nset for doing basic arithmetic of two inputs have been given. In this work we\ngive tile set for doing basic arithmetic (addition, subtraction,\nmultiplication) of n inputs and subsequently computing its modulo. We also\npresent a tile set for primality testing. Finally we present a software\n'xtilemod' for doing modular arithmetic. This simplifies the task of creating\nthe input files to xgrow simulator for doing basic (addition, subtraction,\nmultiplication and division) as well as modular arithmetic of n inputs. Similar\nsoftware for creating tile set for primality testing is also given.\n", "versions": [{"version": "v1", "created": "Thu, 5 Jul 2012 04:55:03 GMT"}], "update_date": "2012-07-06", "authors_parsed": [["Chhajer", "Abhishek", ""], ["Gupta", "Manish K.", ""], ["Vasani", "Sandeep", ""], ["Dholakiya", "Jaley", ""]]}, {"id": "1207.1380", "submitter": "Markus Harva", "authors": "Markus Harva, Tapani Raiko, Antti Honkela, Harri Valpola, Juha\n  Karhunen", "title": "Bayes Blocks: An Implementation of the Variational Bayesian Building\n  Blocks Framework", "comments": "Appears in Proceedings of the Twenty-First Conference on Uncertainty\n  in Artificial Intelligence (UAI2005)", "journal-ref": null, "doi": null, "report-no": "UAI-P-2005-PG-259-266", "categories": "cs.MS cs.LG stat.ML", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  A software library for constructing and learning probabilistic models is\npresented. The library offers a set of building blocks from which a large\nvariety of static and dynamic models can be built. These include hierarchical\nmodels for variances of other variables and many nonlinear models. The\nunderlying variational Bayesian machinery, providing for fast and robust\nestimation but being mathematically rather involved, is almost completely\nhidden from the user thus making it very easy to use the library. The building\nblocks include Gaussian, rectified Gaussian and mixture-of-Gaussians variables\nand computational nodes which can be combined rather freely.\n", "versions": [{"version": "v1", "created": "Wed, 4 Jul 2012 16:10:18 GMT"}], "update_date": "2012-07-09", "authors_parsed": [["Harva", "Markus", ""], ["Raiko", "Tapani", ""], ["Honkela", "Antti", ""], ["Valpola", "Harri", ""], ["Karhunen", "Juha", ""]]}, {"id": "1207.1413", "submitter": "Shohei Shimizu", "authors": "Shohei Shimizu, Aapo Hyvarinen, Yutaka Kano, Patrik O. Hoyer", "title": "Discovery of non-gaussian linear causal models using ICA", "comments": "Appears in Proceedings of the Twenty-First Conference on Uncertainty\n  in Artificial Intelligence (UAI2005)", "journal-ref": null, "doi": null, "report-no": "UAI-P-2005-PG-525-533", "categories": "cs.LG cs.MS stat.ML", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In recent years, several methods have been proposed for the discovery of\ncausal structure from non-experimental data (Spirtes et al. 2000; Pearl 2000).\nSuch methods make various assumptions on the data generating process to\nfacilitate its identification from purely observational data. Continuing this\nline of research, we show how to discover the complete causal structure of\ncontinuous-valued data, under the assumptions that (a) the data generating\nprocess is linear, (b) there are no unobserved confounders, and (c) disturbance\nvariables have non-gaussian distributions of non-zero variances. The solution\nrelies on the use of the statistical method known as independent component\nanalysis (ICA), and does not require any pre-specified time-ordering of the\nvariables. We provide a complete Matlab package for performing this LiNGAM\nanalysis (short for Linear Non-Gaussian Acyclic Model), and demonstrate the\neffectiveness of the method using artificially generated data.\n", "versions": [{"version": "v1", "created": "Wed, 4 Jul 2012 16:23:35 GMT"}], "update_date": "2012-07-09", "authors_parsed": [["Shimizu", "Shohei", ""], ["Hyvarinen", "Aapo", ""], ["Kano", "Yutaka", ""], ["Hoyer", "Patrik O.", ""]]}, {"id": "1207.1746", "submitter": "Mauro Bianco", "authors": "Mauro Bianco, Ugo Varetto", "title": "A Generic Library for Stencil Computations", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.DC cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this era of diverse and heterogeneous computer architectures, the\nprogrammability issues, such as productivity and portable efficiency, are\ncrucial to software development and algorithm design. One way to approach the\nproblem is to step away from traditional sequential programming languages and\nmove toward domain specific programming environments to balance between\nexpressivity and efficiency. In order to demonstrate this principle, we\ndeveloped a domain specific C++ generic library for stencil computations, like\nPDE solvers. The library features high level constructs to specify computation\nand allows the development of parallel stencil computations with very limited\neffort. The high abstraction constructs (like do_all and do_reduce) make the\nprogram shorter and cleaner with increased contextual information for better\nperformance exploitation. The results show good performance from Windows\nmulticores, to HPC clusters and machines with accelerators, like GPUs.\n", "versions": [{"version": "v1", "created": "Fri, 6 Jul 2012 23:30:06 GMT"}], "update_date": "2012-07-10", "authors_parsed": [["Bianco", "Mauro", ""], ["Varetto", "Ugo", ""]]}, {"id": "1207.1916", "submitter": "Alejandro Frery", "authors": "Eliana S. de Almeida, Antonio C. Medeiros and Alejandro C. Frery", "title": "How good are MatLab, Octave and Scilab for Computational Modelling?", "comments": "Accepted for publication in the Computational and Applied Mathematics\n  journal", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS stat.CO", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this article we test the accuracy of three platforms used in computational\nmodelling: MatLab, Octave and Scilab, running on i386 architecture and three\noperating systems (Windows, Ubuntu and Mac OS). We submitted them to numerical\ntests using standard data sets and using the functions provided by each\nplatform. A Monte Carlo study was conducted in some of the datasets in order to\nverify the stability of the results with respect to small departures from the\noriginal input. We propose a set of operations which include the computation of\nmatrix determinants and eigenvalues, whose results are known. We also used data\nprovided by NIST (National Institute of Standards and Technology), a protocol\nwhich includes the computation of basic univariate statistics (mean, standard\ndeviation and first-lag correlation), linear regression and extremes of\nprobability distributions. The assessment was made comparing the results\ncomputed by the platforms with certified values, that is, known results,\ncomputing the number of correct significant digits.\n", "versions": [{"version": "v1", "created": "Sun, 8 Jul 2012 21:52:03 GMT"}], "update_date": "2012-07-10", "authors_parsed": [["de Almeida", "Eliana S.", ""], ["Medeiros", "Antonio C.", ""], ["Frery", "Alejandro C.", ""]]}, {"id": "1207.2291", "submitter": "Muhammad Taimoor Khan", "authors": "Muhammad Taimoor Khan, Wolfgang Schreiner", "title": "On Formal Specification of Maple Programs", "comments": null, "journal-ref": null, "doi": "10.1007/978-3-642-31374-5_33", "report-no": null, "categories": "cs.MS cs.AI", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper is an example-based demonstration of our initial results on the\nformal specification of programs written in the computer algebra language\nMiniMaple (a substantial subset of Maple with slight extensions). The main goal\nof this work is to define a verification framework for MiniMaple. Formal\nspecification of MiniMaple programs is rather complex task as it supports\nnon-standard types of objects, e.g. symbols and unevaluated expressions, and\nadditional functions and predicates, e.g. runtime type tests etc. We have used\nthe specification language to specify various computer algebra concepts\nrespective objects of the Maple package DifferenceDifferential developed at our\ninstitute.\n", "versions": [{"version": "v1", "created": "Tue, 10 Jul 2012 10:21:34 GMT"}], "update_date": "2012-07-11", "authors_parsed": [["Khan", "Muhammad Taimoor", ""], ["Schreiner", "Wolfgang", ""]]}, {"id": "1207.2300", "submitter": "Muhammad Taimoor Khan", "authors": "Muhammad Taimoor Khan, Wolfgang Schreiner", "title": "Towards the Formal Specification and Verification of Maple Programs", "comments": null, "journal-ref": null, "doi": "10.1007/978-3-642-31374-5_16", "report-no": null, "categories": "cs.MS cs.LO cs.PL cs.SE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this paper, we present our ongoing work and initial results on the formal\nspecification and verification of MiniMaple (a substantial subset of Maple with\nslight extensions) programs. The main goal of our work is to find behavioral\nerrors in such programs w.r.t. their specifications by static analysis. This\ntask is more complex for widely used computer algebra languages like Maple as\nthese are fundamentally different from classical languages: they support\nnon-standard types of objects such as symbols, unevaluated expressions and\npolynomials and require abstract computer algebraic concepts and objects such\nas rings and orderings etc. As a starting point we have defined and formalized\na syntax, semantics, type system and specification language for MiniMaple.\n", "versions": [{"version": "v1", "created": "Tue, 10 Jul 2012 10:35:17 GMT"}], "update_date": "2012-07-11", "authors_parsed": [["Khan", "Muhammad Taimoor", ""], ["Schreiner", "Wolfgang", ""]]}, {"id": "1207.3315", "submitter": "Jonathan Heras", "authors": "J\\'onathan Heras, Mar\\'ia Poza, and Julio Rubio", "title": "Verifying an algorithm computing Discrete Vector Fields for digital\n  imaging", "comments": "Published in the Calculemus track of the CICM 2012 congress", "journal-ref": "Calculemus 2012, Lecture Notes in Computer Science, 7362, pages\n  215--229, 2012", "doi": "10.1007/978-3-642-31374-5_15", "report-no": null, "categories": "cs.AI cs.LO cs.MS math.AT", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this paper, we present a formalization of an algorithm to construct\nadmissible discrete vector fields in the Coq theorem prover taking advantage of\nthe SSReflect library. Discrete vector fields are a tool which has been\nwelcomed in the homological analysis of digital images since it provides a\nprocedure to reduce the amount of information but preserving the homological\nproperties. In particular, thanks to discrete vector fields, we are able to\ncompute, inside Coq, homological properties of biomedical images which\notherwise are out of the reach of this system.\n", "versions": [{"version": "v1", "created": "Fri, 13 Jul 2012 17:42:52 GMT"}], "update_date": "2012-07-16", "authors_parsed": [["Heras", "J\u00f3nathan", ""], ["Poza", "Mar\u00eda", ""], ["Rubio", "Julio", ""]]}, {"id": "1207.3441", "submitter": "Makarius Wenzel", "authors": "Makarius Wenzel", "title": "Isabelle/jEdit --- a Prover IDE within the PIDE framework", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.LO cs.AI cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  PIDE is a general framework for document-oriented prover interaction and\nintegration, based on a bilingual architecture that combines ML and Scala. The\noverall aim is to connect LCF-style provers like Isabelle (or Coq or HOL) with\nsophisticated front-end technology on the JVM platform, overcoming command-line\ninteraction at last.\n  The present system description specifically covers Isabelle/jEdit as part of\nthe official release of Isabelle2011-1 (October 2011). It is a concrete Prover\nIDE implementation based on Isabelle/PIDE library modules (implemented in\nScala) on the one hand, and the well-known text editor framework of jEdit\n(implemented in Java) on the other hand.\n  The interaction model of our Prover IDE follows the idea of continuous proof\nchecking: the theory source text is annotated by semantic information by the\nprover as it becomes available incrementally. This works via an asynchronous\nprotocol that neither blocks the editor nor stops the prover from exploiting\nparallelism on multi-core hardware. The jEdit GUI provides standard metaphors\nfor augmented text editing (highlighting, squiggles, tooltips, hyperlinks etc.)\nthat we have instrumented to render the formal content from the prover context.\nFurther refinement of the jEdit display engine via suitable plugins and fonts\napproximates mathematical rendering in the text buffer, including symbols from\nthe TeX repertoire, and sub-/superscripts.\n  Isabelle/jEdit is presented here both as a usable interface for current\nIsabelle, and as a reference application to inspire further projects based on\nPIDE.\n", "versions": [{"version": "v1", "created": "Sat, 14 Jul 2012 16:47:03 GMT"}], "update_date": "2012-07-17", "authors_parsed": [["Wenzel", "Makarius", ""]]}]