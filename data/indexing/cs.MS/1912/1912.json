[{"id": "1912.00488", "submitter": "Neil Lindquist", "authors": "Neil Lindquist", "title": "Replicated Computational Results (RCR) Report for \"Code Generation for\n  Generally Mapped Finite Elements\"", "comments": "7 pages, 7 figures. Submitted to ACM Transactions on Mathematical\n  Software", "journal-ref": "ACM Transactions on Mathematical Software (TOMS): Volume 45 Issue\n  4, December 2019", "doi": "10.1145/3360984", "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  \"Code Generation for Generally Mapped Finite Elements\" includes performance\nresults for the finite element methods discussed in that manuscript. The\nauthors provided a Zenodo archive with the Firedrake components and\ndependencies used, as well as the scripts that generated the results. The\nsoftware was installed on two similar platforms; then, new results were\ngathered and compared to the original results. After completing this process,\nthe results have been deemed replicable by the reviewer.\n", "versions": [{"version": "v1", "created": "Sun, 1 Dec 2019 19:39:16 GMT"}], "update_date": "2020-11-04", "authors_parsed": [["Lindquist", "Neil", ""]]}, {"id": "1912.00702", "submitter": "Robert Speck", "authors": "Ruth Sch\\\"obel, Robert Speck", "title": "PFASST-ER: Combining the Parallel Full Approximation Scheme in Space and\n  Time with parallelization across the method", "comments": "12 pages, 12 figures, CVS PinT Workshop Proceedings", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.DC cs.NA math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  To extend prevailing scaling limits when solving time-dependent partial\ndifferential equations, the parallel full approximation scheme in space and\ntime (PFASST) has been shown to be a promising parallel-in-time integrator.\nSimilar to a space-time multigrid, PFASST is able to compute multiple\ntime-steps simultaneously and is therefore in particular suitable for\nlarge-scale applications on high performance computing systems. In this work we\ncouple PFASST with a parallel spectral deferred correction (SDC) method,\nforming an unprecedented doubly time-parallel integrator. While PFASST provides\nglobal, large-scale \"parallelization across the step\", the inner parallel SDC\nmethod allows to integrate each individual time-step \"parallel across the\nmethod\" using a diagonalized local Quasi-Newton solver. This new method, which\nwe call \"PFASST with Enhanced concuRrency\" (PFASST-ER), therefore exposes even\nmore temporal parallelism. For two challenging nonlinear reaction-diffusion\nproblems, we show that PFASST-ER works more efficiently than the classical\nvariants of PFASST and can be used to run parallel-in-time beyond the number of\ntime-steps.\n", "versions": [{"version": "v1", "created": "Mon, 2 Dec 2019 12:00:03 GMT"}], "update_date": "2019-12-03", "authors_parsed": [["Sch\u00f6bel", "Ruth", ""], ["Speck", "Robert", ""]]}, {"id": "1912.00816", "submitter": "Qinmeng Zou", "authors": "Qinmeng Zou and Frederic Magoules", "title": "Recent Developments in Iterative Methods for Reducing Synchronization", "comments": null, "journal-ref": "18th International Symposium on Distributed Computing and\n  Applications for Business Engineering and Science (DCABES), 2019, IEEE", "doi": "10.1109/DCABES48411.2019.00048", "report-no": null, "categories": "cs.DC cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  On modern parallel architectures, the cost of synchronization among\nprocessors can often dominate the cost of floating-point computation. Several\nmodifications of the existing methods have been proposed in order to keep the\ncommunication cost as low as possible. This paper aims at providing a brief\noverview of recent advances in parallel iterative methods for solving\nlarge-scale problems. We refer the reader to the related references for more\ndetails on the derivation, implementation, performance, and analysis of these\ntechniques.\n", "versions": [{"version": "v1", "created": "Mon, 2 Dec 2019 14:22:42 GMT"}], "update_date": "2019-12-10", "authors_parsed": [["Zou", "Qinmeng", ""], ["Magoules", "Frederic", ""]]}, {"id": "1912.01589", "submitter": "Ehab Hassan", "authors": "Ehab Hassan", "title": "CheasePy", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  CheasePy is code written in Python to run the CHEASE (Cubic Hermite Element\nAxisymmetric Static Equilibrium) code, which solves the Grad-Shafranov equation\nfor toroidal MHD equilibria using pressure and current profiles and fixed\nplasma boundaries that is defined by a set of experimental data points (R,Z).\nThe CheasePy code allows an iterative running of the CHEASE code either to\ncheck the preservation of MHD equilibria or converging to an experimentally\ndefined total toroidal plasma current by modifying any input quantity.\n", "versions": [{"version": "v1", "created": "Tue, 3 Dec 2019 18:39:11 GMT"}], "update_date": "2019-12-04", "authors_parsed": [["Hassan", "Ehab", ""]]}, {"id": "1912.01640", "submitter": "Michael Riesch", "authors": "Michael Riesch, Tien Dat Nguyen, and Christian Jirauschek", "title": "bertha: Project Skeleton for Scientific Software", "comments": "Source code available at https://gitlab.com/cph-tum/bertha", "journal-ref": "PLoS One. 2020; 15(3): e0230557", "doi": "10.1371/journal.pone.0230557", "report-no": null, "categories": "cs.MS", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  Science depends heavily on reliable and easy-to-use software packages, such\nas mathematical libraries or data analysis tools. Developing such packages\nrequires a lot of effort, which is too often avoided due to the lack of funding\nor recognition. In order to reduce the efforts required to create sustainable\nsoftware packages, we present a project skeleton that ensures the best software\nengineering practices from the start of a project, or serves as reference for\nexisting projects.\n", "versions": [{"version": "v1", "created": "Tue, 3 Dec 2019 19:25:20 GMT"}, {"version": "v2", "created": "Wed, 25 Mar 2020 22:20:07 GMT"}], "update_date": "2020-03-27", "authors_parsed": [["Riesch", "Michael", ""], ["Nguyen", "Tien Dat", ""], ["Jirauschek", "Christian", ""]]}, {"id": "1912.01703", "submitter": "Soumith Chintala", "authors": "Adam Paszke, Sam Gross, Francisco Massa, Adam Lerer, James Bradbury,\n  Gregory Chanan, Trevor Killeen, Zeming Lin, Natalia Gimelshein, Luca Antiga,\n  Alban Desmaison, Andreas K\\\"opf, Edward Yang, Zach DeVito, Martin Raison,\n  Alykhan Tejani, Sasank Chilamkurthy, Benoit Steiner, Lu Fang, Junjie Bai,\n  Soumith Chintala", "title": "PyTorch: An Imperative Style, High-Performance Deep Learning Library", "comments": "12 pages, 3 figures, NeurIPS 2019", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.LG cs.MS stat.ML", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Deep learning frameworks have often focused on either usability or speed, but\nnot both. PyTorch is a machine learning library that shows that these two goals\nare in fact compatible: it provides an imperative and Pythonic programming\nstyle that supports code as a model, makes debugging easy and is consistent\nwith other popular scientific computing libraries, while remaining efficient\nand supporting hardware accelerators such as GPUs.\n  In this paper, we detail the principles that drove the implementation of\nPyTorch and how they are reflected in its architecture. We emphasize that every\naspect of PyTorch is a regular Python program under the full control of its\nuser. We also explain how the careful and pragmatic implementation of the key\ncomponents of its runtime enables them to work together to achieve compelling\nperformance.\n  We demonstrate the efficiency of individual subsystems, as well as the\noverall speed of PyTorch on several common benchmarks.\n", "versions": [{"version": "v1", "created": "Tue, 3 Dec 2019 22:06:05 GMT"}], "update_date": "2019-12-05", "authors_parsed": [["Paszke", "Adam", ""], ["Gross", "Sam", ""], ["Massa", "Francisco", ""], ["Lerer", "Adam", ""], ["Bradbury", "James", ""], ["Chanan", "Gregory", ""], ["Killeen", "Trevor", ""], ["Lin", "Zeming", ""], ["Gimelshein", "Natalia", ""], ["Antiga", "Luca", ""], ["Desmaison", "Alban", ""], ["K\u00f6pf", "Andreas", ""], ["Yang", "Edward", ""], ["DeVito", "Zach", ""], ["Raison", "Martin", ""], ["Tejani", "Alykhan", ""], ["Chilamkurthy", "Sasank", ""], ["Steiner", "Benoit", ""], ["Fang", "Lu", ""], ["Bai", "Junjie", ""], ["Chintala", "Soumith", ""]]}, {"id": "1912.04062", "submitter": "Carolin Penke", "authors": "Carolin Penke, Andreas Marek, Christian Vorwerk, Claudia Draxl, Peter\n  Benner", "title": "High Performance Solution of Skew-symmetric Eigenvalue Problems with\n  Applications in Solving the Bethe-Salpeter Eigenvalue Problem", "comments": null, "journal-ref": null, "doi": "10.1016/j.parco.2020.102639", "report-no": null, "categories": "math.NA cs.DS cs.MS cs.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present a high-performance solver for dense skew-symmetric matrix\neigenvalue problems. Our work is motivated by applications in computational\nquantum physics, where one solution approach to solve the so-called\nBethe-Salpeter equation involves the solution of a large, dense, skew-symmetric\neigenvalue problem. The computed eigenpairs can be used to compute the optical\nabsorption spectrum of molecules and crystalline systems. One state-of-the art\nhigh-performance solver package for symmetric matrices is the ELPA (Eigenvalue\nSoLvers for Petascale Applications) library. We extend the methods available in\nELPA to skew-symmetric matrices. This way, the presented solution method can\nbenefit from the optimizations available in ELPA that make it a\nwell-established, efficient and scalable library, such as GPU support. We\ncompare performance and scalability of our method to the only available\nhigh-performance approach for skew-symmetric matrices, an indirect route\ninvolving complex arithmetic. In total, we achieve a performance that is up to\n3.67 higher than the reference method using Intel's ScaLAPACK implementation.\nThe runtime to solve the Bethe-Salpeter-Eigenvalue problem can be improved by a\nfactor of 10. Our method is freely available in the current release of the ELPA\nlibrary.\n", "versions": [{"version": "v1", "created": "Mon, 9 Dec 2019 14:10:45 GMT"}, {"version": "v2", "created": "Mon, 20 Apr 2020 15:21:13 GMT"}], "update_date": "2020-06-05", "authors_parsed": [["Penke", "Carolin", ""], ["Marek", "Andreas", ""], ["Vorwerk", "Christian", ""], ["Draxl", "Claudia", ""], ["Benner", "Peter", ""]]}, {"id": "1912.05303", "submitter": "Matthew Adams", "authors": "Matthew Adams", "title": "differint: A Python Package for Numerical Fractional Calculus", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.NA math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Fractional calculus has become widely studied and applied to physical\nproblems in recent years. As a result, many methods for the numerical\ncomputation of fractional derivatives and integrals have been defined. However,\nthese algorithms are often programmed in an ad hoc manner, requiring\nresearchers to implement and debug their own code. This work introduces the\n\\textit{differint} software package, which offers a single repository for\nmultiple numerical algorithms for the computation of fractional derivatives and\nintegrals. This package is coded in the open-source Python programming\nlanguage. The Gr\\\"unwald-Letnikov, improved Gr\\\"unwald-Letnikov, and\nRiemann-Liouville algorithms from the fractional calculus are included in this\npackage. The algorithms presented are computed from their descriptions found in\n[2]. This work concludes with suggestions for the application of the\n\\textit{differint} software package.\n", "versions": [{"version": "v1", "created": "Tue, 3 Dec 2019 21:22:29 GMT"}], "update_date": "2019-12-12", "authors_parsed": [["Adams", "Matthew", ""]]}, {"id": "1912.05508", "submitter": "Panruo Wu", "authors": "Shaoshuai Zhang, Panruo Wu", "title": "High Accuracy Low Precision QR Factorization and Least Square Solver on\n  GPU with TensorCore", "comments": "11 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://creativecommons.org/licenses/by/4.0/", "abstract": "  Driven by the insatiable needs to process ever larger amount of data with\nmore complex models, modern computer processors and accelerators are beginning\nto offer half precision floating point arithmetic support, and extremely\noptimized special units such as NVIDIA TensorCore on GPU and Google Tensor\nProcessing Unit (TPU) that does half precision matrix-matrix multiplication\nexceptionally efficiently. In this paper we present a large scale mixed\nprecision linear least square solver that achieves high accuracy using the low\nprecision TensorCore GPU. The mixed precision system consists of both\ninnovative algorithms and implementations, and is shown to be up to 14x faster\nthan single precision cuSOLVER at QR matrix factorization at large scale with\nslightly lower accuracy, and up to 10x faster than double precision direct QR\nleast square solver with comparable accuracy.\n", "versions": [{"version": "v1", "created": "Wed, 11 Dec 2019 18:14:52 GMT"}], "update_date": "2019-12-12", "authors_parsed": [["Zhang", "Shaoshuai", ""], ["Wu", "Panruo", ""]]}, {"id": "1912.07645", "submitter": "Kjetil Olsen Lye", "authors": "Kjetil Lye", "title": "Alsvinn: A Fast multi-GPGPU finite volume solver with a strong emphasis\n  on reproducibility", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present the Alsvinn simulator, a fast multi general purpose graphical\nprocessing unit (GPGPU) finite volume solver for hyperbolic conservation laws\nin multiple space dimensions. Alsvinn has native support for uncertainty\nquantifications, and exhibits excellent scaling on top tier compute clusters.\n", "versions": [{"version": "v1", "created": "Mon, 16 Dec 2019 19:17:46 GMT"}], "update_date": "2019-12-18", "authors_parsed": [["Lye", "Kjetil", ""]]}, {"id": "1912.07696", "submitter": "Hong Zhang", "authors": "Hong Zhang and Emil M. Constantinescu and Barry F. Smith", "title": "PETSc TSAdjoint: a discrete adjoint ODE solver for first-order and\n  second-order sensitivity analysis", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present a new software system PETSc TSAdjoint for first-order and\nsecond-order adjoint sensitivity analysis of time-dependent nonlinear\ndifferential equations. The derivative calculation in PETSc TSAdjoint is\nessentially a high-level algorithmic differentiation process. The adjoint\nmodels are derived by differentiating the timestepping algorithms and\nimplemented based on the parallel infrastructure in PETSc. Full differentiation\nof the library code including MPI routines thus is avoided, and users do not\nneed to derive their own adjoint models for their specific applications. PETSc\nTSAdjoint can compute the first-order derivative, that is, the gradient of a\nscalar functional, and the Hessian-vector product that carries second-order\nderivative information, while requiring minimal input (a few callbacks) from\nthe users. Optimal checkpointing schemes are employed by the adjoint model in a\nmanner that is transparent to users. Usability, efficiency, and scalability are\ndemonstrated through examples from a variety of applications.\n", "versions": [{"version": "v1", "created": "Mon, 16 Dec 2019 20:45:42 GMT"}], "update_date": "2019-12-18", "authors_parsed": [["Zhang", "Hong", ""], ["Constantinescu", "Emil M.", ""], ["Smith", "Barry F.", ""]]}, {"id": "1912.08516", "submitter": "Lawrence Mitchell", "authors": "Patrick E. Farrell and Matthew G. Knepley and Lawrence Mitchell and\n  Florian Wechsung", "title": "PCPATCH: software for the topological construction of multigrid\n  relaxation methods", "comments": "22 pages, minor fixes in bibliography", "journal-ref": "ACM Transactions on Mathematical Software 47(3):25 (2021)", "doi": "10.1145/3445791", "report-no": null, "categories": "cs.MS cs.NA math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Effective relaxation methods are necessary for good multigrid convergence.\nFor many equations, standard Jacobi and Gau{\\ss}-Seidel are inadequate, and\nmore sophisticated space decompositions are required; examples include problems\nwith semidefinite terms or saddle point structure. In this paper we present a\nunifying software abstraction, PCPATCH, for the topological construction of\nspace decompositions for multigrid relaxation methods. Space decompositions are\nspecified by collecting topological entities in a mesh (such as all vertices or\nfaces) and applying a construction rule (such as taking all degrees of freedom\nin the cells around each entity). The software is implemented in PETSc and\nfacilitates the elegant expression of a wide range of schemes merely by varying\nsolver options at runtime. In turn, this allows for the very rapid development\nof fast solvers for difficult problems.\n", "versions": [{"version": "v1", "created": "Wed, 18 Dec 2019 11:03:11 GMT"}, {"version": "v2", "created": "Mon, 17 Feb 2020 17:28:37 GMT"}, {"version": "v3", "created": "Thu, 14 Jan 2021 18:10:10 GMT"}, {"version": "v4", "created": "Mon, 5 Jul 2021 16:21:35 GMT"}], "update_date": "2021-07-06", "authors_parsed": [["Farrell", "Patrick E.", ""], ["Knepley", "Matthew G.", ""], ["Mitchell", "Lawrence", ""], ["Wechsung", "Florian", ""]]}, {"id": "1912.09319", "submitter": "Miroslav Kuchta", "authors": "Miroslav Kuchta", "title": "Assembly of multiscale linear PDE operators", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "math.NA cs.MS cs.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In numerous applications the mathematical model consists of different\nprocesses coupled across a lower dimensional manifold. Due to the multiscale\ncoupling, finite element discretization of such models presents a challenge.\nAssuming that only singlescale finite element forms can be assembled we present\nhere a simple algorithm for representing multiscale models as linear operators\nsuitable for Krylov methods. Flexibility of the approach is demonstrated by\nnumerical examples with coupling across dimensionality gap 1 and 2.\nPreconditioners for several of the problems are discussed.\n", "versions": [{"version": "v1", "created": "Thu, 19 Dec 2019 15:59:24 GMT"}], "update_date": "2019-12-20", "authors_parsed": [["Kuchta", "Miroslav", ""]]}, {"id": "1912.11369", "submitter": "Eduardo M. Vasconcelos", "authors": "Eduardo Vasconcelos, Adriano Souza, Kelvin Dias", "title": "AVaN Pack: An Analytical/Numerical Solution for Variance-Based\n  Sensitivity Analysis", "comments": "13 pages, 1 Figure, 2 tables", "journal-ref": null, "doi": null, "report-no": null, "categories": "stat.OT cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Sensitivity analysis is an important concept to analyze the influences of\nparameters in a system, an equation or a collection of data. The methods used\nfor sensitivity analysis are divided into deterministic and statistical\ntechniques. Generally, deterministic techniques analyze fixed points of a model\nwhilst stochastic techniques analyze a range of values. Deterministic methods\nfail in analyze the entire range of input values and stochastic methods\ngenerate outcomes with random errors. In this manuscript, we are interested in\nstochastic methods, mainly in variance-based techniques such as Variance and\nSobol indices, since this class of techniques is largely used on literature.\nThe objective of this manuscript is to present an analytical solution for\nvariance based sensitive analysis. As a result of this research, two small\nprograms were developed in Javascript named as AVaN Pack (Analysis of Variance\nthrough Numerical solution). These programs allow users to find the\ncontribution of each individual parameter in any function by means of a\nmathematical solution, instead of sampling-based ones.\n", "versions": [{"version": "v1", "created": "Sun, 22 Dec 2019 01:33:32 GMT"}], "update_date": "2019-12-25", "authors_parsed": [["Vasconcelos", "Eduardo", ""], ["Souza", "Adriano", ""], ["Dias", "Kelvin", ""]]}, {"id": "1912.11930", "submitter": "Christian Engwer", "authors": "Nils-Arne Dreier and Christian Engwer", "title": "Strategies for the vectorized Block Conjugate Gradients method", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "math.NA cs.MS cs.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Block Krylov methods have recently gained a lot of attraction. Due to their\nincreased arithmetic intensity they offer a promising way to improve\nperformance on modern hardware. Recently Frommer et al. presented a block\nKrylov framework that combines the advantages of block Krylov methods and data\nparallel methods. We review this framework and apply it on the Block Conjugate\nGradients method,to solve linear systems with multiple right hand sides. In\nthis course we consider challenges that occur on modern hardware, like a\nlimited memory bandwidth, the use of SIMD instructions and the communication\noverhead. We present a performance model to predict the efficiency of different\nBlock CG variants and compare these with experimental numerical results.\n", "versions": [{"version": "v1", "created": "Thu, 26 Dec 2019 20:41:05 GMT"}], "update_date": "2019-12-30", "authors_parsed": [["Dreier", "Nils-Arne", ""], ["Engwer", "Christian", ""]]}, {"id": "1912.12924", "submitter": "Henrik Barthels M.Sc.", "authors": "Henrik Barthels, Christos Psarras, Paolo Bientinesi", "title": "Linnea: Automatic Generation of Efficient Linear Algebra Programs", "comments": "Extended version of arXiv:1907.02778", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The translation of linear algebra computations into efficient sequences of\nlibrary calls is a non-trivial task that requires expertise in both linear\nalgebra and high-performance computing. Almost all high-level languages and\nlibraries for matrix computations (e.g., Matlab, Eigen) internally use\noptimized kernels such as those provided by BLAS and LAPACK; however, their\ntranslation algorithms are often too simplistic and thus lead to a suboptimal\nuse of said kernels, resulting in significant performance losses. In order to\ncombine the productivity offered by high-level languages, and the performance\nof low-level kernels, we are developing Linnea, a code generator for linear\nalgebra problems. As input, Linnea takes a high-level description of a linear\nalgebra problem; as output, it returns an efficient sequence of calls to\nhigh-performance kernels. Linnea uses a custom best-first search algorithm to\nfind a first solution in less than a second, and increasingly better solutions\nwhen given more time. In 125 test problems, the code generated by Linnea almost\nalways outperforms Matlab, Julia, Eigen and Armadillo, with speedups up to and\nexceeding 10x.\n", "versions": [{"version": "v1", "created": "Mon, 30 Dec 2019 13:39:46 GMT"}], "update_date": "2020-01-01", "authors_parsed": [["Barthels", "Henrik", ""], ["Psarras", "Christos", ""], ["Bientinesi", "Paolo", ""]]}, {"id": "1912.13282", "submitter": "Jure Slak", "authors": "Jure Slak and Gregor Kosec", "title": "Medusa: A C++ Library for solving PDEs using Strong Form Mesh-Free\n  methods", "comments": null, "journal-ref": "ACM Transactions on Mathematical Software 47(3), June 2021", "doi": "10.1145/3450966", "report-no": null, "categories": "cs.MS cs.NA math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Medusa, a novel library for implementation of strong form mesh-free methods,\nis described. We identify and present common parts and patterns among many such\nmethods reported in the literature, such as node positioning, stencil selection\nand stencil weight computation. Many different algorithms exist for each part\nand the possible combinations offer a plethora of possibilities for\nimprovements of solution procedures that are far from fully understood. As a\nconsequence there are still many unanswered questions in mesh-free community\nresulting in vivid ongoing research in the field. Medusa implements the core\nmesh-free elements as independent blocks, which offers users great flexibility\nin experimenting with the method they are developing, as well as easily\ncomparing it with other existing methods. The paper describes the chosen\nabstractions and their usage, illustrates aspects of the philosophy and design,\noffers some executions time benchmarks and demonstrates the application of the\nlibrary on cases from linear elasticity and fluid flow in irregular 2D and 3D\ndomains.\n", "versions": [{"version": "v1", "created": "Tue, 31 Dec 2019 12:11:17 GMT"}], "update_date": "2021-07-07", "authors_parsed": [["Slak", "Jure", ""], ["Kosec", "Gregor", ""]]}, {"id": "1912.13375", "submitter": "Jakob Maljaars", "authors": "Jakob M. Maljaars, Chris N. Richardson, Nathan Sime", "title": "LEoPart: a particle library for FEniCS", "comments": "35 pages, 13 figures", "journal-ref": null, "doi": "10.1016/j.camwa.2020.04.023", "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper introduces LEoPart, an add-on for the open source finite element\nsoftware library FEniCS to seamlessly integrate Lagrangian particle\nfunctionality with (Eulerian) mesh-based finite element (FE) approaches.\nLEoPart - which is so much as to say: `Lagrangian-Eulerian on Particles' -\ncontains tools for efficient, accurate and scalable advection of Lagrangian\nparticles on arbitrary polyhedral meshes. In addition, LEoPart comes with\nseveral projection operators for exchanging information between the scattered\nparticles and the mesh and \\textit{vice versa}. These projection operators are\nbased on a variational framework, which allows extension to high-order\naccuracy. In particular, by implementing a dedicated PDE-constrained\nparticle-mesh projection operator, LEoPart provides all the tools for\ndiffusion-free advection, while simultaneously achieving optimal convergence\nand ensuring conservation of the projected particle quantities on the\nunderlying mesh. A range of numerical examples that are prototypical to passive\nand active tracer methods highlight the properties and the parallel performance\nof the different tools in LEoPart. Finally, future developments are identified.\nThe source code for LEoPart is actively maintained and available under an open\nsource license at https://bitbucket.org/jakob_maljaars/leopart.\n", "versions": [{"version": "v1", "created": "Mon, 23 Dec 2019 21:26:49 GMT"}, {"version": "v2", "created": "Fri, 29 May 2020 07:37:53 GMT"}], "update_date": "2020-06-01", "authors_parsed": [["Maljaars", "Jakob M.", ""], ["Richardson", "Chris N.", ""], ["Sime", "Nathan", ""]]}]