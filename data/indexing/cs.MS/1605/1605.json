[{"id": "1605.00410", "submitter": "Alexander Kobel", "authors": "Alexander Kobel and Fabrice Rouillier and Michael Sagraloff", "title": "Computing Real Roots of Real Polynomials ... and now For Real!", "comments": "Accepted for presentation at the 41st International Symposium on\n  Symbolic and Algebraic Computation (ISSAC), July 19--22, 2016, Waterloo,\n  Ontario, Canada", "journal-ref": null, "doi": "10.1145/2930889.2930937", "report-no": null, "categories": "cs.MS cs.NA cs.SC math.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Very recent work introduces an asymptotically fast subdivision algorithm,\ndenoted ANewDsc, for isolating the real roots of a univariate real polynomial.\nThe method combines Descartes' Rule of Signs to test intervals for the\nexistence of roots, Newton iteration to speed up convergence against clusters\nof roots, and approximate computation to decrease the required precision. It\nachieves record bounds on the worst-case complexity for the considered problem,\nmatching the complexity of Pan's method for computing all complex roots and\nimproving upon the complexity of other subdivision methods by several\nmagnitudes.\n  In the article at hand, we report on an implementation of ANewDsc on top of\nthe RS root isolator. RS is a highly efficient realization of the classical\nDescartes method and currently serves as the default real root solver in Maple.\nWe describe crucial design changes within ANewDsc and RS that led to a\nhigh-performance implementation without harming the theoretical complexity of\nthe underlying algorithm.\n  With an excerpt of our extensive collection of benchmarks, available online\nat http://anewdsc.mpi-inf.mpg.de/, we illustrate that the theoretical gain in\nperformance of ANewDsc over other subdivision methods also transfers into\npractice. These experiments also show that our new implementation outperforms\nboth RS and mature competitors by magnitudes for notoriously hard instances\nwith clustered roots. For all other instances, we avoid almost any overhead by\nintegrating additional optimizations and heuristics.\n", "versions": [{"version": "v1", "created": "Mon, 2 May 2016 09:47:10 GMT"}], "update_date": "2016-05-03", "authors_parsed": [["Kobel", "Alexander", ""], ["Rouillier", "Fabrice", ""], ["Sagraloff", "Michael", ""]]}, {"id": "1605.00492", "submitter": "Eike Hermann M\\\"uller", "authors": "Lawrence Mitchell and Eike Hermann M\\\"uller", "title": "High level implementation of geometric multigrid solvers for finite\n  element problems: applications in atmospheric modelling", "comments": "22 pages, 5 figures, 9 tables. Submitted to JCP", "journal-ref": "Journal of Computational Physics 327:1-18 (2016)", "doi": "10.1016/j.jcp.2016.09.037", "report-no": null, "categories": "cs.MS math.NA physics.flu-dyn", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The implementation of efficient multigrid preconditioners for elliptic\npartial differential equations (PDEs) is a challenge due to the complexity of\nthe resulting algorithms and corresponding computer code. For sophisticated\nfinite element discretisations on unstructured grids an efficient\nimplementation can be very time consuming and requires the programmer to have\nin-depth knowledge of the mathematical theory, parallel computing and\noptimisation techniques on manycore CPUs. In this paper we show how the\ndevelopment of bespoke multigrid preconditioners can be simplified\nsignificantly by using a framework which allows the expression of the each\ncomponent of the algorithm at the correct abstraction level. Our approach (1)\nallows the expression of the finite element problem in a language which is\nclose to the mathematical formulation of the problem, (2) guarantees the\nautomatic generation and efficient execution of parallel optimised low-level\ncomputer code and (3) is flexible enough to support different abstraction\nlevels and give the programmer control over details of the preconditioner. We\nuse the composable abstractions of the Firedrake/PyOP2 package to demonstrate\nthe efficiency of this approach for the solution of strongly anisotropic PDEs\nin atmospheric modelling. The weak formulation of the PDE is expressed in\nUnified Form Language (UFL) and the lower PyOP2 abstraction layer allows the\nmanual design of computational kernels for a bespoke geometric multigrid\npreconditioner. We compare the performance of this preconditioner to a\nsingle-level method and hypre's BoomerAMG algorithm. The Firedrake/PyOP2 code\nis inherently parallel and we present a detailed performance analysis for a\nsingle node (24 cores) on the ARCHER supercomputer. Our implementation utilises\na significant fraction of the available memory bandwidth and shows very good\nweak scaling on up to 6,144 compute cores.\n", "versions": [{"version": "v1", "created": "Mon, 2 May 2016 14:06:24 GMT"}, {"version": "v2", "created": "Wed, 14 Sep 2016 09:10:47 GMT"}], "update_date": "2016-10-07", "authors_parsed": [["Mitchell", "Lawrence", ""], ["M\u00fcller", "Eike Hermann", ""]]}, {"id": "1605.00998", "submitter": "Paul Knysh", "authors": "Paul Knysh, Yannis Korkolis", "title": "Blackbox: A procedure for parallel optimization of expensive black-box\n  functions", "comments": "8 pages, 3 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS math.OC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This note provides a description of a procedure that is designed to\nefficiently optimize expensive black-box functions. It uses the response\nsurface methodology by incorporating radial basis functions as the response\nmodel. A simple method based on a Latin hypercube is used for initial sampling.\nA modified version of CORS algorithm with space rescaling is used for the\nsubsequent sampling. The procedure is able to scale on multicore processors by\nperforming multiple function evaluations in parallel. The source code of the\nprocedure is written in Python.\n", "versions": [{"version": "v1", "created": "Tue, 3 May 2016 17:49:27 GMT"}], "update_date": "2016-05-04", "authors_parsed": [["Knysh", "Paul", ""], ["Korkolis", "Yannis", ""]]}, {"id": "1605.01078", "submitter": "Robert Van De Geijn", "authors": "Jianyu Huang, Tyler M. Smith, Greg M. Henry, Robert A. van de Geijn", "title": "Implementing Strassen's Algorithm with BLIS", "comments": null, "journal-ref": null, "doi": null, "report-no": "FLAME Working Note #79, The University of Texas at Austin,\n  Department of Computer Sciences Technical Report TR-16-03", "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We dispel with \"street wisdom\" regarding the practical implementation of\nStrassen's algorithm for matrix-matrix multiplication (DGEMM). Conventional\nwisdom: it is only practical for very large matrices. Our implementation is\npractical for small matrices. Conventional wisdom: the matrices being\nmultiplied should be relatively square. Our implementation is practical for\nrank-k updates, where k is relatively small (a shape of importance for\nlibraries like LAPACK). Conventional wisdom: it inherently requires substantial\nworkspace. Our implementation requires no workspace beyond buffers already\nincorporated into conventional high-performance DGEMM implementations.\nConventional wisdom: a Strassen DGEMM interface must pass in workspace. Our\nimplementation requires no such workspace and can be plug-compatible with the\nstandard DGEMM interface. Conventional wisdom: it is hard to demonstrate\nspeedup on multi-core architectures. Our implementation demonstrates speedup\nover conventional DGEMM even on an Intel(R) Xeon Phi(TM) coprocessor utilizing\n240 threads. We show how a distributed memory matrix-matrix multiplication also\nbenefits from these advances.\n", "versions": [{"version": "v1", "created": "Tue, 3 May 2016 20:28:00 GMT"}], "update_date": "2016-05-05", "authors_parsed": [["Huang", "Jianyu", ""], ["Smith", "Tyler M.", ""], ["Henry", "Greg M.", ""], ["van de Geijn", "Robert A.", ""]]}, {"id": "1605.02532", "submitter": "Alexandru Ghitza", "authors": "Alexandru Ghitza and Martin Raum", "title": "HLinear: Exact Dense Linear Algebra in Haskell", "comments": "13 pages, 6 tables; code available at\n  https://github.com/martinra/hlinear/tree/paper-toms", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS cs.SC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present an implementation in the functional programming language Haskell\nof the PLE decomposition of matrices over division rings. Our benchmarks\nindicate that it is competitive with the C-based implementation provided in\nFlint. Describing the guiding principles of our work, we introduce the reader\nto basic ideas from high-performance functional programming.\n", "versions": [{"version": "v1", "created": "Mon, 9 May 2016 11:24:39 GMT"}, {"version": "v2", "created": "Tue, 24 May 2016 10:30:27 GMT"}, {"version": "v3", "created": "Thu, 10 Aug 2017 20:20:02 GMT"}], "update_date": "2017-08-14", "authors_parsed": [["Ghitza", "Alexandru", ""], ["Raum", "Martin", ""]]}, {"id": "1605.02688", "submitter": "Simon Lefrancois", "authors": "The Theano Development Team: Rami Al-Rfou, Guillaume Alain, Amjad\n  Almahairi, Christof Angermueller, Dzmitry Bahdanau, Nicolas Ballas,\n  Fr\\'ed\\'eric Bastien, Justin Bayer, Anatoly Belikov, Alexander Belopolsky,\n  Yoshua Bengio, Arnaud Bergeron, James Bergstra, Valentin Bisson, Josh\n  Bleecher Snyder, Nicolas Bouchard, Nicolas Boulanger-Lewandowski, Xavier\n  Bouthillier, Alexandre de Br\\'ebisson, Olivier Breuleux, Pierre-Luc Carrier,\n  Kyunghyun Cho, Jan Chorowski, Paul Christiano, Tim Cooijmans, Marc-Alexandre\n  C\\^ot\\'e, Myriam C\\^ot\\'e, Aaron Courville, Yann N. Dauphin, Olivier\n  Delalleau, Julien Demouth, Guillaume Desjardins, Sander Dieleman, Laurent\n  Dinh, M\\'elanie Ducoffe, Vincent Dumoulin, Samira Ebrahimi Kahou, Dumitru\n  Erhan, Ziye Fan, Orhan Firat, Mathieu Germain, Xavier Glorot, Ian Goodfellow,\n  Matt Graham, Caglar Gulcehre, Philippe Hamel, Iban Harlouchet, Jean-Philippe\n  Heng, Bal\\'azs Hidasi, Sina Honari, Arjun Jain, S\\'ebastien Jean, Kai Jia,\n  Mikhail Korobov, Vivek Kulkarni, Alex Lamb, Pascal Lamblin, Eric Larsen,\n  C\\'esar Laurent, Sean Lee, Simon Lefrancois, Simon Lemieux, Nicholas\n  L\\'eonard, Zhouhan Lin, Jesse A. Livezey, Cory Lorenz, Jeremiah Lowin, Qianli\n  Ma, Pierre-Antoine Manzagol, Olivier Mastropietro, Robert T. McGibbon, Roland\n  Memisevic, Bart van Merri\\\"enboer, Vincent Michalski, Mehdi Mirza, Alberto\n  Orlandi, Christopher Pal, Razvan Pascanu, Mohammad Pezeshki, Colin Raffel,\n  Daniel Renshaw, Matthew Rocklin, Adriana Romero, Markus Roth, Peter Sadowski,\n  John Salvatier, Fran\\c{c}ois Savard, Jan Schl\\\"uter, John Schulman, Gabriel\n  Schwartz, Iulian Vlad Serban, Dmitriy Serdyuk, Samira Shabanian, \\'Etienne\n  Simon, Sigurd Spieckermann, S. Ramana Subramanyam, Jakub Sygnowski,\n  J\\'er\\'emie Tanguay, Gijs van Tulder, Joseph Turian, Sebastian Urban, Pascal\n  Vincent, Francesco Visin, Harm de Vries, David Warde-Farley, Dustin J. Webb,\n  Matthew Willson, Kelvin Xu, Lijun Xue, Li Yao, Saizheng Zhang, Ying Zhang", "title": "Theano: A Python framework for fast computation of mathematical\n  expressions", "comments": "19 pages, 5 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.SC cs.LG cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Theano is a Python library that allows to define, optimize, and evaluate\nmathematical expressions involving multi-dimensional arrays efficiently. Since\nits introduction, it has been one of the most used CPU and GPU mathematical\ncompilers - especially in the machine learning community - and has shown steady\nperformance improvements. Theano is being actively and continuously developed\nsince 2008, multiple frameworks have been built on top of it and it has been\nused to produce many state-of-the-art machine learning models.\n  The present article is structured as follows. Section I provides an overview\nof the Theano software and its community. Section II presents the principal\nfeatures of Theano and how to use them, and compares them with other similar\nprojects. Section III focuses on recently-introduced functionalities and\nimprovements. Section IV compares the performance of Theano against Torch7 and\nTensorFlow on several machine learning models. Section V discusses current\nlimitations of Theano and potential ways of improving it.\n", "versions": [{"version": "v1", "created": "Mon, 9 May 2016 18:32:34 GMT"}], "update_date": "2016-05-10", "authors_parsed": [["The Theano Development Team", "", ""], ["Al-Rfou", "Rami", ""], ["Alain", "Guillaume", ""], ["Almahairi", "Amjad", ""], ["Angermueller", "Christof", ""], ["Bahdanau", "Dzmitry", ""], ["Ballas", "Nicolas", ""], ["Bastien", "Fr\u00e9d\u00e9ric", ""], ["Bayer", "Justin", ""], ["Belikov", "Anatoly", ""], ["Belopolsky", "Alexander", ""], ["Bengio", "Yoshua", ""], ["Bergeron", "Arnaud", ""], ["Bergstra", "James", ""], ["Bisson", "Valentin", ""], ["Snyder", "Josh Bleecher", ""], ["Bouchard", "Nicolas", ""], ["Boulanger-Lewandowski", "Nicolas", ""], ["Bouthillier", "Xavier", ""], ["de Br\u00e9bisson", "Alexandre", ""], ["Breuleux", "Olivier", ""], ["Carrier", "Pierre-Luc", ""], ["Cho", "Kyunghyun", ""], ["Chorowski", "Jan", ""], ["Christiano", "Paul", ""], ["Cooijmans", "Tim", ""], ["C\u00f4t\u00e9", "Marc-Alexandre", ""], ["C\u00f4t\u00e9", "Myriam", ""], ["Courville", "Aaron", ""], ["Dauphin", "Yann N.", ""], ["Delalleau", "Olivier", ""], ["Demouth", "Julien", ""], ["Desjardins", "Guillaume", ""], ["Dieleman", "Sander", ""], ["Dinh", "Laurent", ""], ["Ducoffe", "M\u00e9lanie", ""], ["Dumoulin", "Vincent", ""], ["Kahou", "Samira Ebrahimi", ""], ["Erhan", "Dumitru", ""], ["Fan", "Ziye", ""], ["Firat", "Orhan", ""], ["Germain", "Mathieu", ""], ["Glorot", "Xavier", ""], ["Goodfellow", "Ian", ""], ["Graham", "Matt", ""], ["Gulcehre", "Caglar", ""], ["Hamel", "Philippe", ""], ["Harlouchet", "Iban", ""], ["Heng", "Jean-Philippe", ""], ["Hidasi", "Bal\u00e1zs", ""], ["Honari", "Sina", ""], ["Jain", "Arjun", ""], ["Jean", "S\u00e9bastien", ""], ["Jia", "Kai", ""], ["Korobov", "Mikhail", ""], ["Kulkarni", "Vivek", ""], ["Lamb", "Alex", ""], ["Lamblin", "Pascal", ""], ["Larsen", "Eric", ""], ["Laurent", "C\u00e9sar", ""], ["Lee", "Sean", ""], ["Lefrancois", "Simon", ""], ["Lemieux", "Simon", ""], ["L\u00e9onard", "Nicholas", ""], ["Lin", "Zhouhan", ""], ["Livezey", "Jesse A.", ""], ["Lorenz", "Cory", ""], ["Lowin", "Jeremiah", ""], ["Ma", "Qianli", ""], ["Manzagol", "Pierre-Antoine", ""], ["Mastropietro", "Olivier", ""], ["McGibbon", "Robert T.", ""], ["Memisevic", "Roland", ""], ["van Merri\u00ebnboer", "Bart", ""], ["Michalski", "Vincent", ""], ["Mirza", "Mehdi", ""], ["Orlandi", "Alberto", ""], ["Pal", "Christopher", ""], ["Pascanu", "Razvan", ""], ["Pezeshki", "Mohammad", ""], ["Raffel", "Colin", ""], ["Renshaw", "Daniel", ""], ["Rocklin", "Matthew", ""], ["Romero", "Adriana", ""], ["Roth", "Markus", ""], ["Sadowski", "Peter", ""], ["Salvatier", "John", ""], ["Savard", "Fran\u00e7ois", ""], ["Schl\u00fcter", "Jan", ""], ["Schulman", "John", ""], ["Schwartz", "Gabriel", ""], ["Serban", "Iulian Vlad", ""], ["Serdyuk", "Dmitriy", ""], ["Shabanian", "Samira", ""], ["Simon", "\u00c9tienne", ""], ["Spieckermann", "Sigurd", ""], ["Subramanyam", "S. Ramana", ""], ["Sygnowski", "Jakub", ""], ["Tanguay", "J\u00e9r\u00e9mie", ""], ["van Tulder", "Gijs", ""], ["Turian", "Joseph", ""], ["Urban", "Sebastian", ""], ["Vincent", "Pascal", ""], ["Visin", "Francesco", ""], ["de Vries", "Harm", ""], ["Warde-Farley", "David", ""], ["Webb", "Dustin J.", ""], ["Willson", "Matthew", ""], ["Xu", "Kelvin", ""], ["Xue", "Lijun", ""], ["Yao", "Li", ""], ["Zhang", "Saizheng", ""], ["Zhang", "Ying", ""]]}, {"id": "1605.05057", "submitter": "Simon Hampe", "authors": "Ewgenij Gawrilow, Simon Hampe, Michael Joswig", "title": "The polymake XML file format", "comments": "8 pages. Extended abstract for the 5th International Congress on\n  Mathematical Software (ICMS), Berlin 2016", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We describe an XML file format for storing data from computations in algebra\nand geometry. We also present a formal specification based on a RELAX-NG\nschema.\n", "versions": [{"version": "v1", "created": "Tue, 17 May 2016 08:40:14 GMT"}], "update_date": "2016-05-18", "authors_parsed": [["Gawrilow", "Ewgenij", ""], ["Hampe", "Simon", ""], ["Joswig", "Michael", ""]]}, {"id": "1605.06381", "submitter": "Tianjiao Sun", "authors": "Tianjiao Sun", "title": "OPESCI-FD: Automatic Code Generation Package for Finite Difference\n  Models", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.MS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this project, we introduce OPESCI-FD, a Python package built on symbolic\nmathematics to automatically generate Finite Difference models from a\nhigh-level description of the model equations. We investigate applying this\nframework to generate the propagator program used in seismic imaging. We\nimplement the 3D velocity-stress FD scheme as an example and demonstrate the\nadvantages of usability, flexibility and accuracy of the framework. The design\nof OPESCI-FD aims to allow rapid development, analysis and optimisation of\nFinite Difference programs. OPESCI-FD is the foundation for continuing\ndevelopment by the OPESCI project team, building on the research presented in\nthis report. This report concludes by reviewing the further developments that\nare already under way, as well as the scope for extension to cater for other\nequations and numerical schemes.\n", "versions": [{"version": "v1", "created": "Fri, 20 May 2016 14:44:55 GMT"}], "update_date": "2016-05-23", "authors_parsed": [["Sun", "Tianjiao", ""]]}]