[{"id": "1311.0378", "submitter": "George Teodoro", "authors": "George Teodoro and Tahsin Kurc and Jun Kong and Lee Cooper and Joel\n  Saltz", "title": "Comparative Performance Analysis of Intel Xeon Phi, GPU, and CPU", "comments": "11 pages, 2 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.PF", "license": "http://creativecommons.org/licenses/publicdomain/", "abstract": "  We investigate and characterize the performance of an important class of\noperations on GPUs and Many Integrated Core (MIC) architectures. Our work is\nmotivated by applications that analyze low-dimensional spatial datasets\ncaptured by high resolution sensors, such as image datasets obtained from whole\nslide tissue specimens using microscopy image scanners. We identify the data\naccess and computation patterns of operations in object segmentation and\nfeature computation categories. We systematically implement and evaluate the\nperformance of these core operations on modern CPUs, GPUs, and MIC systems for\na microscopy image analysis application. Our results show that (1) the data\naccess pattern and parallelization strategy employed by the operations strongly\naffect their performance. While the performance on a MIC of operations that\nperform regular data access is comparable or sometimes better than that on a\nGPU; (2) GPUs are significantly more efficient than MICs for operations and\nalgorithms that irregularly access data. This is a result of the low\nperformance of the latter when it comes to random data access; (3) adequate\ncoordinated execution on MICs and CPUs using a performance aware task\nscheduling strategy improves about 1.29x over a first-come-first-served\nstrategy. The example application attained an efficiency of 84% in an execution\nwith of 192 nodes (3072 CPU cores and 192 MICs).\n", "versions": [{"version": "v1", "created": "Sat, 2 Nov 2013 14:00:40 GMT"}], "update_date": "2013-11-05", "authors_parsed": [["Teodoro", "George", ""], ["Kurc", "Tahsin", ""], ["Kong", "Jun", ""], ["Cooper", "Lee", ""], ["Saltz", "Joel", ""]]}, {"id": "1311.0486", "submitter": "Vineeth Bala Sukumaran", "authors": "Vineeth B. S. and Utpal Mukherji", "title": "On the optimal tradeoff of average service cost rate, average utility\n  rate, and average delay for the state dependent M/M/1 queue", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PF cs.NI math.OC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The optimal tradeoff between average service cost rate, average utility rate,\nand average delay is addressed for a state dependent M/M/1 queueing model, with\ncontrollable queue length dependent service rates and arrival rates. For a\nmodel with a constant arrival rate $\\lambda$ for all queue lengths, we obtain\nan asymptotic characterization of the minimum average delay, when the average\nservice cost rate is a small positive quantity, $V$, more than the minimum\naverage service cost rate required for queue stability. We show that depending\non the value of the arrival rate $\\lambda$, the assumed service cost rate\nfunction, and the possible values of the service rates, the minimum average\ndelay either: a) increases only to a finite value, b) increases without bound\nas $\\log\\frac{1}{V}$, c) increases without bound as $\\frac{1}{V}$, or d)\nincreases without bound as $\\frac{1}{\\sqrt{V}}$, when $V \\downarrow 0$. We then\nextend our analysis to (i) a complementary problem, where the tradeoff of\naverage utility rate and average delay is analysed for a M/M/1 queueing model,\nwith controllable queue length dependent arrival rates, but a constant service\nrate $\\mu$ for all queue lengths, and (ii) a M/M/1 queueing model, with\ncontrollable queue length dependent service rates and arrival rates, for which\nwe obtain an asymptotic characterization of the minimum average delay under\nconstraints on both the average service cost rate as well as the average\nutility rate. The results that we obtain are useful in obtaining intuition as\nwell guidance for the derivation of similar asymptotic lower bounds, such as\nthe Berry-Gallager asymptotic lower bound, for discrete time queueing models.\n", "versions": [{"version": "v1", "created": "Sun, 3 Nov 2013 16:07:43 GMT"}], "update_date": "2013-11-05", "authors_parsed": [["S.", "Vineeth B.", ""], ["Mukherji", "Utpal", ""]]}, {"id": "1311.0960", "submitter": "Yongchol Chon", "authors": "Yong Chol Chon", "title": "The abstract Cauchy problem for the non-stationary bulk queue M(t)|M[k,\n  B]|1", "comments": "8 pages", "journal-ref": null, "doi": null, "report-no": "KISU-MATH-2013-E-R-036", "categories": "math.GM cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We derived state probability equations describing the queue M(t)|M[k, B]|1\nand formulated as an abstract Cauchy problem to investigate by means of the\nsemi-group theory of bounded linear operators in functional analysis. For the\nabstract Cauchy problem of this queue, we determined the eigenfunctions of\nmaximal operator and showed some properties of the Dirichlet operator.\n", "versions": [{"version": "v1", "created": "Tue, 5 Nov 2013 03:42:19 GMT"}, {"version": "v2", "created": "Tue, 25 Mar 2014 15:01:23 GMT"}], "update_date": "2014-03-26", "authors_parsed": [["Chon", "Yong Chol", ""]]}, {"id": "1311.1195", "submitter": "Kunjie Xu", "authors": "Kunjie Xu", "title": "Performance Modeling of BitTorrent Peer-to-Peer File Sharing Networks", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.NI cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  BitTorrent is undoubtedly the most popular P2P file sharing application on\ntoday's Internet. The widespread popularity of BitTorrent has attracted a great\ndeal of attention from networking researchers who conducted various performance\nstudies on it. This paper presents a comprehensive survey of analytical\nperformance modeling techniques for BitTorrent networks. The performance models\nexamined in this study include deterministic models, Markov chain models, fluid\nflow models, and queuing network models. These models evaluate the performance\nmetrics of BitTorrent networks at different regimes with various realistic\nfactors considered. Furthermore, a comparative analysis is conducted on those\nmodeling techniques in the aspects of complexity, accuracy, extensibility, and\nscalability.\n", "versions": [{"version": "v1", "created": "Tue, 5 Nov 2013 20:57:26 GMT"}], "update_date": "2013-11-06", "authors_parsed": [["Xu", "Kunjie", ""]]}, {"id": "1311.1338", "submitter": "Mario K\\\"oppen", "authors": "Mario Koeppen and Kei Ohnishi", "title": "Significance Relations for the Benchmarking of Meta-Heuristic Algorithms", "comments": "6 pages, 2 figures, 1 table", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DS cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The experimental analysis of meta-heuristic algorithm performance is usually\nbased on comparing average performance metric values over a set of algorithm\ninstances. When algorithms getting tight in performance gains, the additional\nconsideration of significance of a metric improvement comes into play. However,\nfrom this moment the comparison changes from an absolute to a relative mode.\nHere the implications of this paradigm shift are investigated. Significance\nrelations are formally established. Based on this, a trade-off between\nincreasing cycle-freeness of the relation and small maximum sets can be\nidentified, allowing for the selection of a proper significance level and\nresulting ranking of a set of algorithms. The procedure is exemplified on the\nCEC'05 benchmark of real parameter single objective optimization problems. The\nsignificance relation here is based on awarding ranking points for relative\nperformance gains, similar to the Borda count voting method or the Wilcoxon\nsigned rank test. In the particular CEC'05 case, five ranks for algorithm\nperformance can be clearly identified.\n", "versions": [{"version": "v1", "created": "Wed, 6 Nov 2013 10:20:56 GMT"}], "update_date": "2013-11-07", "authors_parsed": [["Koeppen", "Mario", ""], ["Ohnishi", "Kei", ""]]}, {"id": "1311.1907", "submitter": "Vibha  Rajput", "authors": "Vibha Rajput, Alok Katiyar", "title": "Proactive bottleneck performance analysis in parallel computing using\n  openMP", "comments": "8 Pages,6 figure", "journal-ref": "IJASCSE, Volume 2, Issue 5, 2013", "doi": null, "report-no": null, "categories": "cs.DC cs.PF", "license": "http://creativecommons.org/licenses/by/3.0/", "abstract": "  The aim of parallel computing is to increase an application performance by\nexecuting the application on multiple processors. OpenMP is an API that\nsupports multi platform shared memory programming model and shared-memory\nprograms are typically executed by multiple threads. The use of multi threading\ncan enhance the performance of application but its excessive use can degrade\nthe performance. This paper describes a novel approach to avoid bottlenecks in\napplication and provide some techniques to improve performance in OpenMP\napplication. This paper analyzes bottleneck performance as bottleneck inhibits\nperformance. Performance of multi threaded applications is limited by a variety\nof bottlenecks, e.g. critical sections, barriers and so on. This paper provides\nsome tips how to avoid performance bottleneck problems. This paper focuses on\nhow to reduce overheads and overall execution time to get better performance of\napplication.\n", "versions": [{"version": "v1", "created": "Fri, 8 Nov 2013 09:17:36 GMT"}], "update_date": "2013-11-12", "authors_parsed": [["Rajput", "Vibha", ""], ["Katiyar", "Alok", ""]]}, {"id": "1311.2851", "submitter": "Nihar Shah", "authors": "Nihar B. Shah, Kangwook Lee, Kannan Ramchandran", "title": "When Do Redundant Requests Reduce Latency ?", "comments": "Extended version of paper presented at Allerton Conference 2013", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.NI cs.DC cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Several systems possess the flexibility to serve requests in more than one\nway. For instance, a distributed storage system storing multiple replicas of\nthe data can serve a request from any of the multiple servers that store the\nrequested data, or a computational task may be performed in a compute-cluster\nby any one of multiple processors. In such systems, the latency of serving the\nrequests may potentially be reduced by sending \"redundant requests\": a request\nmay be sent to more servers than needed, and it is deemed served when the\nrequisite number of servers complete service. Such a mechanism trades off the\npossibility of faster execution of at least one copy of the request with the\nincrease in the delay due to an increased load on the system. Due to this\ntradeoff, it is unclear when redundant requests may actually help. Several\nrecent works empirically evaluate the latency performance of redundant requests\nin diverse settings.\n  This work aims at an analytical study of the latency performance of redundant\nrequests, with the primary goals of characterizing under what scenarios sending\nredundant requests will help (and under what scenarios they will not help), as\nwell as designing optimal redundant-requesting policies. We first present a\nmodel that captures the key features of such systems. We show that when service\ntimes are i.i.d. memoryless or \"heavier\", and when the additional copies of\nalready-completed jobs can be removed instantly, redundant requests reduce the\naverage latency. On the other hand, when service times are \"lighter\" or when\nservice times are memoryless and removal of jobs is not instantaneous, then not\nhaving any redundancy in the requests is optimal under high loads. Our results\nhold for arbitrary arrival processes.\n", "versions": [{"version": "v1", "created": "Thu, 7 Nov 2013 02:43:11 GMT"}], "update_date": "2013-11-13", "authors_parsed": [["Shah", "Nihar B.", ""], ["Lee", "Kangwook", ""], ["Ramchandran", "Kannan", ""]]}, {"id": "1311.3686", "submitter": "Brijender Kahanwal Dr.", "authors": "Brijender Kahanwal, Dr. Tejinder Pal Singh and Dr. R. K. Tuteja", "title": "Performance Evaluation of Java File Security System (JFSS)", "comments": "7 pages, 5 figures, journal", "journal-ref": "Pelagia Research Library Advances in Applied Science Research,\n  Vol. 2(6), pp. 254-260, 2011", "doi": null, "report-no": null, "categories": "cs.OS cs.CR cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Security is a critical issue of the modern file and storage systems, it is\nimperative to protect the stored data from unauthorized access. We have\ndeveloped a file security system named as Java File Security System (JFSS) [1]\nthat guarantee the security to files on the demand of all users. It has been\ndeveloped on Java platform. Java has been used as programming language in order\nto provide portability, but it enforces some performance limitations. It is\ndeveloped in FUSE (File System in User space) [3]. Many efforts have been done\nover the years for developing file systems in user space (FUSE). All have their\nown merits and demerits. In this paper we have evaluated the performance of\nJava File Security System (JFSS). Over and over again, the increased security\ncomes at the expense of user convenience, performance or compatibility with\nother systems. JFSS system performance evaluations show that encryption\noverheads are modest as compared to security.\n", "versions": [{"version": "v1", "created": "Wed, 13 Nov 2013 10:53:02 GMT"}], "update_date": "2014-03-25", "authors_parsed": [["Kahanwal", "Brijender", ""], ["Singh", "Dr. Tejinder Pal", ""], ["Tuteja", "Dr. R. K.", ""]]}, {"id": "1311.3928", "submitter": "Stefan Kluth", "authors": "Stefan Kluth", "title": "HS06 Benchmark for an ARM Server", "comments": "three pages, two figures", "journal-ref": null, "doi": "10.1088/1742-6596/513/6/062025", "report-no": "MPP-2013-295", "categories": "physics.comp-ph cs.PF hep-ex", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We benchmarked an ARM cortex-A9 based server system with a four-core CPU\nrunning at 1.1 GHz. The system used Ubuntu 12.04 as operating system and the\nHEPSPEC 2006 (HS06) benchmarking suite was compiled natively with gcc-4.4 on\nthe system. The benchmark was run for various settings of the relevant gcc\ncompiler options. We did not find significant influence from the compiler\noptions on the benchmark result. The final HS06 benchmark result is 10.4.\n", "versions": [{"version": "v1", "created": "Fri, 15 Nov 2013 17:17:21 GMT"}], "update_date": "2015-06-17", "authors_parsed": [["Kluth", "Stefan", ""]]}, {"id": "1311.5740", "submitter": "Joris Borgdorff", "authors": "Joris Borgdorff, Mariusz Mamonski, Bartosz Bosak, Krzysztof Kurowski,\n  Mohamed Ben Belgacem, Bastien Chopard, Derek Groen, Peter V. Coveney, Alfons\n  G. Hoekstra", "title": "Distributed Multiscale Computing with MUSCLE 2, the Multiscale Coupling\n  Library and Environment", "comments": "18 pages, 22 figures, submitted to journal", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.CE cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present the Multiscale Coupling Library and Environment: MUSCLE 2. This\nmultiscale component-based execution environment has a simple to use Java, C++,\nC, Python and Fortran API, compatible with MPI, OpenMP and threading codes. We\ndemonstrate its local and distributed computing capabilities and compare its\nperformance to MUSCLE 1, file copy, MPI, MPWide, and GridFTP. The local\nthroughput of MPI is about two times higher, so very tightly coupled code\nshould use MPI as a single submodel of MUSCLE 2; the distributed performance of\nGridFTP is lower, especially for small messages. We test the performance of a\ncanal system model with MUSCLE 2, where it introduces an overhead as small as\n5% compared to MPI.\n", "versions": [{"version": "v1", "created": "Fri, 22 Nov 2013 13:02:15 GMT"}], "update_date": "2013-11-25", "authors_parsed": [["Borgdorff", "Joris", ""], ["Mamonski", "Mariusz", ""], ["Bosak", "Bartosz", ""], ["Kurowski", "Krzysztof", ""], ["Belgacem", "Mohamed Ben", ""], ["Chopard", "Bastien", ""], ["Groen", "Derek", ""], ["Coveney", "Peter V.", ""], ["Hoekstra", "Alfons G.", ""]]}, {"id": "1311.5806", "submitter": "Ravi Mazumdar Dr", "authors": "Arpan Mukhopadhyay and Ravi R. Mazumdar", "title": "Analysis of Load Balancing in Large Heterogeneous Processor Sharing\n  Systems", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.PF math.OC math.PR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We analyze randomized dynamic load balancing schemes for multi-server\nprocessor sharing systems when the number of servers in the system is large and\nthe servers have heterogeneous service rates. In particular, we focus on the\nclassical power-of-two load balancing scheme and a variant of it in which a\nnewly arrived job is assigned to the server having the least instantaneous\nLagrange shadow cost among two randomly chosen servers. The instantaneous\nLagrange shadow cost at a server is given by the ratio of the number of\nunfinished jobs at the server to the capacity of the server. Two different\napproaches of analysis are presented for each scheme. For exponential job\nlength distribution, the analysis is done using the mean field approach and for\nmore general job length distributions the analysis is carried out assuming an\nasymptotic independence property. Analytical expressions to compute mean\nsojourn time of jobs are found for both schemes. Asymptotic insensitivity of\nthe schemes to the type of job length distribution is established. Numerical\nresults are presented to validate the theoretical results and to show that,\nunlike the homogeneous scenario, the power-of-two type schemes considered in\nthis paper may not always result in better behaviour in terms of the mean\nsojourn time of jobs.\n", "versions": [{"version": "v1", "created": "Fri, 22 Nov 2013 16:44:35 GMT"}, {"version": "v2", "created": "Mon, 9 Feb 2015 22:07:16 GMT"}], "update_date": "2015-02-11", "authors_parsed": [["Mukhopadhyay", "Arpan", ""], ["Mazumdar", "Ravi R.", ""]]}]