[{"id": "1105.1811", "submitter": "Niall Douglas", "authors": "Niall Douglas", "title": "User Mode Memory Page Allocation: A Silver Bullet For Memory Allocation?", "comments": "10 pages. Rejected from ISMM11", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.PF", "license": "http://creativecommons.org/licenses/by/3.0/", "abstract": "  This paper proposes a novel solution: the elimination of paged virtual memory\nand partial outsourcing of memory page allocation and manipulation from the\noperating system kernel into the individual process' user space - a user mode\npage allocator - which allows an application to have direct, bare metal access\nto the page mappings used by the hardware Memory Management Unit (MMU) for its\npart of the overall address space. A user mode page allocator based emulation\nof the mmap() abstraction layer of dlmalloc is then benchmarked against the\ntraditional kernel mode implemented mmap() in a series of synthetic Monte-Carlo\nand real world application settings. Given the superb synthetic and positive\nreal world results from the profiling conducted, this paper proposes that with\nproper operating system and API support one could gain a further order higher\nperformance again while keeping allocator performance invariant to the amount\nof memory being allocated or freed i.e. a 100x performance improvement or more\nin some common use cases. It is rare that through a simple and easy to\nimplement API and operating system structure change one can gain a Silver\nBullet with the potential for a second one.\n", "versions": [{"version": "v1", "created": "Mon, 9 May 2011 22:26:15 GMT"}], "update_date": "2011-05-11", "authors_parsed": [["Douglas", "Niall", ""]]}, {"id": "1105.1815", "submitter": "Niall Douglas", "authors": "Niall Douglas", "title": "User Mode Memory Page Management: An old idea applied anew to the memory\n  wall problem", "comments": "6 pages. Rejected from MSPC11", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.OS cs.PF", "license": "http://creativecommons.org/licenses/by/3.0/", "abstract": "  It is often said that one of the biggest limitations on computer performance\nis memory bandwidth (i.e.\"the memory wall problem\"). In this position paper, I\nargue that if historical trends in computing evolution (where growth in\navailable capacity is exponential and reduction in its access latencies is\nlinear) continue as they have, then this view is wrong - in fact we ought to be\nconcentrating on reducing whole system memory access latencies wherever\npossible, and by \"whole system\" I mean that we ought to look at how software\ncan be unnecessarily wasteful with memory bandwidth due to legacy design\ndecisions. To this end I conduct a feasibility study to determine whether we\nought to virtualise the MMU for each application process such that it has\ndirect access to its own MMU page tables and the memory allocated to a process\nis managed exclusively by the process and not the kernel. I find under typical\nconditions that nearly scale invariant performance to memory allocation size is\npossible such that hundreds of megabytes of memory can be allocated, relocated,\nswapped and deallocated in almost the same time as kilobytes (e.g. allocating\n8Mb is 10x quicker under this experimental allocator than a conventional\nallocator, and resizing a 128Kb block to 256Kb block is 4.5x faster). I find\nthat first time page access latencies are improved tenfold; moreover, because\nthe kernel page fault handler is never called, the lack of cache pollution\nimproves whole application memory access latencies increasing performance by up\nto 2x. Finally, I try binary patching existing applications to use the\nexperimental allocation technique, finding almost universal performance\nimprovements without having to recompile these applications to make better use\nof the new facilities.\n", "versions": [{"version": "v1", "created": "Mon, 9 May 2011 22:39:46 GMT"}], "update_date": "2011-05-11", "authors_parsed": [["Douglas", "Niall", ""]]}, {"id": "1105.2264", "submitter": "Artem Chebotko", "authors": "Craig Franke, Samuel Morin, Artem Chebotko, John Abraham, Pearl\n  Brazier", "title": "Distributed Semantic Web Data Management in HBase and MySQL Cluster", "comments": "In Proc. of the 4th IEEE International Conference on Cloud Computing\n  (CLOUD'11)", "journal-ref": null, "doi": "10.1109/CLOUD.2011.19", "report-no": null, "categories": "cs.DB cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Various computing and data resources on the Web are being enhanced with\nmachine-interpretable semantic descriptions to facilitate better search,\ndiscovery and integration. This interconnected metadata constitutes the\nSemantic Web, whose volume can potentially grow the scale of the Web. Efficient\nmanagement of Semantic Web data, expressed using the W3C's Resource Description\nFramework (RDF), is crucial for supporting new data-intensive,\nsemantics-enabled applications. In this work, we study and compare two\napproaches to distributed RDF data management based on emerging cloud computing\ntechnologies and traditional relational database clustering technologies. In\nparticular, we design distributed RDF data storage and querying schemes for\nHBase and MySQL Cluster and conduct an empirical comparison of these approaches\non a cluster of commodity machines using datasets and queries from the Third\nProvenance Challenge and Lehigh University Benchmark. Our study reveals\ninteresting patterns in query evaluation, shows that our algorithms are\npromising, and suggests that cloud computing has a great potential for scalable\nSemantic Web data management.\n", "versions": [{"version": "v1", "created": "Wed, 11 May 2011 17:46:15 GMT"}], "update_date": "2016-11-18", "authors_parsed": [["Franke", "Craig", ""], ["Morin", "Samuel", ""], ["Chebotko", "Artem", ""], ["Abraham", "John", ""], ["Brazier", "Pearl", ""]]}, {"id": "1105.4301", "submitter": "Neil J. Gunther", "authors": "Neil J. Gunther, Shanti Subramanyam, Stefan Parvu", "title": "A Methodology for Optimizing Multithreaded System Scalability on\n  Multi-cores", "comments": "21 pages, 11 figures. To appear in \"Programming Multi-core and\n  Many-core Computing Systems,\" eds. S. Pllana and F. Xhafa, Wiley Series on\n  Parallel and Distributed Computing", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We show how to quantify scalability with the Universal Scalability Law (USL)\nby applying it to performance measurements of memcached, J2EE, and Weblogic on\nmulti-core platforms. Since commercial multicores are essentially black-boxes,\nthe accessible performance gains are primarily available at the application\nlevel. We also demonstrate how our methodology can identify the most\nsignificant performance tuning opportunities to optimize application\nscalability, as well as providing an easy means for exploring other aspects of\nthe multi-core system design space.\n", "versions": [{"version": "v1", "created": "Sun, 22 May 2011 01:12:11 GMT"}], "update_date": "2011-05-24", "authors_parsed": [["Gunther", "Neil J.", ""], ["Subramanyam", "Shanti", ""], ["Parvu", "Stefan", ""]]}, {"id": "1105.4341", "submitter": "Quan-Lin Li", "authors": "Quan-Lin Li, Meng Wang, John C.S. Lui, Yang Wang", "title": "The Chaos of Propagation in a Retrial Supermarket Model", "comments": "47 pages, 5 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.NI cs.PF math.DS math.PR", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  When decomposing the total orbit into $N$ sub-orbits (or simply orbits)\nrelated to each of $N$ servers and through comparing the numbers of customers\nin these orbits, we introduce a retrial supermarket model of $N$ identical\nservers, where two probing-server choice numbers are respectively designed for\ndynamically allocating each primary arrival and each retrial arrival into these\norbits when the chosen servers are all busy. Note that the designed purpose of\nthe two choice numbers can effectively improve performance measures of this\nretrial supermarket model.\n  This paper analyzes a simple and basic retrial supermarket model of N\nidentical servers, that is, Poisson arrivals, exponential service and retrial\ntimes. To this end, we first provide a detailed probability computation to set\nup an infinite-dimensional system of differential equations (or mean-field\nequations) satisfied by the expected fraction vector. Then, as N goes to\ninfinity, we apply the operator semigroup to obtaining the mean-field limit (or\nchaos of propagation) for the sequence of Markov processes which express the\nstate of this retrial supermarket model. Specifically, some simple and basic\nconditions for the mean-field limit as well as for the Lipschitz condition are\nestablished through the first two moments of the queue length in any orbit.\nFinally, we show that the fixed point satisfies a system of nonlinear equations\nwhich is an interesting networking generalization of the tail equations given\nin the M/M/1 retrial queue, and also use the fixed point to give performance\nanalysis of this retrial supermarket model through numerical computation.\n", "versions": [{"version": "v1", "created": "Sun, 22 May 2011 14:51:29 GMT"}, {"version": "v2", "created": "Wed, 1 Jan 2014 08:06:58 GMT"}], "update_date": "2015-03-19", "authors_parsed": [["Li", "Quan-Lin", ""], ["Wang", "Meng", ""], ["Lui", "John C. S.", ""], ["Wang", "Yang", ""]]}, {"id": "1105.5062", "submitter": "Michele Mazzucco", "authors": "Michele Mazzucco and Marlon Dumas", "title": "Reserved or On-Demand Instances? A Revenue Maximization Model for Cloud\n  Providers", "comments": "8 pages, to appear in Proceedings of the 4th International Conference\n  on Cloud Computing (IEEE Cloud 2011), Washington DC (USA), July 2011", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We examine the problem of managing a server farm in a way that attempts to\nmaximize the net revenue earned by a cloud provider by renting servers to\ncustomers according to a typical Platform-as-a-Service model. The Cloud\nprovider offers its resources to two classes of customers: `premium' and\n`basic'. Premium customers pay upfront fees to reserve servers for a specified\nperiod of time (e.g. a year). Premium customers can submit jobs for their\nreserved servers at any time and pay a fee for the server-hours they use. The\nprovider is liable to pay a penalty every time a `premium' job can not be\nexecuted due to lack of resources. On the other hand, `basic' customers are\nserved on a best-effort basis, and pay a server-hour fee that may be higher\nthan the one paid by premium customers. The provider incurs energy costs when\nrunning servers. Hence, it has an incentive to turn off idle servers. The\nquestion of how to choose the number of servers to allocate to each pool (basic\nand premium) is answered by analyzing a suitable queuing model and maximizing a\nrevenue function. Experimental results show that the proposed scheme adapts to\ndifferent traffic conditions, penalty levels, energy costs and usage fees.\n", "versions": [{"version": "v1", "created": "Wed, 25 May 2011 15:22:00 GMT"}], "update_date": "2015-03-19", "authors_parsed": [["Mazzucco", "Michele", ""], ["Dumas", "Marlon", ""]]}, {"id": "1105.5481", "submitter": "Masahiko Okumura", "authors": "Shixun Zhang, Shinichi Yamagiwa, Masahiko Okumura, Seiji Yunoki", "title": "Performance Acceleration of Kernel Polynomial Method Applying Graphics\n  Processing Units", "comments": "IPDPS/APDCM11, pp. 564-571, Anchorage USA, May 2011", "journal-ref": null, "doi": null, "report-no": null, "categories": "physics.comp-ph cond-mat.other cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The Kernel Polynomial Method (KPM) is one of the fast diagonalization methods\nused for simulations of quantum systems in research fields of condensed matter\nphysics and chemistry. The algorithm has a difficulty to be parallelized on a\ncluster computer or a supercomputer due to the fine-gain recursive\ncalculations. This paper proposes an implementation of the KPM on the recent\ngraphics processing units (GPU) where the recursive calculations are able to be\nparallelized in the massively parallel environment. This paper also illustrates\nperformance evaluations regarding the cases when the actual simulation\nparameters are applied, the one for increased intensive calculations and the\none for increased amount of memory usage. Finally, it concludes that the\nperformance on GPU promises very high performance compared to the one on CPU\nand reduces the overall simulation time.\n", "versions": [{"version": "v1", "created": "Fri, 27 May 2011 05:53:46 GMT"}], "update_date": "2011-05-30", "authors_parsed": [["Zhang", "Shixun", ""], ["Yamagiwa", "Shinichi", ""], ["Okumura", "Masahiko", ""], ["Yunoki", "Seiji", ""]]}, {"id": "1105.5881", "submitter": "Mingyu Chen", "authors": "Mingyu Chen, David A. Bader", "title": "On the random access performance of Cell Broadband Engine with graph\n  analysis application", "comments": "8 pages, 10 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CE cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The Cell Broad Engine (BE) Processor has unique memory access architecture\nbesides its powerful computing engines. Many computing-intensive applications\nhave been ported to Cell/BE successfully. But memory-intensive applications are\nrarely investigated except for several micro benchmarks. Since Cell/BE has\npowerful software visible DMA engine, this paper studies on whether Cell/BE is\nsuit for applica- tions with large amount of random memory accesses. Two\nbenchmarks, GUPS and SSCA#2, are used. The latter is a rather complex one that\nin representative of real world graph analysis applications. We find both\nbenchmarks have good performance on Cell/BE based IBM QS20/22. Com- pared with\n2 conventional multi-processor systems with the same core/thread number, GUPS\nis about 40-80% fast and SSCA#2 about 17-30% fast. The dynamic load balanc- ing\nand software pipeline for optimizing SSCA#2 are intro- duced. Based on the\nexperiment, the potential of Cell/BE for random access is analyzed in detail as\nwell as its limita- tions of memory controller, atomic engine and TLB manage-\nment.Our research shows although more programming effort are needed, Cell/BE\nhas the potencial for irregular memory access applications.\n", "versions": [{"version": "v1", "created": "Mon, 30 May 2011 07:07:59 GMT"}, {"version": "v2", "created": "Sun, 5 Jun 2011 07:10:43 GMT"}], "update_date": "2015-03-19", "authors_parsed": [["Chen", "Mingyu", ""], ["Bader", "David A.", ""]]}, {"id": "1105.5986", "submitter": "Rena Bakhshi", "authors": "Rena Bakhshi and Daniela Gavidia and Wan Fokkink and Maarten van Steen", "title": "A Modeling Framework for Gossip-based Information Spread", "comments": "25 pages, including appendix", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.DM cs.IT cs.PF math.IT", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present an analytical framework for gossip protocols based on the pairwise\ninformation exchange between interacting nodes. This framework allows for\nstudying the impact of protocol parameters on the performance of the protocol.\nPreviously, gossip-based information dissemination protocols have been analyzed\nunder the assumption of perfect, lossless communication channels. We extend our\nframework for the analysis of networks with lossy channels. We show how the\npresence of message loss, coupled with specific topology configurations,impacts\nthe expected behavior of the protocol. We validate the obtained models against\nsimulations for two protocols.\n", "versions": [{"version": "v1", "created": "Mon, 30 May 2011 13:20:43 GMT"}], "update_date": "2011-05-31", "authors_parsed": [["Bakhshi", "Rena", ""], ["Gavidia", "Daniela", ""], ["Fokkink", "Wan", ""], ["van Steen", "Maarten", ""]]}]