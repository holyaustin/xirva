[{"id": "0909.0633", "submitter": "Amr Rizk", "authors": "Amr Rizk, Markus Fidler", "title": "Statistical End-to-end Performance Bounds for Networks under Long Memory\n  FBM Cross Traffic", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.NI cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Fractional Brownian motion (fBm) emerged as a useful model for self-similar\nand long-range dependent Internet traffic. Approximate performance measures are\nknown from large deviations theory for single queuing systems with fBm through\ntraffic. In this paper we derive end-to-end performance bounds for a through\nflow in a network of tandem queues under fBm cross traffic. To this end, we\nprove a rigorous sample path envelope for fBm that complements previous\napproximate results. We find that both approaches agree in their outcome that\noverflow probabilities for fBm traffic have a Weibullian tail. We employ the\nsample path envelope and the concept of leftover service curves to model the\nremaining service after scheduling fBm cross traffic at a system. Using\ncomposition results for tandem systems from the stochastic network calculus we\nderive end-to-end statistical performance bounds for individual flows in\nnetworks under fBm cross traffic. We discover that these bounds grow in O(n\n(log n)^(1/(2-2H))) for n systems in series where H is the Hurst parameter of\nthe fBm cross traffic. We show numerical results on the impact of the\nvariability and the correlation of fBm traffic on network performance.\n", "versions": [{"version": "v1", "created": "Thu, 3 Sep 2009 12:32:46 GMT"}], "update_date": "2009-09-04", "authors_parsed": [["Rizk", "Amr", ""], ["Fidler", "Markus", ""]]}, {"id": "0909.1758", "submitter": "Nicolas Bruno", "authors": "Nicolas Bruno (Microsoft)", "title": "Teaching an Old Elephant New Tricks", "comments": "CIDR 2009", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DB cs.DS cs.PF", "license": "http://creativecommons.org/licenses/by/3.0/", "abstract": "  In recent years, column stores (or C-stores for short) have emerged as a\nnovel approach to deal with read-mostly data warehousing applications.\nExperimental evidence suggests that, for certain types of queries, the new\nfeatures of C-stores result in orders of magnitude improvement over traditional\nrelational engines. At the same time, some C-store proponents argue that\nC-stores are fundamentally different from traditional engines, and therefore\ntheir benefits cannot be incorporated into a relational engine short of a\ncomplete rewrite. In this paper we challenge this claim and show that many of\nthe benefits of C-stores can indeed be simulated in traditional engines with no\nchanges whatsoever. We then identify some limitations of our ?pure-simulation?\napproach for the case of more complex queries. Finally, we predict that\ntraditional relational engines will eventually leverage most of the benefits of\nC-stores natively, as is currently happening in other domains such as XML data.\n", "versions": [{"version": "v1", "created": "Wed, 9 Sep 2009 18:00:21 GMT"}], "update_date": "2009-09-15", "authors_parsed": [["Bruno", "Nicolas", "", "Microsoft"]]}, {"id": "0909.1772", "submitter": "Harumi Kuno", "authors": "Goetz Graefe (HP), Harumi Kuno (Hewlett-Packard Co.), Janet Wiener\n  (Hewlett-Packard, Co.)", "title": "Visualizing the robustness of query execution", "comments": "CIDR 2009", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DB cs.PF", "license": "http://creativecommons.org/licenses/by/3.0/", "abstract": "  In database query processing, actual run-time conditions (e.g., actual\nselectivities and actual available memory) very often differ from compile-time\nexpectations of run-time conditions (e.g., estimated predicate selectivities\nand anticipated memory availability). Robustness of query processing can be\ndefined as the ability to handle unexpected conditions. Robustness of query\nexecution, specifically, can be defined as the ability to process a specific\nplan efficiently in an unexpected condition. We focus on query execution\n(run-time), ignoring query optimization (compile-time), in order to complement\nexisting research and to explore untapped potential for improved robustness in\ndatabase query processing.\n  One of our initial steps has been to devise diagrams or maps that show how\nwell plans perform in the face of varying run-time conditions and how\ngracefully a system's query architecture, operators, and their implementation\ndegrade in the face of adverse conditions. In this paper, we show several kinds\nof diagrams with data from three real systems and report on what we have\nlearned both about these visualization techniques and about the three database\nsystems\n", "versions": [{"version": "v1", "created": "Wed, 9 Sep 2009 18:09:52 GMT"}], "update_date": "2009-09-15", "authors_parsed": [["Graefe", "Goetz", "", "HP"], ["Kuno", "Harumi", "", "Hewlett-Packard Co."], ["Wiener", "Janet", "", "Hewlett-Packard, Co."]]}, {"id": "0909.1780", "submitter": "Luc Bouganim", "authors": "Luc Bouganim (INRIA), Bj\\\"orn J\\'onsson (Reykjav\\'ik University),\n  Philippe Bonnet (Department of Computer Science, University of Copenhagen)", "title": "uFLIP: Understanding Flash IO Patterns", "comments": "CIDR 2009", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PF", "license": "http://creativecommons.org/licenses/by/3.0/", "abstract": "  Does the advent of flash devices constitute a radical change for secondary\nstorage? How should database systems adapt to this new form of secondary\nstorage? Before we can answer these questions, we need to fully understand the\nperformance characteristics of flash devices. More specifically, we want to\nestablish what kind of IOs should be favored (or avoided) when designing\nalgorithms and architectures for flash-based systems. In this paper, we focus\non flash IO patterns, that capture relevant distribution of IOs in time and\nspace, and our goal is to quantify their performance. We define uFLIP, a\nbenchmark for measuring the response time of flash IO patterns. We also present\na benchmarking methodology which takes into account the particular\ncharacteristics of flash devices. Finally, we present the results obtained by\nmeasuring eleven flash devices, and derive a set of design hints that should\ndrive the development of flash-based systems on current devices.\n", "versions": [{"version": "v1", "created": "Wed, 9 Sep 2009 18:10:26 GMT"}], "update_date": "2009-09-15", "authors_parsed": [["Bouganim", "Luc", "", "INRIA"], ["J\u00f3nsson", "Bj\u00f6rn", "", "Reykjav\u00edk University"], ["Bonnet", "Philippe", "", "Department of Computer Science, University of Copenhagen"]]}, {"id": "0909.1784", "submitter": "Stavros Harizopoulos", "authors": "Stavros Harizopoulos (HP Labs), Mehul Shah, Justin Meza (UCLA),\n  Parthasarathy Ranganathan (HP Labs)", "title": "Energy Efficiency: The New Holy Grail of Data Management Systems\n  Research", "comments": "CIDR 2009", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DB cs.PF", "license": "http://creativecommons.org/licenses/by/3.0/", "abstract": "  Energy costs are quickly rising in large-scale data centers and are soon\nprojected to overtake the cost of hardware. As a result, data center operators\nhave recently started turning into using more energy-friendly hardware. Despite\nthe growing body of research in power management techniques, there has been\nlittle work to date on energy efficiency from a data management software\nperspective.\n  In this paper, we argue that hardware-only approaches are only part of the\nsolution, and that data management software will be key in optimizing for\nenergy efficiency. We discuss the problems arising from growing energy use in\ndata centers and the trends that point to an increasing set of opportunities\nfor software-level optimizations. Using two simple experiments, we illustrate\nthe potential of such optimizations, and, motivated by these examples, we\ndiscuss general approaches for reducing energy waste. Lastly, we point out\nexisting places within database systems that are promising for\nenergy-efficiency optimizations and urge the data management systems community\nto shift focus from performance-oriented research to energy-efficient\ncomputing.\n", "versions": [{"version": "v1", "created": "Wed, 9 Sep 2009 18:10:39 GMT"}], "update_date": "2009-09-15", "authors_parsed": [["Harizopoulos", "Stavros", "", "HP Labs"], ["Shah", "Mehul", "", "UCLA"], ["Meza", "Justin", "", "UCLA"], ["Ranganathan", "Parthasarathy", "", "HP Labs"]]}, {"id": "0909.2024", "submitter": "Chi Anh La", "authors": "Chi-Anh La, Pietro Michiardi, Claudio Casetti, Carla-Fabiana\n  Chiasserini, Marco Fiore", "title": "A Lightweight Distributed Solution to Content Replication in Mobile\n  Networks", "comments": "12 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.NI cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Performance and reliability of content access in mobile networks is\nconditioned by the number and location of content replicas deployed at the\nnetwork nodes. Facility location theory has been the traditional, centralized\napproach to study content replication: computing the number and placement of\nreplicas in a network can be cast as an uncapacitated facility location\nproblem. The endeavour of this work is to design a distributed, lightweight\nsolution to the above joint optimization problem, while taking into account the\nnetwork dynamics. In particular, we devise a mechanism that lets nodes share\nthe burden of storing and providing content, so as to achieve load balancing,\nand decide whether to replicate or drop the information so as to adapt to a\ndynamic content demand and time-varying topology. We evaluate our mechanism\nthrough simulation, by exploring a wide range of settings and studying\nrealistic content access mechanisms that go beyond the traditional\nassumptionmatching demand points to their closest content replica. Results show\nthat our mechanism, which uses local measurements only, is: (i) extremely\nprecise in approximating an optimal solution to content placement and\nreplication; (ii) robust against network mobility; (iii) flexible in\naccommodating various content access patterns, including variation in time and\nspace of the content demand.\n", "versions": [{"version": "v1", "created": "Thu, 10 Sep 2009 19:43:30 GMT"}], "update_date": "2009-09-11", "authors_parsed": [["La", "Chi-Anh", ""], ["Michiardi", "Pietro", ""], ["Casetti", "Claudio", ""], ["Chiasserini", "Carla-Fabiana", ""], ["Fiore", "Marco", ""]]}, {"id": "0909.2297", "submitter": "Andias Wira-Alam T", "authors": "Andias Wira-Alam", "title": "Simulation of Resource Usage in Parallel Evolutionary Peptide\n  Optimization using JavaSpaces Technology", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Peptide Optimization is a highly complex problem and it takes very long time\nof computation. This optimization process uses many software applications in a\ncluster running GNU/Linux Operating System that perform special tasks. The\napplication to organize the whole optimization process had been already\ndeveloped, namely SEPP (System for Evolutionary Pareto Optimization of\nPeptides/Polymers). A single peptide optimization takes a lot of computation\ntime to produce a certain number of individuals. However, it can be accelerated\nby increasing the degree of parallelism as well as the number of nodes\n(processors) in the cluster. In this master thesis, I build a model simulating\nthe interplay of the programs so that the usage of each resource (processor)\ncan be determined and also the approximated time needed for the overall\noptimization process. There are two Evolutionary Algorithms that could be used\nin the optimization, namely Generation-based and Steady-state Evolutionary\nAlgorithm. The results of each Evolutionary Algorithm are shown based on the\nsimulations. Moreover, the results are also compared by using different\nparameters (the degree of parallelism and the number of processors) in the\nsimulation to give an overview of the advantages and the disadvantages of the\nalgorithms in terms of computation time and resource usage. The model is built\nup using JavaSpaces Technology.\n", "versions": [{"version": "v1", "created": "Sun, 13 Sep 2009 12:36:22 GMT"}], "update_date": "2009-12-05", "authors_parsed": [["Wira-Alam", "Andias", ""]]}, {"id": "0909.3356", "submitter": "Chi-Kin Chau", "authors": "Chi-Kin Chau, Minghua Chen, Soung Chang Liew", "title": "Capacity of Large-scale CSMA Wireless Networks", "comments": "Extended version of the paper presented at ACM MobiCom 09'. Improved\n  Model for Aggregate Carrier-Sensing", "journal-ref": "IEEE/ACM Transactions on Networking, Vol. 19, No. 3, pp893-906\n  (Jun 2011)", "doi": "10.1109/TNET.2010.2095880", "report-no": null, "categories": "cs.NI cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In the literature, asymptotic studies of multi-hop wireless network capacity\noften consider only centralized and deterministic TDMA (time-division\nmulti-access) coordination schemes. There have been fewer studies of the\nasymptotic capacity of large-scale wireless networks based on CSMA\n(carrier-sensing multi-access), which schedules transmissions in a distributed\nand random manner. With the rapid and widespread adoption of CSMA technology, a\ncritical question is that whether CSMA networks can be as scalable as TDMA\nnetworks. To answer this question and explore the capacity of CSMA networks, we\nfirst formulate the models of CSMA protocols to take into account the unique\nCSMA characteristics not captured by existing interference models in the\nliterature. These CSMA models determine the feasible states, and consequently\nthe capacity of CSMA networks. We then study the throughput efficiency of CSMA\nscheduling as compared to TDMA. Finally, we tune the CSMA parameters so as to\nmaximize the throughput to the optimal order. As a result, we show that CSMA\ncan achieve throughput as $\\Omega(\\frac{1}{\\sqrt{n}})$, the same order as\noptimal centralized TDMA, on uniform random networks. Our CSMA scheme makes use\nof an efficient backbone-peripheral routing scheme and a careful design of dual\ncarrier-sensing and dual channel scheme. We also address the implementation\nissues of our CSMA scheme.\n", "versions": [{"version": "v1", "created": "Fri, 18 Sep 2009 05:22:30 GMT"}, {"version": "v2", "created": "Mon, 5 Oct 2009 01:16:46 GMT"}, {"version": "v3", "created": "Thu, 5 Nov 2009 10:32:03 GMT"}, {"version": "v4", "created": "Mon, 17 May 2010 11:22:39 GMT"}], "update_date": "2017-09-25", "authors_parsed": [["Chau", "Chi-Kin", ""], ["Chen", "Minghua", ""], ["Liew", "Soung Chang", ""]]}, {"id": "0909.3717", "submitter": "Pranav Agrawal", "authors": "Pranav Agrawal (1), Anurag Kumar (2), Joy Kuri (1), Manoj Panda (2),\n  Vishnu Navda (3), Ramachandran Ramjee (3), Venkata N. Padmanabhan (3) ((1)\n  CEDT Indian Institute of Science Bangalore, (2) ECE Indian Institute of\n  Science Bangalore, (3) Microsoft Research Bangalore India)", "title": "Analytical Models for Energy Consumption in Infrastructure WLAN STAs\n  Carrying TCP Traffic", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.NI cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We develop analytical models for estimating the energy spent by stations\n(STAs) in infrastructure WLANs when performing TCP controlled file downloads.\nWe focus on the energy spent in radio communication when the STAs are in the\nContinuously Active Mode (CAM), or in the static Power Save Mode (PSM). Our\napproach is to develop accurate models for obtaining the fraction of times the\nSTA radios spend in idling, receiving and transmitting. We discuss two traffic\nmodels for each mode of operation: (i) each STA performs one large file\ndownload, and (ii) the STAs perform short file transfers. We evaluate the rate\nof STA energy expenditure with long file downloads, and show that static PSM is\nworse than just using CAM. For short file downloads we compute the number of\nfile downloads that can be completed with given battery capacity, and show that\nPSM performs better than CAM for this case. We provide a validation of our\nanalytical models using the NS-2 simulator. In contrast to earlier work on\nanalytical modeling of PSM, our models that capture the details of the\ninteractions between the 802.11 MAC in PSM and certain aspects of TCP.\n", "versions": [{"version": "v1", "created": "Mon, 21 Sep 2009 09:32:27 GMT"}, {"version": "v2", "created": "Mon, 21 Sep 2009 23:14:20 GMT"}, {"version": "v3", "created": "Wed, 23 Sep 2009 23:10:26 GMT"}, {"version": "v4", "created": "Tue, 6 Oct 2009 11:54:38 GMT"}], "update_date": "2009-10-06", "authors_parsed": [["Agrawal", "Pranav", ""], ["Kumar", "Anurag", ""], ["Kuri", "Joy", ""], ["Panda", "Manoj", ""], ["Navda", "Vishnu", ""], ["Ramjee", "Ramachandran", ""], ["Padmanabhan", "Venkata N.", ""]]}, {"id": "0909.4934", "submitter": "Ivan Voras", "authors": "Ivan Voras, Mario Zagar", "title": "Characteristics of multithreading models for high-performance IO driven\n  network applications", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.NI cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In a technological landscape that is quickly moving toward dense multi-CPU\nand multi-core computer systems, where using multithreading is an increasingly\npopular application design decision, it is important to choose a proper model\nfor distributing tasks across multiple threads that will result in the best\nefficiency for the application and the system as a whole. The work described in\nthis paper creates, implements and evaluates various models of distributing\ntasks to CPU threads and investigates their characteristics for use in modern\nhigh-performance network servers. The results presented here comprise a roadmap\nof models for building multithreaded server applications for modern server\nhardware and Unix-like operating systems.\n", "versions": [{"version": "v1", "created": "Sun, 27 Sep 2009 14:20:46 GMT"}], "update_date": "2009-09-29", "authors_parsed": [["Voras", "Ivan", ""], ["Zagar", "Mario", ""]]}]