[{"id": "0805.1968", "submitter": "Jian Tan", "authors": "Predrag R. Jelenkovic, Xiaozhu Kang, Jian Tan", "title": "Heavy-Tailed Limits for Medium Size Jobs and Comparison Scheduling", "comments": "26 pages, 2 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PF cs.NI", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We study the conditional sojourn time distributions of processor sharing\n(PS), foreground background processor sharing (FBPS) and shortest remaining\nprocessing time first (SRPT) scheduling disciplines on an event where the job\nsize of a customer arriving in stationarity is smaller than exactly k>=0 out of\nthe preceding m>=k arrivals. Then, conditioning on the preceding event, the\nsojourn time distribution of this newly arriving customer behaves\nasymptotically the same as if the customer were served in isolation with a\nserver of rate (1-\\rho)/(k+1) for PS/FBPS, and (1-\\rho) for SRPT, respectively,\nwhere \\rho is the traffic intensity. Hence, the introduced notion of\nconditional limits allows us to distinguish the asymptotic performance of the\nstudied schedulers by showing that SRPT exhibits considerably better asymptotic\nbehavior for relatively smaller jobs than PS/FBPS.\n  Inspired by the preceding results, we propose an approximation to the SRPT\ndiscipline based on a novel adaptive job grouping mechanism that uses relative\nsize comparison of a newly arriving job to the preceding m arrivals.\nSpecifically, if the newly arriving job is smaller than k and larger than m-k\nof the previous m jobs, it is routed into class k. Then, the classes of smaller\njobs are served with higher priorities using the static priority scheduling.\nThe good performance of this mechanism, even for a small number of classes m+1,\nis demonstrated using the asymptotic queueing analysis under the heavy-tailed\njob requirements. We also discuss refinements of the comparison grouping\nmechanism that improve the accuracy of job classification at the expense of a\nsmall additional complexity.\n", "versions": [{"version": "v1", "created": "Wed, 14 May 2008 05:00:12 GMT"}], "update_date": "2008-05-15", "authors_parsed": [["Jelenkovic", "Predrag R.", ""], ["Kang", "Xiaozhu", ""], ["Tan", "Jian", ""]]}, {"id": "0805.2949", "submitter": "Fotis Georgatos Drs", "authors": "Fotis Georgatos, John Kouvakis, John Kouretis", "title": "Performability Aspects of the Atlas Vo; Using Lmbench Suite", "comments": "14 pages, 7 figures; Particular attention should be given to graph\n  int64mul; A related presentation on the subject matter is available by the\n  authors upon request", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PF cs.CE cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The ATLAS Virtual Organization is grid's largest Virtual Organization which\nis currently in full production stage. Hereby a case is being made that a user\nworking within that VO is going to face a wide spectrum of different systems,\nwhose heterogeneity is enough to count as \"orders of magnitude\" according to a\nnumber of metrics; including integer/float operations, memory throughput\n(STREAM) and communication latencies. Furthermore, the spread of performance\ndoes not appear to follow any known distribution pattern, which is demonstrated\nin graphs produced during May 2007 measurements. It is implied that the current\npractice where either \"all-WNs-are-equal\" or, the alternative of SPEC-based\nrating used by LCG/EGEE is an oversimplification which is inappropriate and\nexpensive from an operational point of view, therefore new techniques are\nneeded for optimal grid resources allocation.\n", "versions": [{"version": "v1", "created": "Mon, 19 May 2008 19:45:31 GMT"}], "update_date": "2008-12-18", "authors_parsed": [["Georgatos", "Fotis", ""], ["Kouvakis", "John", ""], ["Kouretis", "John", ""]]}, {"id": "0805.3897", "submitter": "Harmen L.A. van der Spek", "authors": "H.L.A. van der Spek, E.M. Bakker, H.A.G. Wijshoff", "title": "SPARK00: A Benchmark Package for the Compiler Evaluation of\n  Irregular/Sparse Codes", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We propose a set of benchmarks that specifically targets a major cause of\nperformance degradation in high performance computing platforms: irregular\naccess patterns. These benchmarks are meant to be used to asses the performance\nof optimizing compilers on codes with a varying degree of irregular access. The\nirregularity caused by the use of pointers and indirection arrays are a major\nchallenge for optimizing compilers. Codes containing such patterns are\nnotoriously hard to optimize but they have a huge impact on the performance of\nmodern architectures, which are under-utilized when encountering irregular\nmemory accesses. In this paper, a set of benchmarks is described that\nexplicitly measures the performance of kernels containing a variety of\ndifferent access patterns found in real world applications. By offering a\nvarying degree of complexity, we provide a platform for measuring the\neffectiveness of transformations. The difference in complexity stems from a\ndifference in traversal patterns, the use of multiple indirections and control\nflow statements. The kernels used cover a variety of different access patterns,\nnamely pointer traversals, indirection arrays, dynamic loop bounds and run-time\ndependent if-conditions. The kernels are small enough to be fully understood\nwhich makes this benchmark set very suitable for the evaluation of\nrestructuring transformations.\n", "versions": [{"version": "v1", "created": "Mon, 26 May 2008 08:58:16 GMT"}], "update_date": "2008-05-27", "authors_parsed": [["van der Spek", "H. L. A.", ""], ["Bakker", "E. M.", ""], ["Wijshoff", "H. A. G.", ""]]}]