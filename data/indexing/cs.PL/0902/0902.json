[{"id": "0902.0019", "submitter": "Dirk Beyer", "authors": "Dirk Beyer, M. Erkan Keremoglu", "title": "CPAchecker: A Tool for Configurable Software Verification", "comments": "8 pages (6 without cover), 2 figures, 2 tables, tool paper, Web page:\n  http://www.cs.sfu.ca/~dbeyer/CPAchecker", "journal-ref": null, "doi": null, "report-no": "SFU-CS-2009-02", "categories": "cs.PL cs.SE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Configurable software verification is a recent concept for expressing\ndifferent program analysis and model checking approaches in one single\nformalism. This paper presents CPAchecker, a tool and framework that aims at\neasy integration of new verification components. Every abstract domain,\ntogether with the corresponding operations, is required to implement the\ninterface of configurable program analysis (CPA). The main algorithm is\nconfigurable to perform a reachability analysis on arbitrary combinations of\nexisting CPAs. The major design goal during the development was to provide a\nframework for developers that is flexible and easy to extend. We hope that\nresearchers find it convenient and productive to implement new verification\nideas and algorithms using this platform and that it advances the field by\nmaking it easier to perform practical experiments. The tool is implemented in\nJava and runs as command-line tool or as Eclipse plug-in. We evaluate the\nefficiency of our tool on benchmarks from the software model checker BLAST. The\nfirst released version of CPAchecker implements CPAs for predicate abstraction,\noctagon, and explicit-value domains. Binaries and the source code of CPAchecker\nare publicly available as free software.\n", "versions": [{"version": "v1", "created": "Fri, 30 Jan 2009 22:19:52 GMT"}], "update_date": "2009-02-03", "authors_parsed": [["Beyer", "Dirk", ""], ["Keremoglu", "M. Erkan", ""]]}, {"id": "0902.1257", "submitter": "Tom Hirschowitz", "authors": "Tom Hirschowitz (LM-Savoie), Xavier Leroy (INRIA Rocquencourt), J. B.\n  Wells", "title": "Compilation of extended recursion in call-by-value functional languages", "comments": "62 pages, uses pic", "journal-ref": "Higher-Order and Symbolic Computation 22, 1 (2009) 3-66", "doi": "10.1007/s10990-009-9042-z", "report-no": null, "categories": "cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper formalizes and proves correct a compilation scheme for\nmutually-recursive definitions in call-by-value functional languages. This\nscheme supports a wider range of recursive definitions than previous methods.\nWe formalize our technique as a translation scheme to a lambda-calculus\nfeaturing in-place update of memory blocks, and prove the translation to be\ncorrect.\n", "versions": [{"version": "v1", "created": "Sat, 7 Feb 2009 18:00:30 GMT"}], "update_date": "2010-02-01", "authors_parsed": [["Hirschowitz", "Tom", "", "LM-Savoie"], ["Leroy", "Xavier", "", "INRIA Rocquencourt"], ["Wells", "J. B.", ""]]}, {"id": "0902.2137", "submitter": "Xavier Leroy", "authors": "Xavier Leroy (INRIA Rocquencourt)", "title": "A formally verified compiler back-end", "comments": null, "journal-ref": "Journal of Automated Reasoning 43, 4 (2009) 363-446", "doi": "10.1007/s10817-009-9155-4", "report-no": null, "categories": "cs.LO cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This article describes the development and formal verification (proof of\nsemantic preservation) of a compiler back-end from Cminor (a simple imperative\nintermediate language) to PowerPC assembly code, using the Coq proof assistant\nboth for programming the compiler and for proving its correctness. Such a\nverified compiler is useful in the context of formal methods applied to the\ncertification of critical software: the verification of the compiler guarantees\nthat the safety properties proved on the source code hold for the executable\ncompiled code as well.\n", "versions": [{"version": "v1", "created": "Thu, 12 Feb 2009 15:48:28 GMT"}, {"version": "v2", "created": "Tue, 21 Jul 2009 13:07:04 GMT"}, {"version": "v3", "created": "Sat, 14 Nov 2009 09:14:31 GMT"}], "update_date": "2009-11-14", "authors_parsed": [["Leroy", "Xavier", "", "INRIA Rocquencourt"]]}, {"id": "0902.2621", "submitter": "Andrey Breslav", "authors": "Andrey Breslav", "title": "Creating modular and reusable DSL textual syntax definitions with\n  Grammatic/ANTLR", "comments": "Submitted to PSI'09", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL cs.SE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this paper we present Grammatic -- a tool for textual syntax definition.\nGrammatic serves as a front-end for parser generators (and other tools) and\nbrings modularity and reuse to their development artifacts. It adapts\ntechniques for separation of concerns from Apsect-Oriented Programming to\ngrammars and uses templates for grammar reuse. We illustrate usage of Grammatic\nby describing a case study: bringing separation of concerns to ANTLR parser\ngenerator, which is achieved without a common time- and memory-consuming\ntechnique of building an AST to separate semantic actions from a grammar\ndefinition.\n", "versions": [{"version": "v1", "created": "Mon, 16 Feb 2009 07:55:16 GMT"}], "update_date": "2009-02-17", "authors_parsed": [["Breslav", "Andrey", ""]]}, {"id": "0902.2859", "submitter": "Kees Middelburg", "authors": "J. A. Bergstra, C. A. Middelburg", "title": "Transmission protocols for instruction streams", "comments": "13 pages", "journal-ref": "In ICTAC 2009, pages 127--139. Springer-Verlag, LNCS 5684, 2009", "doi": "10.1007/978-3-642-03466-4_8", "report-no": "PRG0903", "categories": "cs.PL cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Threads as considered in thread algebra model behaviours to be controlled by\nsome execution environment: upon each action performed by a thread, a reply\nfrom its execution environment -- which takes the action as an instruction to\nbe processed -- determines how the thread proceeds. In this paper, we are\nconcerned with the case where the execution environment is remote: we describe\nand analyse some transmission protocols for passing instructions from a thread\nto a remote execution environment.\n", "versions": [{"version": "v1", "created": "Tue, 17 Feb 2009 08:41:22 GMT"}], "update_date": "2009-09-02", "authors_parsed": [["Bergstra", "J. A.", ""], ["Middelburg", "C. A.", ""]]}, {"id": "0902.3722", "submitter": "David Monniaux", "authors": "David Monniaux (VERIMAG - Imag)", "title": "A minimalistic look at widening operators", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.LO cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We consider the problem of formalizing the familiar notion of widening in\nabstract interpretation in higher-order logic. It turns out that many axioms of\nwidening (e.g. widening sequences are ascending) are not useful for proving\ncorrectness. After keeping only useful axioms, we give an equivalent\ncharacterization of widening as a lazily constructed well-founded tree. In type\nsystems supporting dependent products and sums, this tree can be made to\nreflect the condition of correct termination of the widening sequence.\n", "versions": [{"version": "v1", "created": "Sat, 21 Feb 2009 07:13:28 GMT"}, {"version": "v2", "created": "Thu, 11 Jun 2009 19:09:15 GMT"}, {"version": "v3", "created": "Mon, 23 Nov 2009 17:45:04 GMT"}], "update_date": "2009-11-23", "authors_parsed": [["Monniaux", "David", "", "VERIMAG - Imag"]]}]