[{"id": "0708.2173", "submitter": "James Cheney", "authors": "James Cheney, Amal Ahmed, and Umut Acar", "title": "Provenance as Dependency Analysis", "comments": "Long version of paper in 2007 Symposium on Database Programming\n  Languages; revised November 2009", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DB cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Provenance is information recording the source, derivation, or history of\nsome information. Provenance tracking has been studied in a variety of\nsettings; however, although many design points have been explored, the\nmathematical or semantic foundations of data provenance have received\ncomparatively little attention. In this paper, we argue that dependency\nanalysis techniques familiar from program analysis and program slicing provide\na formal foundation for forms of provenance that are intended to show how (part\nof) the output of a query depends on (parts of) its input. We introduce a\nsemantic characterization of such dependency provenance, show that this form of\nprovenance is not computable, and provide dynamic and static approximation\ntechniques.\n", "versions": [{"version": "v1", "created": "Thu, 16 Aug 2007 11:11:43 GMT"}, {"version": "v2", "created": "Tue, 22 Dec 2009 15:25:13 GMT"}], "update_date": "2009-12-22", "authors_parsed": [["Cheney", "James", ""], ["Ahmed", "Amal", ""], ["Acar", "Umut", ""]]}, {"id": "0708.2255", "submitter": "Jeremy Siek", "authors": "Jeremy G. Siek and Andrew Lumsdaine", "title": "A Language for Generic Programming in the Large", "comments": "50 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL cs.SE", "license": null, "abstract": "  Generic programming is an effective methodology for developing reusable\nsoftware libraries. Many programming languages provide generics and have\nfeatures for describing interfaces, but none completely support the idioms used\nin generic programming. To address this need we developed the language G. The\ncentral feature of G is the concept, a mechanism for organizing constraints on\ngenerics that is inspired by the needs of modern C++ libraries. G provides\nmodular type checking and separate compilation (even of generics). These\ncharacteristics support modular software development, especially the smooth\nintegration of independently developed components. In this article we present\nthe rationale for the design of G and demonstrate the expressiveness of G with\ntwo case studies: porting the Standard Template Library and the Boost Graph\nLibrary from C++ to G. The design of G shares much in common with the concept\nextension proposed for the next C++ Standard (the authors participated in its\ndesign) but there are important differences described in this article.\n", "versions": [{"version": "v1", "created": "Thu, 16 Aug 2007 18:06:18 GMT"}], "update_date": "2007-08-17", "authors_parsed": [["Siek", "Jeremy G.", ""], ["Lumsdaine", "Andrew", ""]]}]