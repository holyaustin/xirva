[{"id": "0711.0048", "submitter": "Lee Naish", "authors": "Lee Naish", "title": "Declarative Diagnosis of Floundering", "comments": "12 pages, 0 figures, uses llncs.sty In Proceedings of the 17th\n  Workshop on Logic-based methods in Programming Environments, Eds. Patricia\n  Hill and Wim Vanhoof, pp 48-60, September 2007, Porto, Portugal", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL cs.SE", "license": null, "abstract": "  Many logic programming languages have delay primitives which allow\ncoroutining. This introduces a class of bug symptoms -- computations can\nflounder when they are intended to succeed or finitely fail. For concurrent\nlogic programs this is normally called deadlock. Similarly, constraint logic\nprograms can fail to invoke certain constraint solvers because variables are\ninsufficiently instantiated or constrained. Diagnosing such faults has received\nrelatively little attention to date. Since delay primitives affect the\nprocedural but not the declarative view of programs, it may be expected that\ndebugging would have to consider the often complex details of interleaved\nexecution. However, recent work on semantics has suggested an alternative\napproach. In this paper we show how the declarative debugging paradigm can be\nused to diagnose unexpected floundering, insulating the user from the\ncomplexities of the execution.\n  Keywords: logic programming, coroutining, delay, debugging, floundering,\ndeadlock, constraints\n", "versions": [{"version": "v1", "created": "Thu, 1 Nov 2007 01:40:50 GMT"}], "update_date": "2007-11-06", "authors_parsed": [["Naish", "Lee", ""]]}, {"id": "0711.0344", "submitter": "Wim Vanhoof", "authors": "Guillem Marpons-Ucero, Julio Mari\\~no, \\'Angel Herranz, Lars-{\\AA}ke\n  Fredlund, Manuel Carro, Juan Jos\\'e Moreno-Navarro", "title": "Automatic Coding Rule Conformance Checking Using Logic Programs", "comments": "Paper presented at the 17th Workshop on Logic-based Methods in\n  Programming Environments (WLPE2007)", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL cs.SE", "license": null, "abstract": "  Some approaches to increasing program reliability involve a disciplined use\nof programming languages so as to minimise the hazards introduced by\nerror-prone features. This is realised by writing code that is constrained to a\nsubset of the a priori admissible programs, and that, moreover, may use only a\nsubset of the language. These subsets are determined by a collection of\nso-called coding rules.\n", "versions": [{"version": "v1", "created": "Fri, 2 Nov 2007 16:53:34 GMT"}], "update_date": "2007-11-06", "authors_parsed": [["Marpons-Ucero", "Guillem", ""], ["Mari\u00f1o", "Julio", ""], ["Herranz", "\u00c1ngel", ""], ["Fredlund", "Lars-\u00c5ke", ""], ["Carro", "Manuel", ""], ["Moreno-Navarro", "Juan Jos\u00e9", ""]]}, {"id": "0711.0345", "submitter": "Wim Vanhoof", "authors": "Roberto Bagnara, Patricia Hill, Enea Zaffanella", "title": "A Prolog-based Environment for Reasoning about Programming Languages\n  (Extended abstract)", "comments": "Paper presented at the 17th Workshop on Logic-based Methods in\n  Programming Environments (WLPE2007)", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL cs.SE", "license": null, "abstract": "  ECLAIR is a Prolog-based prototype system aiming to provide a functionally\ncomplete environment for the study, development and evaluation of programming\nlanguage analysis and implementation tools. In this paper, we sketch the\noverall structure of the system, outlining the main methodologies and\ntechnologies underlying its components. We also discuss the appropriateness of\nProlog as the implementation language for the system: besides highlighting its\nstrengths, we also point out a few potential weaknesses, hinting at possible\nsolutions.\n", "versions": [{"version": "v1", "created": "Fri, 2 Nov 2007 16:40:10 GMT"}], "update_date": "2007-11-06", "authors_parsed": [["Bagnara", "Roberto", ""], ["Hill", "Patricia", ""], ["Zaffanella", "Enea", ""]]}, {"id": "0711.0348", "submitter": "Wim Vanhoof", "authors": "Bernd Bra{\\ss}el, Michael Hanus and Marion Muller", "title": "Compiling ER Specifications into Declarative Programs", "comments": "Paper presented at the 17th Workshop on Logic-based Methods in\n  Programming Environments (WLPE2007)", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL cs.SE", "license": null, "abstract": "  This paper proposes an environment to support high-level database programming\nin a declarative programming language. In order to ensure safe database\nupdates, all access and update operations related to the database are generated\nfrom high-level descriptions in the entity- relationship (ER) model. We propose\na representation of ER diagrams in the declarative language Curry so that they\ncan be constructed by various tools and then translated into this\nrepresentation. Furthermore, we have implemented a compiler from this\nrepresentation into a Curry program that provides access and update operations\nbased on a high-level API for database programming.\n", "versions": [{"version": "v1", "created": "Fri, 2 Nov 2007 16:49:30 GMT"}], "update_date": "2007-11-06", "authors_parsed": [["Bra\u00dfel", "Bernd", ""], ["Hanus", "Michael", ""], ["Muller", "Marion", ""]]}, {"id": "0711.0618", "submitter": "Wim Vanhoof", "authors": "Jan Wielemaker, Anjo Anjewierden", "title": "PIDoc: Wiki style Literate Programming for Prolog", "comments": "Paper presented at the 17th Workshop on Logic-based Methods in\n  Programming Environments (WLPE2007)", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL cs.SE", "license": null, "abstract": "  This document introduces PlDoc, a literate programming system for Prolog.\nStarting point for PlDoc was minimal distraction from the programming task and\nmaximal immediate reward, attempting to seduce the programmer to use the\nsystem. Minimal distraction is achieved using structured comments that are as\nclosely as possible related to common Prolog documentation practices. Immediate\nreward is provided by a web interface powered from the Prolog development\nenvironment that integrates searching and browsing application and system\ndocumentation. When accessed from localhost, it is possible to go from\ndocumentation shown in a browser to the source code displayed in the user's\neditor of choice.\n", "versions": [{"version": "v1", "created": "Mon, 5 Nov 2007 12:13:12 GMT"}], "update_date": "2007-11-06", "authors_parsed": [["Wielemaker", "Jan", ""], ["Anjewierden", "Anjo", ""]]}, {"id": "0711.0829", "submitter": "Kees Middelburg", "authors": "J. A. Bergstra, C. A. Middelburg", "title": "Instruction sequences with indirect jumps", "comments": "23 pages; typos corrected, phrasing improved, reference replaced", "journal-ref": "Scientific Annals of Computer Science, 17:19--46, 2007.\n  http://www.infoiasi.ro/bin/download/Annals/XVII/XVII_1.pdf", "doi": null, "report-no": "PRG0709", "categories": "cs.PL", "license": null, "abstract": "  We study sequential programs that are instruction sequences with direct and\nindirect jump instructions. The intuition is that indirect jump instructions\nare jump instructions where the position of the instruction to jump to is the\ncontent of some memory cell. We consider several kinds of indirect jump\ninstructions. For each kind, we define the meaning of programs with indirect\njump instructions of that kind by means of a translation into programs without\nindirect jump instructions. For each kind, the intended behaviour of a program\nwith indirect jump instructions of that kind under execution is the behaviour\nof the translated program under execution on interaction with some memory\ndevice.\n", "versions": [{"version": "v1", "created": "Tue, 6 Nov 2007 10:26:03 GMT"}, {"version": "v2", "created": "Tue, 11 Dec 2007 07:58:45 GMT"}], "update_date": "2008-04-08", "authors_parsed": [["Bergstra", "J. A.", ""], ["Middelburg", "C. A.", ""]]}, {"id": "0711.0917", "submitter": "Jan Wielemaker", "authors": "Jan Wielemaker, Zhisheng Huang and Lourens van der Meij", "title": "SWI-Prolog and the Web", "comments": "31 pages, 24 figures and 2 tables. To appear in Theory and Practice\n  of Logic Programming (TPLP)", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL cs.SC", "license": null, "abstract": "  Where Prolog is commonly seen as a component in a Web application that is\neither embedded or communicates using a proprietary protocol, we propose an\narchitecture where Prolog communicates to other components in a Web application\nusing the standard HTTP protocol. By avoiding embedding in external Web servers\ndevelopment and deployment become much easier. To support this architecture, in\naddition to the transfer protocol, we must also support parsing, representing\nand generating the key Web document types such as HTML, XML and RDF.\n  This paper motivates the design decisions in the libraries and extensions to\nProlog for handling Web documents and protocols. The design has been guided by\nthe requirement to handle large documents efficiently. The described libraries\nsupport a wide range of Web applications ranging from HTML and XML documents to\nSemantic Web RDF processing.\n  To appear in Theory and Practice of Logic Programming (TPLP)\n", "versions": [{"version": "v1", "created": "Tue, 6 Nov 2007 16:22:39 GMT"}], "update_date": "2007-11-07", "authors_parsed": [["Wielemaker", "Jan", ""], ["Huang", "Zhisheng", ""], ["van der Meij", "Lourens", ""]]}, {"id": "0711.4071", "submitter": "Wim Vanhoof", "authors": "Pierre Deransart, Mireille Ducass\\'e, G\\'erard Ferrand", "title": "Observational semantics of the Prolog Resolution Box Model", "comments": "Paper presented at the 17th Workshop on Logic-based Methods in\n  Programming Environments (WLPE2007)", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL", "license": null, "abstract": "  This paper specifies an observational semantics and gives an original\npresentation of the Byrd box model. The approach accounts for the semantics of\nProlog tracers independently of a particular Prolog implementation. Prolog\ntraces are, in general, considered as rather obscure and difficult to use. The\nproposed formal presentation of its trace constitutes a simple and pedagogical\napproach for teaching Prolog or for implementing Prolog tracers. It is a form\nof declarative specification for the tracers. The trace model introduced here\nis only one example to illustrate general problems relating to tracers and\nobserving processes. Observing processes know, from observed processes, only\ntheir traces. The issue is then to be able to reconstitute, by the sole\nanalysis of the trace, part of the behaviour of the observed process, and if\npossible, without any loss of information. As a matter of fact, our approach\nhighlights qualities of the Prolog resolution box model which made its success,\nbut also its insufficiencies.\n", "versions": [{"version": "v1", "created": "Mon, 26 Nov 2007 18:03:07 GMT"}], "update_date": "2007-11-27", "authors_parsed": [["Deransart", "Pierre", ""], ["Ducass\u00e9", "Mireille", ""], ["Ferrand", "G\u00e9rard", ""]]}, {"id": "0711.4217", "submitter": "Kees Middelburg", "authors": "J. A. Bergstra, C. A. Middelburg", "title": "Instruction sequences with dynamically instantiated instructions", "comments": "25 pages; phrasing improved", "journal-ref": "Fundamenta Informaticae, 96(1--2):27--48, 2009", "doi": "10.3233/FI-2009-165", "report-no": "PRG0710", "categories": "cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We study sequential programs that are instruction sequences with dynamically\ninstantiated instructions. We define the meaning of such programs in two\ndifferent ways. In either case, we give a translation by which each program\nwith dynamically instantiated instructions is turned into a program without\nthem that exhibits on execution the same behaviour by interaction with some\nservice. The complexity of the translations differ considerably, whereas the\nservices concerned are equally simple. However, the service concerned in the\ncase of the simpler translation is far more powerful than the service concerned\nin the other case.\n", "versions": [{"version": "v1", "created": "Tue, 27 Nov 2007 10:24:34 GMT"}, {"version": "v2", "created": "Tue, 11 Dec 2007 08:06:27 GMT"}, {"version": "v3", "created": "Wed, 2 Jul 2008 08:08:28 GMT"}, {"version": "v4", "created": "Tue, 4 Aug 2009 06:37:50 GMT"}], "update_date": "2010-01-12", "authors_parsed": [["Bergstra", "J. A.", ""], ["Middelburg", "C. A.", ""]]}]