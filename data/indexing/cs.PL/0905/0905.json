[{"id": "0905.0737", "submitter": "Ignacio Vega-Paez M en C", "authors": "Ignacio Vega-Paez, Jose Angel Ortega, Georgina G. Pulido", "title": "REC language is a live on IBM1130 simulator, EL lenguaje REC esta vivo\n  en el simulador de la IBM 1130", "comments": "This work is archaeological reconstruction of REC/A language", "journal-ref": null, "doi": null, "report-no": "IBP-TR2009-04", "categories": "cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  REC (Regular Expression Compiler) is a concise programming language\ndevelopment in mayor Mexican Universities at end of 60s which allows students\nto write programs without knowledge of the complicated syntax of languages like\nFORTRAN and ALGOL. The language is recursive and contains only four elements\nfor control. This paper describes use of the interpreter of REC written in\nFORTRAN on IBM1130 Simulator from -Computer History Simulation- Project.\n", "versions": [{"version": "v1", "created": "Wed, 6 May 2009 04:21:15 GMT"}], "update_date": "2009-05-07", "authors_parsed": [["Vega-Paez", "Ignacio", ""], ["Ortega", "Jose Angel", ""], ["Pulido", "Georgina G.", ""]]}, {"id": "0905.0740", "submitter": "Ignacio Vega-Paez M en C", "authors": "Gerardo Cisneros", "title": "A FORTRAN coded regular expression Compiler for IBM 1130 Computing\n  System", "comments": "This version of REC is archaeological reconstruction of REC/A\n  language on IBM1130 Simulator (SIMH IBM 1130 Emulator and Disk Monitor System\n  R2V12) from Computer History Simulation Project (www.ibm1130.org), also see\n  REC language is a live for Ignacio Vega-Paez", "journal-ref": "Acta Mexicana de Ciencia y Tecnologia Vol. IV No. 1, page 30-86,\n  1970", "doi": null, "report-no": "IBP-Memo 2008-12", "categories": "cs.CL cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  REC (Regular Expression Compiler) is a concise programming language which\nallows students to write programs without knowledge of the complicated syntax\nof languages like FORTRAN and ALGOL. The language is recursive and contains\nonly four elements for control. This paper describes an interpreter of REC\nwritten in FORTRAN.\n", "versions": [{"version": "v1", "created": "Wed, 6 May 2009 04:29:51 GMT"}], "update_date": "2011-07-12", "authors_parsed": [["Cisneros", "Gerardo", ""]]}, {"id": "0905.2004", "submitter": "Yi-Dong Shen", "authors": "Yi-Dong Shen, Danny De Schreye, Dean Voets", "title": "Termination Prediction for General Logic Programs", "comments": "28 pages, 12 figures. to appear in Theory and Practice of Logic\n  Programming (TPLP)", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL cs.AI cs.LO", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present a heuristic framework for attacking the undecidable termination\nproblem of logic programs, as an alternative to current\ntermination/non-termination proof approaches. We introduce an idea of\ntermination prediction, which predicts termination of a logic program in case\nthat neither a termination nor a non-termination proof is applicable. We\nestablish a necessary and sufficient characterization of infinite (generalized)\nSLDNF-derivations with arbitrary (concrete or moded) queries, and develop an\nalgorithm that predicts termination of general logic programs with arbitrary\nnon-floundering queries. We have implemented a termination prediction tool and\nobtained quite satisfactory experimental results. Except for five programs\nwhich break the experiment time limit, our prediction is 100% correct for all\n296 benchmark programs of the Termination Competition 2007, of which eighteen\nprograms cannot be proved by any of the existing state-of-the-art analyzers\nlike AProVE07, NTI, Polytool and TALP.\n", "versions": [{"version": "v1", "created": "Wed, 13 May 2009 02:47:06 GMT"}], "update_date": "2009-05-14", "authors_parsed": [["Shen", "Yi-Dong", ""], ["De Schreye", "Danny", ""], ["Voets", "Dean", ""]]}, {"id": "0905.2257", "submitter": "Kees Middelburg", "authors": "J. A. Bergstra, C. A. Middelburg", "title": "A protocol for instruction stream processing", "comments": "15pages", "journal-ref": null, "doi": null, "report-no": "PRG0905", "categories": "cs.PL cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The behaviour produced by an instruction sequence under execution is a\nbehaviour to be controlled by some execution environment: each step performed\nactuates the processing of an instruction by the execution environment and a\nreply returned at completion of the processing determines how the behaviour\nproceeds. In this paper, we are concerned with the case where the processing\ntakes place remotely. We describe a protocol to deal with the case where the\nbehaviour produced by an instruction sequence under execution leads to the\ngeneration of a stream of instructions to be processed and a remote execution\nunit handles the processing of that stream of instructions.\n", "versions": [{"version": "v1", "created": "Thu, 14 May 2009 06:23:18 GMT"}], "update_date": "2009-05-15", "authors_parsed": [["Bergstra", "J. A.", ""], ["Middelburg", "C. A.", ""]]}, {"id": "0905.2288", "submitter": "Michele Marchesi", "authors": "Hongyu Zhang, Hee Beng Kuan Tan, Michele Marchesi", "title": "The Distribution of Program Sizes and Its Implications: An Eclipse Case\n  Study", "comments": "10 pages, 2 figures, 6 tables", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.SE cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  A large software system is often composed of many inter-related programs of\ndifferent sizes. Using the public Eclipse dataset, we replicate our previous\nstudy on the distribution of program sizes. Our results confirm that the\nprogram sizes follow the lognormal distribution. We also investigate the\nimplications of the program size distribution on size estimation and quality\npredication. We find that the nature of size distribution can be used to\nestimate the size of a large Java system. We also find that a small percentage\nof largest programs account for a large percentage of defects, and the number\nof defects across programs follows the Weibull distribution when the programs\nare ranked by their sizes. Our results show that the distribution of program\nsizes is an important property for understanding large and complex software\nsystems.\n", "versions": [{"version": "v1", "created": "Thu, 14 May 2009 09:24:51 GMT"}], "update_date": "2009-05-15", "authors_parsed": [["Zhang", "Hongyu", ""], ["Tan", "Hee Beng Kuan", ""], ["Marchesi", "Michele", ""]]}, {"id": "0905.2539", "submitter": "Delia Kesner", "authors": "Delia Kesner", "title": "A Theory of Explicit Substitutions with Safe and Full Composition", "comments": "29 pages Special Issue: Selected Papers of the Conference\n  \"International Colloquium on Automata, Languages and Programming 2008\" edited\n  by Giuseppe Castagna and Igor Walukiewicz", "journal-ref": "Logical Methods in Computer Science, Volume 5, Issue 3 (July 15,\n  2009) lmcs:816", "doi": "10.2168/LMCS-5(3:1)2009", "report-no": null, "categories": "cs.PL cs.LO", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Many different systems with explicit substitutions have been proposed to\nimplement a large class of higher-order languages. Motivations and challenges\nthat guided the development of such calculi in functional frameworks are\nsurveyed in the first part of this paper. Then, very simple technology in named\nvariable-style notation is used to establish a theory of explicit substitutions\nfor the lambda-calculus which enjoys a whole set of useful properties such as\nfull composition, simulation of one-step beta-reduction, preservation of\nbeta-strong normalisation, strong normalisation of typed terms and confluence\non metaterms. Normalisation of related calculi is also discussed.\n", "versions": [{"version": "v1", "created": "Fri, 15 May 2009 13:35:58 GMT"}, {"version": "v2", "created": "Wed, 15 Jul 2009 12:33:03 GMT"}, {"version": "v3", "created": "Wed, 15 Jul 2009 21:06:30 GMT"}], "update_date": "2015-07-01", "authors_parsed": [["Kesner", "Delia", ""]]}, {"id": "0905.3287", "submitter": "Roberto Tonelli", "authors": "Alessandro Murgia, Giulio Concas, Sandro Pinna, Roberto Tonelli, Ivana\n  Turnu", "title": "Empirical study of software quality evolution in open source projects\n  using agile practices", "comments": "12 pages, 6 figures 2 tables", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.SE cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We analyse the time evolution of two open source Java projects: Eclipse and\nNetbeans, both developed following agile practices, though to a different\nextent. Our study is centered on quality analysis of the systems, measured as\ndefects absence, and its relation with software metrics evolution. The two\nprojects are described through a software graph in which nodes are represented\nby Java files and edges describe the existing relation between nodes. We\npropose a metrics suite for Java files based on Chidamber and Kemerer suite,\nand use it to study software evolution and its relationship with bug count.\n", "versions": [{"version": "v1", "created": "Wed, 20 May 2009 13:29:25 GMT"}], "update_date": "2009-05-21", "authors_parsed": [["Murgia", "Alessandro", ""], ["Concas", "Giulio", ""], ["Pinna", "Sandro", ""], ["Tonelli", "Roberto", ""], ["Turnu", "Ivana", ""]]}, {"id": "0905.3296", "submitter": "Roberto Tonelli", "authors": "Alessandro Murgia, Giulio Concas, Michele Marchesi, Roberto Tonelli\n  and Ivana Turnu", "title": "An Analysis of Bug Distribution in Object Oriented Systems", "comments": "17 pages, 8 figures, 10 tables", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.SE cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We introduced a new approach to describe Java software as graph, where nodes\nrepresent a Java file - called compilation unit (CU) - and an edges represent a\nrelations between them. The software system is characterized by the degree\ndistribution of the graph properties, like in-or-out links, as well as by the\ndistribution of Chidamber and Kemerer metrics computed on its CUs. Every CU can\nbe related to one or more bugs during its life. We find a relationship among\nthe software system and the bugs hitting its nodes. We found that the\ndistribution of some metrics, and the number of bugs per CU, exhibit a\npower-law behavior in their tails, as well as the number of CUs influenced by a\nspecific bug. We examine the evolution of software metrics across different\nreleases to understand how relationships among CUs metrics and CUs faultness\nchange with time.\n", "versions": [{"version": "v1", "created": "Wed, 20 May 2009 12:41:25 GMT"}], "update_date": "2009-05-21", "authors_parsed": [["Murgia", "Alessandro", ""], ["Concas", "Giulio", ""], ["Marchesi", "Michele", ""], ["Tonelli", "Roberto", ""], ["Turnu", "Ivana", ""]]}, {"id": "0905.3318", "submitter": "Maarten Hijzelendoorn", "authors": "Maarten Hijzelendoorn and Crit Cremers", "title": "An Object-Oriented and Fast Lexicon for Semantic Generation", "comments": "Paper presented at the 18th Computational Linguistics In the\n  Netherlands Meeting (CLIN), Nijmegen, 10 December 2007, 15pp", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CL cs.DB cs.DS cs.IR cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper is about the technical design of a large computational lexicon,\nits storage, and its access from a Prolog environment. Traditionally, efficient\naccess and storage of data structures is implemented by a relational database\nmanagement system. In Delilah, a lexicon-based NLP system, efficient access to\nthe lexicon by the semantic generator is vital. We show that our highly\ndetailed HPSG-style lexical specifications do not fit well in the Relational\nModel, and that they cannot be efficiently retrieved. We argue that they fit\nmore naturally in the Object-Oriented Model. Although storage of objects is\nredundant, we claim that efficient access is still possible by applying\nindexing, and compression techniques from the Relational Model to the\nObject-Oriented Model. We demonstrate that it is possible to implement\nobject-oriented storage and fast access in ISO Prolog.\n", "versions": [{"version": "v1", "created": "Wed, 20 May 2009 14:12:42 GMT"}], "update_date": "2009-05-21", "authors_parsed": [["Hijzelendoorn", "Maarten", ""], ["Cremers", "Crit", ""]]}, {"id": "0905.3432", "submitter": "Francisco Carvalho-Junior Dr", "authors": "Francisco Heron de Carvalho-Junior, Rafael Dueire Lins", "title": "A Type System for Parallel Components", "comments": "Submitted to SBLP 2009 (Brazilian Symposium on Programming Languages)", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The # component model was proposed to improve the practice of parallel\nprogramming. This paper introduces a type system for # programming systems,\naiming to lift the abstraction and safety of programming for parallel computing\narchitectures by introducing a notion of abstract component based on universal\nand existential bounded quantification. Issues about the implementation of such\ntype system in HPE, a # programming system, are also discussed.\n", "versions": [{"version": "v1", "created": "Thu, 21 May 2009 03:35:52 GMT"}], "update_date": "2009-05-22", "authors_parsed": [["de Carvalho-Junior", "Francisco Heron", ""], ["Lins", "Rafael Dueire", ""]]}, {"id": "0905.4200", "submitter": "Tom Hirschowitz", "authors": "Richard Garner, Tom Hirschowitz (LAMA), Aur\\'elien Pardon (LIP)", "title": "Variable binding, symmetric monoidal closed theories, and bigraphs", "comments": "An introduction to two more technical previous preprints. Accepted at\n  Concur '09", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.LO cs.PL math.CT", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper investigates the use of symmetric monoidal closed (SMC) structure\nfor representing syntax with variable binding, in particular for languages with\nlinear aspects. In our setting, one first specifies an SMC theory T, which may\nexpress binding operations, in a way reminiscent from higher-order abstract\nsyntax. This theory generates an SMC category S(T) whose morphisms are, in a\nsense, terms in the desired syntax. We apply our approach to Jensen and\nMilner's (abstract binding) bigraphs, which are linear w.r.t. processes. This\nleads to an alternative category of bigraphs, which we compare to the original.\n", "versions": [{"version": "v1", "created": "Tue, 26 May 2009 13:43:16 GMT"}], "update_date": "2009-05-27", "authors_parsed": [["Garner", "Richard", "", "LAMA"], ["Hirschowitz", "Tom", "", "LAMA"], ["Pardon", "Aur\u00e9lien", "", "LIP"]]}, {"id": "0905.4596", "submitter": "Dominique Duval", "authors": "Dominique Duval (LMC - IMAG), Jean-Claude Reynaud (LSR - IMAG)", "title": "About raising and handling exceptions", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL cs.LO", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper presents a unified framework for dealing with a deduction system\nand a denotational semantics of exceptions. It is based on the fact that\nhandling exceptions can be seen as a kind of generalized case distinction. This\npoint of view on exceptions has been introduced in 2004, it is based on the\nnotion of diagrammatic logic, which assumes some familiarity with category\ntheory. Extensive sums of types can be used for dealing with case distinctions.\nThe aim of this new paper is to focus on the role of generalized extensivity\nproperty for dealing with exceptions. Moreover, the presentation of this paper\nmakes only a restricted use of category theory.\n", "versions": [{"version": "v1", "created": "Thu, 28 May 2009 10:01:47 GMT"}], "update_date": "2009-05-29", "authors_parsed": [["Duval", "Dominique", "", "LMC - IMAG"], ["Reynaud", "Jean-Claude", "", "LSR - IMAG"]]}]