[{"id": "1002.0705", "submitter": "Jon Kerr Nilsen Mr", "authors": "Jon K. Nilsen, Xing Cai, Bjorn Hoyland, Hans Petter Langtangen", "title": "Simplifying Parallelization of Scientific Codes by a Function-Centric\n  Approach in Python", "comments": "29 pages, submitted to Computational Science and Discovery", "journal-ref": null, "doi": "10.1088/1749-4699/3/1/015003", "report-no": null, "categories": "cs.DC cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The purpose of this paper is to show how existing scientific software can be\nparallelized using a separate thin layer of Python code where all parallel\ncommunication is implemented. We provide specific examples on such layers of\ncode, and these examples may act as templates for parallelizing a wide set of\nserial scientific codes. The use of Python for parallelization is motivated by\nthe fact that the language is well suited for reusing existing serial codes\nprogrammed in other languages. The extreme flexibility of Python with regard to\nhandling functions makes it very easy to wrap up decomposed computational tasks\nof a serial scientific application as Python functions. Many\nparallelization-specific components can be implemented as generic Python\nfunctions, which may take as input those functions that perform concrete\ncomputational tasks. The overall programming effort needed by this\nparallelization approach is rather limited, and the resulting parallel Python\nscripts have a compact and clean structure. The usefulness of the\nparallelization approach is exemplified by three different classes of\napplications in natural and social sciences.\n", "versions": [{"version": "v1", "created": "Wed, 3 Feb 2010 12:31:14 GMT"}], "update_date": "2015-05-18", "authors_parsed": [["Nilsen", "Jon K.", ""], ["Cai", "Xing", ""], ["Hoyland", "Bjorn", ""], ["Langtangen", "Hans Petter", ""]]}, {"id": "1002.0930", "submitter": "EPTCS", "authors": "Hugo A. L\\'opez (IT University of Copenhagen), Carlos Olarte (\\'Ecole\n  Polytechnique - Universidad Javeriana Cali), Jorge A. P\\'erez (University of\n  Bologna)", "title": "Towards a Unified Framework for Declarative Structured Communications", "comments": null, "journal-ref": "EPTCS 17, 2010, pp. 1-15", "doi": "10.4204/EPTCS.17.1", "report-no": null, "categories": "cs.PL cs.LO", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present a unified framework for the declarative analysis of structured\ncommunications. By relying on a (timed) concurrent constraint programming\nlanguage, we show that in addition to the usual operational techniques from\nprocess calculi, the analysis of structured communications can elegantly\nexploit logic-based reasoning techniques. We introduce a declarative\ninterpretation of the language for structured communications proposed by Honda,\nVasconcelos, and Kubo. Distinguishing features of our approach are: the\npossibility of including partial information (constraints) in the session\nmodel; the use of explicit time for reasoning about session duration and\nexpiration; a tight correspondence with logic, which formally relates session\nexecution and linear-time temporal logic formulas.\n", "versions": [{"version": "v1", "created": "Thu, 4 Feb 2010 09:19:23 GMT"}], "update_date": "2010-02-05", "authors_parsed": [["L\u00f3pez", "Hugo A.", "", "IT University of Copenhagen"], ["Olarte", "Carlos", "", "\u00c9cole\n  Polytechnique - Universidad Javeriana Cali"], ["P\u00e9rez", "Jorge A.", "", "University of\n  Bologna"]]}, {"id": "1002.0933", "submitter": "EPTCS", "authors": "Andi Bejleri (Imperial College), Raymond Hu (Imperial College), Nobuko\n  Yoshida (Imperial College)", "title": "Session-Based Programming for Parallel Algorithms: Expressiveness and\n  Performance", "comments": null, "journal-ref": "EPTCS 17, 2010, pp. 17-29", "doi": "10.4204/EPTCS.17.2", "report-no": null, "categories": "cs.PL cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper investigates session programming and typing of benchmark examples\nto compare productivity, safety and performance with other communications\nprogramming languages. Parallel algorithms are used to examine the above\naspects due to their extensive use of message passing for interaction, and\ntheir increasing prominence in algorithmic research with the rising\navailability of hardware resources such as multicore machines and clusters. We\ncontribute new benchmark results for SJ, an extension of Java for type-safe,\nbinary session programming, against MPJ Express, a Java messaging system based\non the MPI standard. In conclusion, we observe that (1) despite rich libraries\nand functionality, MPI remains a low-level API, and can suffer from commonly\nperceived disadvantages of explicit message passing such as deadlocks and\nunexpected message types, and (2) the benefits of high-level session\nabstraction, which has significant impact on program structure to improve\nreadability and reliability, and session type-safety can greatly facilitate the\ntask of communications programming whilst retaining competitive performance.\n", "versions": [{"version": "v1", "created": "Thu, 4 Feb 2010 09:34:31 GMT"}], "update_date": "2010-02-05", "authors_parsed": [["Bejleri", "Andi", "", "Imperial College"], ["Hu", "Raymond", "", "Imperial College"], ["Yoshida", "Nobuko", "", "Imperial College"]]}, {"id": "1002.0936", "submitter": "EPTCS", "authors": "Matthew Kehrt (University of Washington), Laura Effinger-Dean\n  (University of Washington), Michael Schmitz (University of Washington), Dan\n  Grossman (University of Washington)", "title": "Programming Idioms for Transactional Events", "comments": null, "journal-ref": "EPTCS 17, 2010, pp. 43-48", "doi": "10.4204/EPTCS.17.4", "report-no": null, "categories": "cs.PL cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Transactional events (TE) are an extension of Concurrent ML (CML), a\nprogramming model for synchronous message-passing. Prior work has focused on\nTE's formal semantics and its implementation. This paper considers programming\nidioms, particularly those that vary unexpectedly from the corresponding CML\nidioms. First, we solve a subtle problem with client-server protocols in TE.\nSecond, we argue that CML's wrap and guard primitives do not translate well to\nTE, and we suggest useful workarounds. Finally, we discuss how to rewrite CML\nprotocols that use abort actions.\n", "versions": [{"version": "v1", "created": "Thu, 4 Feb 2010 09:43:21 GMT"}], "update_date": "2010-02-05", "authors_parsed": [["Kehrt", "Matthew", "", "University of Washington"], ["Effinger-Dean", "Laura", "", "University of Washington"], ["Schmitz", "Michael", "", "University of Washington"], ["Grossman", "Dan", "", "University of Washington"]]}, {"id": "1002.0937", "submitter": "EPTCS", "authors": "Francisco Martins (University of Lisbon), Lu\\'is Lopes (University of\n  Porto), Jo\\~ao Barros (University of Porto)", "title": "Towards the Safe Programming of Wireless Sensor Networks", "comments": null, "journal-ref": "EPTCS 17, 2010, pp. 49-62", "doi": "10.4204/EPTCS.17.5", "report-no": null, "categories": "cs.PL cs.NI", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Sensor networks are rather challenging to deploy, program, and debug. Current\nprogramming languages for these platforms suffer from a significant semantic\ngap between their specifications and underlying implementations. This fact\nprecludes the development of (type-)safe applications, which would potentially\nsimplify the task of programming and debugging deployed networks. In this paper\nwe define a core calculus for programming sensor networks and propose to use it\nas an assembly language for developing type-safe, high-level programming\nlanguages.\n", "versions": [{"version": "v1", "created": "Thu, 4 Feb 2010 09:46:48 GMT"}], "update_date": "2010-02-05", "authors_parsed": [["Martins", "Francisco", "", "University of Lisbon"], ["Lopes", "Lu\u00eds", "", "University of\n  Porto"], ["Barros", "Jo\u00e3o", "", "University of Porto"]]}, {"id": "1002.0939", "submitter": "EPTCS", "authors": "Stefan Marr (Vrije Universiteit Brussel), Michael Haupt (Hasso\n  Plattner Institute, University of Potsdam), Stijn Timbermont (Vrije\n  Universiteit Brussel), Bram Adams (Queen's University), Theo D'Hondt (Vrije\n  Universiteit Brussel), Pascal Costanza (Vrije Universiteit Brussel), Wolfgang\n  De Meuter (Vrije Universiteit Brussel)", "title": "Virtual Machine Support for Many-Core Architectures: Decoupling Abstract\n  from Concrete Concurrency Models", "comments": null, "journal-ref": "EPTCS 17, 2010, pp. 63-77", "doi": "10.4204/EPTCS.17.6", "report-no": null, "categories": "cs.DC cs.AR cs.PL cs.SE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The upcoming many-core architectures require software developers to exploit\nconcurrency to utilize available computational power. Today's high-level\nlanguage virtual machines (VMs), which are a cornerstone of software\ndevelopment, do not provide sufficient abstraction for concurrency concepts. We\nanalyze concrete and abstract concurrency models and identify the challenges\nthey impose for VMs. To provide sufficient concurrency support in VMs, we\npropose to integrate concurrency operations into VM instruction sets.\n  Since there will always be VMs optimized for special purposes, our goal is to\ndevelop a methodology to design instruction sets with concurrency support.\nTherefore, we also propose a list of trade-offs that have to be investigated to\nadvise the design of such instruction sets.\n  As a first experiment, we implemented one instruction set extension for\nshared memory and one for non-shared memory concurrency. From our experimental\nresults, we derived a list of requirements for a full-grown experimental\nenvironment for further research.\n", "versions": [{"version": "v1", "created": "Thu, 4 Feb 2010 09:48:53 GMT"}], "update_date": "2010-02-05", "authors_parsed": [["Marr", "Stefan", "", "Vrije Universiteit Brussel"], ["Haupt", "Michael", "", "Hasso\n  Plattner Institute, University of Potsdam"], ["Timbermont", "Stijn", "", "Vrije\n  Universiteit Brussel"], ["Adams", "Bram", "", "Queen's University"], ["D'Hondt", "Theo", "", "Vrije\n  Universiteit Brussel"], ["Costanza", "Pascal", "", "Vrije Universiteit Brussel"], ["De Meuter", "Wolfgang", "", "Vrije Universiteit Brussel"]]}, {"id": "1002.0940", "submitter": "EPTCS", "authors": "Prodromos Gerakios (National Technical University of Athens), Nikolaos\n  Papaspyrou (National Technical University of Athens), Konstantinos Sagonas\n  (National Technical University of Athens)", "title": "A Concurrent Language with a Uniform Treatment of Regions and Locks", "comments": null, "journal-ref": "EPTCS 17, 2010, pp. 79-93", "doi": "10.4204/EPTCS.17.7", "report-no": null, "categories": "cs.PL cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  A challenge for programming language research is to design and implement\nmulti-threaded low-level languages providing static guarantees for memory\nsafety and freedom from data races. Towards this goal, we present a concurrent\nlanguage employing safe region-based memory management and hierarchical locking\nof regions. Both regions and locks are treated uniformly, and the language\nsupports ownership transfer, early deallocation of regions and early release of\nlocks in a safe manner.\n", "versions": [{"version": "v1", "created": "Thu, 4 Feb 2010 09:51:04 GMT"}], "update_date": "2010-02-05", "authors_parsed": [["Gerakios", "Prodromos", "", "National Technical University of Athens"], ["Papaspyrou", "Nikolaos", "", "National Technical University of Athens"], ["Sagonas", "Konstantinos", "", "National Technical University of Athens"]]}, {"id": "1002.0942", "submitter": "EPTCS", "authors": "Vasco T. Vasconcelos (University of Lisbon), Francisco Martins\n  (University of Lisbon), Tiago Cogumbreiro (University of Lisbon)", "title": "Type Inference for Deadlock Detection in a Multithreaded Polymorphic\n  Typed Assembly Language", "comments": null, "journal-ref": "EPTCS 17, 2010, pp. 95-109", "doi": "10.4204/EPTCS.17.8", "report-no": null, "categories": "cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We previously developed a polymorphic type system and a type checker for a\nmultithreaded lock-based polymorphic typed assembly language (MIL) that ensures\nthat well-typed programs do not encounter race conditions. This paper extends\nsuch work by taking into consideration deadlocks. The extended type system\nverifies that locks are acquired in the proper order. Towards this end we\nrequire a language with annotations that specify the locking order. Rather than\nasking the programmer (or the compiler's backend) to specifically annotate each\nnewly introduced lock, we present an algorithm to infer the annotations. The\nresult is a type checker whose input language is non-decorated as before, but\nthat further checks that programs are exempt from deadlocks.\n", "versions": [{"version": "v1", "created": "Thu, 4 Feb 2010 09:53:02 GMT"}, {"version": "v2", "created": "Fri, 5 Feb 2010 11:33:54 GMT"}], "update_date": "2010-02-05", "authors_parsed": [["Vasconcelos", "Vasco T.", "", "University of Lisbon"], ["Martins", "Francisco", "", "University of Lisbon"], ["Cogumbreiro", "Tiago", "", "University of Lisbon"]]}, {"id": "1002.1408", "submitter": "EPTCS", "authors": "Alastair R. Beresford (University of Cambridge), Simon Gay (University\n  of Glasgow)", "title": "Proceedings Second International Workshop on Programming Language\n  Approaches to Concurrency and Communication-cEntric Software", "comments": null, "journal-ref": "EPTCS 17, 2010", "doi": "10.4204/EPTCS.17", "report-no": null, "categories": "cs.PL cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The Second International Workshop on Programming Language Approaches to\nConcurrency and Communication-cEntric Software (PLACES) was co-located with\nETAPS 2009 in the city of York, England. The workshop took place on Sunday 22nd\nMarch 2009. The workshop focused on the challenges raised by the changing\nlandscape of computer software. Traditionally, most software was written for a\nsingle computer with one CPU. However applications on the web today are built\nusing numerous interacting services deployed on across many machines; soon\noff-the-shelf CPUs will host thousands of cores, and sensor networks will be\ncomposed from a large number of processing units. Many normal applications will\nsoon need to make effective use of thousands of computing nodes. At some level\nof granularity, computation in such systems will be inherently concurrent and\ncommunication-centred.\n  The development of effective programming methodologies for the coming\ncomputing paradigm demands exploration and understanding of a wide variety of\nideas and techniques. This workshop offered a forum where researchers from\ndifferent fields could exchange new ideas on one of the central challenges for\nprogramming in the near future, the development of programming methodologies\nand infrastructures where concurrency and distribution are the norm rather than\na marginal concern.\n", "versions": [{"version": "v1", "created": "Sat, 6 Feb 2010 20:06:00 GMT"}], "update_date": "2010-02-09", "authors_parsed": [["Beresford", "Alastair R.", "", "University of Cambridge"], ["Gay", "Simon", "", "University\n  of Glasgow"]]}, {"id": "1002.1422", "submitter": "M. H. van Emden", "authors": "M.H. van Emden", "title": "Integrating Interval Constraints into Logic Programming", "comments": "21 pages, 2 tables, no figures", "journal-ref": null, "doi": null, "report-no": "DCS-133-IR", "categories": "cs.PL cs.LO cs.NA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The CLP scheme uses Horn clauses and SLD resolution to generate multiple\nconstraint satisfaction problems (CSPs). The possible CSPs include rational\ntrees (giving Prolog) and numerical algorithms for solving linear equations and\nlinear programs (giving CLP(R)). In this paper we develop a form of CSP for\ninterval constraints. In this way one obtains a logic semantics for the\nefficient floating-point hardware that is available on most computers.\n  The need for the method arises because in the practice of scheduling and\nengineering design it is not enough to solve a single CSP. Ideally one should\nbe able to consider thousands of CSPs and efficiently solve them or show them\nto be unsolvable. This is what CLP/NCSP, the new subscheme of CLP described in\nthis paper is designed to do.\n", "versions": [{"version": "v1", "created": "Sun, 7 Feb 2010 00:03:40 GMT"}], "update_date": "2010-02-09", "authors_parsed": [["van Emden", "M. H.", ""]]}, {"id": "1002.1549", "submitter": "Andrey Breslav", "authors": "Andrey Breslav", "title": "Extensible type checker for parser generation", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL cs.SE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Parser generators generate translators from language specifications. In many\ncases, such specifications contain semantic actions written in the same\nlanguage as the generated code. Since these actions are subject to little\nstatic checking, they are usually a source of errors which are discovered only\nwhen generated code is compiled.\n  In this paper we propose a parser generator front-end which statically checks\nsemantic actions for typing errors and prevents such errors from appearing in\ngenerated code. The type checking procedure is extensible to support many\nimplementation languages. An extension for Java is presented along with an\nextension for declarative type system descriptions.\n", "versions": [{"version": "v1", "created": "Mon, 8 Feb 2010 08:51:06 GMT"}], "update_date": "2010-02-09", "authors_parsed": [["Breslav", "Andrey", ""]]}, {"id": "1002.1833", "submitter": "Rafael Caballero", "authors": "F.J. L\\'opez-Fraguas, J. Rodr\\'iguez-Hortal\\'a", "title": "The Full Abstraction Problem for Higher Order Functional-Logic Programs", "comments": null, "journal-ref": "WLPE 2009 Proceedings", "doi": null, "report-no": null, "categories": "cs.LO cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Developing suitable formal semantics can be of great help in the\nunderstanding, design and implementation of a programming language, and act as\na guide for software development tools like analyzers or partial evaluators. In\nthis sense, full abstraction is a highly desirable property, indicating a\nperfect correspondence between the semantics and the observable behavior of\nprogram pieces. In this work we address the question of full abstraction for\nthe family of modern functional logic languages, in which functions can be\nhigher order and non-deterministic, and where the semantics adopted for\nnon-determinism is \\emph{call-time choice}. We show that, with respect to\nnatural notions of \\emph{observation}, any semantics based on\n\\emph{extensional} functions is necessarily unsound; in contrast, we show that\nthe higher order version of \\emph{CRWL}, a well-known existing semantic\nframework for functional logic programming, based on an \\emph{intensional} view\nof functions, turns out to be fully abstract and compositional.\n", "versions": [{"version": "v1", "created": "Tue, 9 Feb 2010 12:08:35 GMT"}], "update_date": "2010-02-16", "authors_parsed": [["L\u00f3pez-Fraguas", "F. J.", ""], ["Rodr\u00edguez-Hortal\u00e1", "J.", ""]]}, {"id": "1002.1836", "submitter": "Rafael Caballero", "authors": "F. Bueno, J. Navas, and M. Hermenegildo", "title": "Towards Parameterized Regular Type Inference Using Set Constraints", "comments": null, "journal-ref": "WLPE 2009 Proceedings", "doi": null, "report-no": null, "categories": "cs.LO cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We propose a method for inferring \\emph{parameterized regular types} for\nlogic programs as solutions for systems of constraints over sets of finite\nground Herbrand terms (set constraint systems). Such parameterized regular\ntypes generalize \\emph{parametric} regular types by extending the scope of the\nparameters in the type definitions so that such parameters can relate the types\nof different predicates. We propose a number of enhancements to the procedure\nfor solving the constraint systems that improve the precision of the type\ndescriptions inferred. The resulting algorithm, together with a procedure to\nestablish a set constraint system from a logic program, yields a program\nanalysis that infers tighter safe approximations of the success types of the\nprogram than previous comparable work, offering a new and useful efficiency vs.\nprecision trade-off. This is supported by experimental results, which show the\nfeasibility of our analysis.\n", "versions": [{"version": "v1", "created": "Tue, 9 Feb 2010 12:21:31 GMT"}], "update_date": "2010-02-16", "authors_parsed": [["Bueno", "F.", ""], ["Navas", "J.", ""], ["Hermenegildo", "M.", ""]]}, {"id": "1002.2868", "submitter": "EPTCS", "authors": "MohammadReza Mousavi (Eindhoven University of Technology)", "title": "Causality in the Semantics of Esterel: Revisited", "comments": null, "journal-ref": "EPTCS 18, 2010, pp. 32-45", "doi": "10.4204/EPTCS.18.3", "report-no": null, "categories": "cs.LO cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We re-examine the challenges concerning causality in the semantics of Esterel\nand show that they pertain to the known issues in the semantics of Structured\nOperational Semantics with negative premises. We show that the solutions\noffered for the semantics of SOS also provide answers to the semantic\nchallenges of Esterel and that they satisfy the intuitive requirements set by\nthe language designers.\n", "versions": [{"version": "v1", "created": "Mon, 15 Feb 2010 12:35:17 GMT"}], "update_date": "2010-02-16", "authors_parsed": [["Mousavi", "MohammadReza", "", "Eindhoven University of Technology"]]}, {"id": "1002.2872", "submitter": "EPTCS", "authors": "Gilles Dowek (\\'Ecole Polytechnique and INRIA), C\\'esar Mu\\~noz\n  (National Institute of Aerospace), Camilo Rocha (University of Illinois)", "title": "Rewriting Logic Semantics of a Plan Execution Language", "comments": null, "journal-ref": "EPTCS 18, 2010, pp. 77-91", "doi": "10.4204/EPTCS.18.6", "report-no": null, "categories": "cs.PL cs.LO", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The Plan Execution Interchange Language (PLEXIL) is a synchronous language\ndeveloped by NASA to support autonomous spacecraft operations. In this paper,\nwe propose a rewriting logic semantics of PLEXIL in Maude, a high-performance\nlogical engine. The rewriting logic semantics is by itself a formal interpreter\nof the language and can be used as a semantic benchmark for the implementation\nof PLEXIL executives. The implementation in Maude has the additional benefit of\nmaking available to PLEXIL designers and developers all the formal analysis and\nverification tools provided by Maude. The formalization of the PLEXIL semantics\nin rewriting logic poses an interesting challenge due to the synchronous nature\nof the language and the prioritized rules defining its semantics. To overcome\nthis difficulty, we propose a general procedure for simulating synchronous set\nrelations in rewriting logic that is sound and, for deterministic relations,\ncomplete. We also report on two issues at the design level of the original\nPLEXIL semantics that were identified with the help of the executable\nspecification in Maude.\n", "versions": [{"version": "v1", "created": "Mon, 15 Feb 2010 12:48:09 GMT"}], "update_date": "2010-02-16", "authors_parsed": [["Dowek", "Gilles", "", "\u00c9cole Polytechnique and INRIA"], ["Mu\u00f1oz", "C\u00e9sar", "", "National Institute of Aerospace"], ["Rocha", "Camilo", "", "University of Illinois"]]}, {"id": "1002.2978", "submitter": "EPTCS", "authors": "Bartek Klin (University of Cambridge, Warsaw University), Pawe{\\l}\n  Soboci\\'nski (University of Southampton)", "title": "Proceedings Sixth Workshop on Structural Operational Semantics", "comments": null, "journal-ref": "EPTCS 18, 2010", "doi": "10.4204/EPTCS.18", "report-no": null, "categories": "cs.LO cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This volume contains the proceedings of SOS 2009, the Sixth Workshop on\nStructural Operational Semantics held on the 31st of August 2009 in Bologna,\nItaly as a affiliated workshop of CONCUR 2009, the 20th International\nConference on Concurrency Theory.\n  Structural operational semantics (SOS) is a technique for defining\noperational semantics for programming and specification languages. The workshop\nis forum for researchers, students and practitioners interested in new\ndevelopments and directions for future investigations in the area of SOS. One\nof the specific goals of the workshop is to provide a meeting point for the\nconcurrency and programming language communities. Another goal is the\ndissemination of the theory and practice of SOS amongst postgraduate students\nand young researchers worldwide.\n", "versions": [{"version": "v1", "created": "Mon, 15 Feb 2010 23:32:42 GMT"}], "update_date": "2010-02-17", "authors_parsed": [["Klin", "Bartek", "", "University of Cambridge, Warsaw University"], ["Soboci\u0144ski", "Pawe\u0142", "", "University of Southampton"]]}, {"id": "1002.4392", "submitter": "Serguei Mokhov", "authors": "Xin Tong, Joey Paquet, and Serguei A. Mokhov", "title": "Complete Context Calculus Design and Implementation in GIPSY", "comments": "21 page; 18 listings; 2 figures; a complete version of the referenced\n  simple context calculus implementation", "journal-ref": null, "doi": "10.1109/COMPSAC.2008.200", "report-no": null, "categories": "cs.FL cs.LO cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper presents the integration into the GIPSY of Lucx's context calculus\ndefined in Wan's PhD thesis. We start by defining different types of tag sets,\nthen we explain the concept of context, the types of context and the context\ncalculus operators. Finally, we present how context entities have been\nabstracted into Java classes and embedded into the GIPSY system.\n", "versions": [{"version": "v1", "created": "Tue, 23 Feb 2010 19:29:43 GMT"}], "update_date": "2010-02-24", "authors_parsed": [["Tong", "Xin", ""], ["Paquet", "Joey", ""], ["Mokhov", "Serguei A.", ""]]}, {"id": "1002.4668", "submitter": "Marco Aldinucci", "authors": "Marco Aldinucci, Marco Danelutto, Peter Kilpatrick, Massimiliano\n  Meneghin, Massimo Torquati", "title": "Accelerating sequential programs using FastFlow and self-offloading", "comments": "17 pages + cover", "journal-ref": null, "doi": null, "report-no": "TR-10-03", "categories": "cs.DC cs.PL cs.SE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  FastFlow is a programming environment specifically targeting cache-coherent\nshared-memory multi-cores. FastFlow is implemented as a stack of C++ template\nlibraries built on top of lock-free (fence-free) synchronization mechanisms. In\nthis paper we present a further evolution of FastFlow enabling programmers to\noffload part of their workload on a dynamically created software accelerator\nrunning on unused CPUs. The offloaded function can be easily derived from\npre-existing sequential code. We emphasize in particular the effective\ntrade-off between human productivity and execution efficiency of the approach.\n", "versions": [{"version": "v1", "created": "Thu, 25 Feb 2010 00:49:06 GMT"}], "update_date": "2010-02-26", "authors_parsed": [["Aldinucci", "Marco", ""], ["Danelutto", "Marco", ""], ["Kilpatrick", "Peter", ""], ["Meneghin", "Massimiliano", ""], ["Torquati", "Massimo", ""]]}, {"id": "1002.4919", "submitter": "EPTCS", "authors": "Emanuela Merelli (University of Camerino, IT), Paola Quaglia (CoSBi\n  and University of Trento, IT)", "title": "Proceedings Third Workshop From Biology To Concurrency and back", "comments": null, "journal-ref": "EPTCS 19, 2010", "doi": "10.4204/EPTCS.19", "report-no": null, "categories": "cs.CE cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This volume contains the papers presented at the 3rd Workshop \"From Biology\nTo Concurrency and back\", FBTC 2010, held in Paphos, Cyprus, on March 27, 2010,\nas satellite event of the Joint European Conference on Theory and Practice of\nSoftware, ETAPS 2010.\n  The Workshop aimed at gathering together researchers with special interest at\nthe convergence of life and computer science, with particular focus on the\napplication of techniques and methods from concurrency. The papers contained in\nthis volume present works on modelling, analysis, and validation of biological\nbehaviours using concurrency-inspired methods and platforms, and bio-inspired\nmodels and tools for describing distributed interactions.\n", "versions": [{"version": "v1", "created": "Fri, 26 Feb 2010 03:54:16 GMT"}], "update_date": "2010-03-01", "authors_parsed": [["Merelli", "Emanuela", "", "University of Camerino, IT"], ["Quaglia", "Paola", "", "CoSBi\n  and University of Trento, IT"]]}]