[{"id": "0805.4029", "submitter": "Avik Chaudhuri", "authors": "Avik Chaudhuri", "title": "Event Synchronization by Lightweight Message Passing", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Concurrent ML's events and event combinators facilitate modular concurrent\nprogramming with first-class synchronization abstractions. A standard\nimplementation of these abstractions relies on fairly complex manipulations of\nfirst-class continuations in the underlying language. In this paper, we present\na lightweight implementation of these abstractions in Concurrent Haskell, a\nlanguage that already provides first-order message passing. At the heart of our\nimplementation is a new distributed synchronization protocol. In contrast with\nseveral previous translations of event abstractions in concurrent languages, we\nremain faithful to the standard semantics for events and event combinators; for\nexample, we retain the symmetry of $\\mathtt{choose}$ for expressing selective\ncommunication.\n", "versions": [{"version": "v1", "created": "Tue, 27 May 2008 01:31:05 GMT"}], "update_date": "2008-05-28", "authors_parsed": [["Chaudhuri", "Avik", ""]]}]