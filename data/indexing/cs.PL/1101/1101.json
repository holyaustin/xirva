[{"id": "1101.1038", "submitter": "Benjamin Morandi", "authors": "Benjamin Morandi, Sebastian Nanz, Bertrand Meyer", "title": "A comprehensive operational semantics of the SCOOP programming model", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Operational semantics has established itself as a flexible but rigorous means\nto describe the meaning of programming languages. Oftentimes, it is felt\nnecessary to keep a semantics small, for example to facilitate its use for\nmodel checking by avoiding state space explosion. However, omitting many\ndetails in a semantics typically makes results valid for a limited core\nlanguage only, leaving a wide gap towards any real implementation. In this\npaper we present a full-fledged semantics of the concurrent object-oriented\nprogramming language SCOOP (Simple Concurrent Object-Oriented Programming). The\nsemantics has been found detailed enough to guide an implementation of the\nSCOOP compiler and runtime system, and to detect and correct a variety of\nerrors and ambiguities in the original informal specification and prototype\nimplementation. In our formal specification, we use abstract data types with\npreconditions and axioms to describe the state, and introduce a number of\nspecial run-time operations to model the runtime system with our inference\nrules. This approach allows us to make our large formal specification\nmanageable, providing a first step towards reference documents for specifying\nobject-oriented languages based on operational semantics.\n", "versions": [{"version": "v1", "created": "Wed, 5 Jan 2011 17:32:02 GMT"}, {"version": "v2", "created": "Fri, 13 Apr 2012 11:54:38 GMT"}], "update_date": "2015-03-17", "authors_parsed": [["Morandi", "Benjamin", ""], ["Nanz", "Sebastian", ""], ["Meyer", "Bertrand", ""]]}, {"id": "1101.2146", "submitter": "Carlos A. Romero-Diaz", "authors": "Rafael Caballero and Mario Rodr\\'iguez-Artalejo and Carlos A.\n  Romero-D\\'iaz", "title": "A Generic Scheme for Qualified Constraint Functional Logic Progamming", "comments": "36 pages, 5 figures, extended version with full proofs of Qualified\n  Computations in Functional Logic Programming, in P.M. Hill and D.S. Warren\n  (Eds.), ICLP 2009, LNCS 5649, pp. 449-463, 2009", "journal-ref": null, "doi": null, "report-no": "SIC-1-09", "categories": "cs.PL cs.LO", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Qualification has been recently introduced as a generalization of uncertainty\nin the field of Logic Programming. In this report we investigate a more\nexpressive language for First-Order Functional Logic Programming with\nConstraints and Qualification. We present a Rewriting Logic which characterizes\nthe intended semantics of programs, and a prototype implementation based on a\nsemantically correct program transformation. Potential applications of the\nresulting language include flexible information retrieval. As a concrete\nillustration, we show how to write program rules to compute qualified answers\nfor user queries concerning the books available in a given library.\n", "versions": [{"version": "v1", "created": "Tue, 11 Jan 2011 15:46:59 GMT"}], "update_date": "2011-01-12", "authors_parsed": [["Caballero", "Rafael", ""], ["Rodr\u00edguez-Artalejo", "Mario", ""], ["Romero-D\u00edaz", "Carlos A.", ""]]}, {"id": "1101.2812", "submitter": "David Monniaux", "authors": "Thomas Martin Gawlitza (VERIMAG - IMAG), David Monniaux (VERIMAG -\n  IMAG)", "title": "Improving Strategies via SMT Solving", "comments": null, "journal-ref": null, "doi": "10.1007/978-3-642-19718-5_13", "report-no": null, "categories": "cs.PL cs.CC cs.LO math.OC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We consider the problem of computing numerical invariants of programs by\nabstract interpretation. Our method eschews two traditional sources of\nimprecision: (i) the use of widening operators for enforcing convergence within\na finite number of iterations (ii) the use of merge operations (often, convex\nhulls) at the merge points of the control flow graph. It instead computes the\nleast inductive invariant expressible in the domain at a restricted set of\nprogram points, and analyzes the rest of the code en bloc. We emphasize that we\ncompute this inductive invariant precisely. For that we extend the strategy\nimprovement algorithm of [Gawlitza and Seidl, 2007]. If we applied their method\ndirectly, we would have to solve an exponentially sized system of abstract\nsemantic equations, resulting in memory exhaustion. Instead, we keep the system\nimplicit and discover strategy improvements using SAT modulo real linear\narithmetic (SMT). For evaluating strategies we use linear programming. Our\nalgorithm has low polynomial space complexity and performs for contrived\nexamples in the worst case exponentially many strategy improvement steps; this\nis unsurprising, since we show that the associated abstract reachability\nproblem is Pi-p-2-complete.\n", "versions": [{"version": "v1", "created": "Fri, 14 Jan 2011 13:59:06 GMT"}], "update_date": "2015-05-27", "authors_parsed": [["Gawlitza", "Thomas Martin", "", "VERIMAG - IMAG"], ["Monniaux", "David", "", "VERIMAG -\n  IMAG"]]}, {"id": "1101.3356", "submitter": "Raimund Kirner", "authors": "Alex Shafarenko and Raimund Kirner", "title": "CAL: A Language for Aggregating Functional and Extrafunctional\n  Constraints in Streaming Networks", "comments": "14 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this article we present the {\\em Constraint Aggregation Language} (CAL), a\ndeclarative language for describing properties of stateless program components\nthat interact by exchanging messages. CAL allows one to describe functional as\nwell as extra-functional behaviours, such as computation latency. The CAL\nlanguage intention is to be able to describe the behaviour of so-called boxes\nin the context of S-Net. However, the language would find application in other\ncoordination models based on stateless components.\n", "versions": [{"version": "v1", "created": "Mon, 17 Jan 2011 23:51:59 GMT"}, {"version": "v2", "created": "Wed, 19 Jan 2011 14:07:27 GMT"}], "update_date": "2011-01-20", "authors_parsed": [["Shafarenko", "Alex", ""], ["Kirner", "Raimund", ""]]}, {"id": "1101.4104", "submitter": "EPTCS", "authors": "Elaine Pimentel (University of Minas Gerais - Brazil), Betti Venneri\n  (University of Firenze - Italy), Joe Wells (Heriot-Watt University - UK)", "title": "Proceedings Fifth Workshop on Intersection Types and Related Systems", "comments": null, "journal-ref": "EPTCS 45, 2011", "doi": "10.4204/EPTCS.45", "report-no": null, "categories": "cs.LO cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This volume contains the proceedings of the Fifth International Workshop on\nIntersection Types and Related Systems (ITRS 2010). The workshop was held in\nEdinburgh, Scotland, on July 9th 2010, as part of FLoC 2010 and affiliated with\nLICS 2010.\n  The ITRS workshop series aim at bringing together researchers working on both\nthe theory and practical applications of systems based on intersection types\nand related approaches (e.g., union types, refinement types, behavioral types).\n", "versions": [{"version": "v1", "created": "Fri, 21 Jan 2011 10:22:42 GMT"}], "update_date": "2011-01-24", "authors_parsed": [["Pimentel", "Elaine", "", "University of Minas Gerais - Brazil"], ["Venneri", "Betti", "", "University of Firenze - Italy"], ["Wells", "Joe", "", "Heriot-Watt University - UK"]]}, {"id": "1101.4423", "submitter": "EPTCS", "authors": "Adriana Compagnoni (Stevens Institute of Technology), Healfdene Goguen\n  (Google, Inc.)", "title": "Relating Church-Style and Curry-Style Subtyping", "comments": "In Proceedings ITRS 2010, arXiv:1101.4104", "journal-ref": "EPTCS 45, 2011, pp. 1-15", "doi": "10.4204/EPTCS.45.1", "report-no": null, "categories": "cs.LO cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Type theories with higher-order subtyping or singleton types are examples of\nsystems where computation rules for variables are affected by type information\nin the context. A complication for these systems is that bounds declared in the\ncontext do not interact well with the logical relation proof of completeness or\ntermination. This paper proposes a natural modification to the type syntax for\nF-Omega-Sub, adding variable's bound to the variable type constructor, thereby\nseparating the computational behavior of the variable from the context. The\nalgorithm for subtyping in F-Omega-Sub can then be given on types without\ncontext or kind information. As a consequence, the metatheory follows the\ngeneral approach for type systems without computational information in the\ncontext, including a simple logical relation definition without Kripke-style\nindexing by context. This new presentation of the system is shown to be\nequivalent to the traditional presentation without bounds on the variable type\nconstructor.\n", "versions": [{"version": "v1", "created": "Mon, 24 Jan 2011 01:39:12 GMT"}], "update_date": "2011-01-25", "authors_parsed": [["Compagnoni", "Adriana", "", "Stevens Institute of Technology"], ["Goguen", "Healfdene", "", "Google, Inc."]]}, {"id": "1101.4424", "submitter": "EPTCS", "authors": "Simona Ronchi Della Rocca (Universita' di Torino Dipartimento di\n  Informatica Torino Italy), Alexis Saurin (Laboratoire CNR PPS and INRIA Paris\n  France), Yiorgos Stavrinos (Department of Mathematics, University of Athens,\n  Greece), Anastasia Veneti (Department of Mathematics University of Athens\n  Greece)", "title": "Intersection Logic in sequent calculus style", "comments": "In Proceedings ITRS 2010, arXiv:1101.4104", "journal-ref": "EPTCS 45, 2011, pp. 16-30", "doi": "10.4204/EPTCS.45.2", "report-no": null, "categories": "cs.LO cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The intersection type assignment system has been designed directly as\ndeductive system for assigning formulae of the implicative and conjunctive\nfragment of the intuitionistic logic to terms of lambda-calculus. But its\nrelation with the logic is not standard. Between all the logics that have been\nproposed as its foundation, we consider ISL, which gives a logical\ninterpretation of the intersection by splitting the intuitionistic conjunction\ninto two connectives, with a local and global behaviour respectively, being the\nintersection the local one. We think ISL is a logic interesting by itself, and\nin order to support this claim we give a sequent calculus formulation of it,\nand we prove that it enjoys the cut elimination property.\n", "versions": [{"version": "v1", "created": "Mon, 24 Jan 2011 01:39:22 GMT"}], "update_date": "2011-01-25", "authors_parsed": [["Della Rocca", "Simona Ronchi", "", "Universita' di Torino Dipartimento di\n  Informatica Torino Italy"], ["Saurin", "Alexis", "", "Laboratoire CNR PPS and INRIA Paris\n  France"], ["Stavrinos", "Yiorgos", "", "Department of Mathematics, University of Athens,\n  Greece"], ["Veneti", "Anastasia", "", "Department of Mathematics University of Athens\n  Greece"]]}, {"id": "1101.4426", "submitter": "EPTCS", "authors": "Mariangiola Dezani-Ciancaglini, Paola Giannini, Elena Zucca", "title": "Intersection types for unbind and rebind", "comments": "In Proceedings ITRS 2010, arXiv:1101.4104", "journal-ref": "EPTCS 45, 2011, pp. 45-58", "doi": "10.4204/EPTCS.45.4", "report-no": null, "categories": "cs.LO cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We define a type system with intersection types for an extension of\nlambda-calculus with unbind and rebind operators. In this calculus, a term with\nfree variables, representing open code, can be packed into an \"unbound\" term,\nand passed around as a value. In order to execute inside code, an unbound term\nshould be explicitly rebound at the point where it is used. Unbinding and\nrebinding are hierarchical, that is, the term can contain arbitrarily nested\nunbound terms, whose inside code can only be executed after a sequence of\nrebinds has been applied. Correspondingly, types are decorated with levels, and\na term has type decorated with k if it needs k rebinds in order to reduce to a\nvalue. With intersection types we model the fact that a term can be used\ndifferently in contexts providing different numbers of unbinds. In particular,\ntop-level terms, that is, terms not requiring unbinds to reduce to values,\nshould have a value type, that is, an intersection type where at least one\nelement has level 0. With the proposed intersection type system we get\nsoundness under the call-by-value strategy, an issue which was not resolved by\nprevious type systems.\n", "versions": [{"version": "v1", "created": "Mon, 24 Jan 2011 01:39:37 GMT"}], "update_date": "2011-01-25", "authors_parsed": [["Dezani-Ciancaglini", "Mariangiola", ""], ["Giannini", "Paola", ""], ["Zucca", "Elena", ""]]}, {"id": "1101.4428", "submitter": "EPTCS", "authors": "Jana Dunfield", "title": "Untangling Typechecking of Intersections and Unions", "comments": "In Proceedings ITRS 2010, arXiv:1101.4104", "journal-ref": "EPTCS 45, 2011, pp. 59-70", "doi": "10.4204/EPTCS.45.5", "report-no": null, "categories": "cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Intersection and union types denote conjunctions and disjunctions of\nproperties. Using bidirectional typechecking, intersection types are relatively\nstraightforward, but union types present challenges. For union types, we can\ncase-analyze a subterm of union type when it appears in evaluation position\n(replacing the subterm with a variable, and checking that term twice under\nappropriate assumptions). This technique preserves soundness in a call-by-value\nsemantics.\n  Sadly, there are so many choices of subterms that a direct implementation is\nnot practical. But carefully transforming programs into let-normal form\ndrastically reduces the number of choices. The key results are soundness and\ncompleteness: a typing derivation (in the system with too many subterm choices)\nexists for a program if and only if a derivation exists for the let-normalized\nprogram.\n", "versions": [{"version": "v1", "created": "Mon, 24 Jan 2011 01:39:46 GMT"}], "update_date": "2021-03-24", "authors_parsed": [["Dunfield", "Jana", ""]]}, {"id": "1101.4429", "submitter": "EPTCS", "authors": "Luca Padovani (Dipartimento di Informatica, Universit\\`a di Torino,\n  Italy)", "title": "Session Types = Intersection Types + Union Types", "comments": "In Proceedings ITRS 2010, arXiv:1101.4104", "journal-ref": "EPTCS 45, 2011, pp. 71-89", "doi": "10.4204/EPTCS.45.6", "report-no": null, "categories": "cs.PL cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We propose a semantically grounded theory of session types which relies on\nintersection and union types. We argue that intersection and union types are\nnatural candidates for modeling branching points in session types and we show\nthat the resulting theory overcomes some important defects of related\nbehavioral theories. In particular, intersections and unions provide a native\nsolution to the problem of computing joins and meets of session types. Also,\nthe subtyping relation turns out to be a pre-congruence, while this is not\nalways the case in related behavioral theories.\n", "versions": [{"version": "v1", "created": "Mon, 24 Jan 2011 01:39:52 GMT"}], "update_date": "2011-01-25", "authors_parsed": [["Padovani", "Luca", "", "Dipartimento di Informatica, Universit\u00e0 di Torino,\n  Italy"]]}, {"id": "1101.4430", "submitter": "EPTCS", "authors": "Vilhelm Sj\\\"oberg (University of Pennsylvania), Aaron Stump (The\n  University of Iowa)", "title": "Equality, Quasi-Implicit Products, and Large Eliminations", "comments": "In Proceedings ITRS 2010, arXiv:1101.4104", "journal-ref": "EPTCS 45, 2011, pp. 90-100", "doi": "10.4204/EPTCS.45.7", "report-no": null, "categories": "cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper presents a type theory with a form of equality reflection:\nprovable equalities can be used to coerce the type of a term. Coercions and\nother annotations, including implicit arguments, are dropped during reduction\nof terms. We develop the metatheory for an undecidable version of the system\nwith unannotated terms. We then devise a decidable system with annotated terms,\njustified in terms of the unannotated system. Finally, we show how the approach\ncan be extended to account for large eliminations, using what we call\nquasi-implicit products.\n", "versions": [{"version": "v1", "created": "Mon, 24 Jan 2011 01:40:00 GMT"}], "update_date": "2011-01-25", "authors_parsed": [["Sj\u00f6berg", "Vilhelm", "", "University of Pennsylvania"], ["Stump", "Aaron", "", "The\n  University of Iowa"]]}, {"id": "1101.4594", "submitter": "Pawel Sobocinski", "authors": "Pawel Sobocinski (DSSE, ECS, University of Southampton), Tobias\n  Heindel (Laboratoire d'Informatique de Paris-Nord, Universit\\'e de Paris,\n  France)", "title": "Being Van Kampen is a universal property", "comments": "22 pages", "journal-ref": "Logical Methods in Computer Science, Volume 7, Issue 1 (April 1,\n  2011) lmcs:701", "doi": "10.2168/LMCS-7(1:14)2011", "report-no": null, "categories": "math.CT cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Colimits that satisfy the Van Kampen condition have interesting exactness\nproperties. We show that the elementary presentation of the Van Kampen\ncondition is actually a characterisation of a universal property in the\nassociated bicategory of spans. The main theorem states that Van Kampen cocones\nare precisely those diagrams in a category that induce bicolimit diagrams in\nits associated bicategory of spans, provided that the category has pullbacks\nand enough colimits.\n", "versions": [{"version": "v1", "created": "Mon, 24 Jan 2011 17:14:14 GMT"}, {"version": "v2", "created": "Thu, 31 Mar 2011 12:29:32 GMT"}], "update_date": "2015-07-01", "authors_parsed": [["Sobocinski", "Pawel", "", "DSSE, ECS, University of Southampton"], ["Heindel", "Tobias", "", "Laboratoire d'Informatique de Paris-Nord, Universit\u00e9 de Paris,\n  France"]]}, {"id": "1101.4732", "submitter": "EPTCS", "authors": "Maria Grazia Buscemi, Hern\\'an Melgratti", "title": "Contracts for Abstract Processes in Service Composition", "comments": "In Proceedings FIT 2010, arXiv:1101.4266", "journal-ref": "EPTCS 46, 2011, pp. 9-27", "doi": "10.4204/EPTCS.46.2", "report-no": null, "categories": "cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Contracts are a well-established approach for describing and analyzing\nbehavioral aspects of web service compositions. The theory of contracts comes\nequipped with a notion of compatibility between clients and servers that\nensures that every possible interaction between compatible clients and servers\nwill complete successfully. It is generally agreed that real applications often\nrequire the ability of exposing just partial descriptions of their behaviors,\nwhich are usually known as abstract processes. We propose a formal\ncharacterization of abstraction as an extension of the usual symbolic\nbisimulation and we recover the notion of abstraction in the context of\ncontracts.\n", "versions": [{"version": "v1", "created": "Tue, 25 Jan 2011 06:57:41 GMT"}], "update_date": "2011-01-26", "authors_parsed": [["Buscemi", "Maria Grazia", ""], ["Melgratti", "Hern\u00e1n", ""]]}, {"id": "1101.4733", "submitter": "EPTCS", "authors": "Michael Mendler (Bamberg University, Germany)", "title": "An Algebra of Synchronous Scheduling Interfaces", "comments": "In Proceedings FIT 2010, arXiv:1101.4266", "journal-ref": "EPTCS 46, 2011, pp. 28-48", "doi": "10.4204/EPTCS.46.3", "report-no": null, "categories": "cs.LO cs.PF cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this paper we propose an algebra of synchronous scheduling interfaces\nwhich combines the expressiveness of Boolean algebra for logical and functional\nbehaviour with the min-max-plus arithmetic for quantifying the non-functional\naspects of synchronous interfaces. The interface theory arises from a\nrealisability interpretation of intuitionistic modal logic (also known as\nCurry-Howard-Isomorphism or propositions-as-types principle). The resulting\nalgebra of interface types aims to provide a general setting for specifying\ntype-directed and compositional analyses of worst-case scheduling bounds. It\ncovers synchronous control flow under concurrent, multi-processing or\nmulti-threading execution and permits precise statements about exactness and\ncoverage of the analyses supporting a variety of abstractions. The paper\nillustrates the expressiveness of the algebra by way of some examples taken\nfrom network flow problems, shortest-path, task scheduling and worst-case\nreaction times in synchronous programming.\n", "versions": [{"version": "v1", "created": "Tue, 25 Jan 2011 06:57:48 GMT"}], "update_date": "2011-01-26", "authors_parsed": [["Mendler", "Michael", "", "Bamberg University, Germany"]]}, {"id": "1101.5569", "submitter": "Piotr Jacek Puczynski", "authors": "Piotr J. Puczynski", "title": "T2Script Programming Language", "comments": "27 pages, 9 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Event-driven programming is used in many fields of modern Computer Science.\nIn event-driven programming languages user interacts with a program by\ntriggering the events. We propose a new approach that we denote command-event\ndriven programming in which the user interacts with a program by means of\nevents and commands. We describe a new programming language, T2Script, which is\nbased on command-event driven paradigm. T2Script has been already implemented\nand used in one of industrial products. We describe the rationale, basic\nconcepts and advanced programming techniques of new T2Script language. We\nevaluate the new language and show what advantages and limitations it has.\n", "versions": [{"version": "v1", "created": "Fri, 28 Jan 2011 16:42:00 GMT"}], "update_date": "2015-03-18", "authors_parsed": [["Puczynski", "Piotr J.", ""]]}, {"id": "1101.6029", "submitter": "Fernando Silva", "authors": "Ricardo Lopes, V\\'itor Santos Costa and Fernando Silva", "title": "A Design and Implementation of the Extended Andorra Model", "comments": "43 pages, To appear in Theory and Practice of Logic Programming\n  (TPLP)", "journal-ref": null, "doi": "10.1017/S1471068411000068", "report-no": null, "categories": "cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Logic programming provides a high-level view of programming, giving\nimplementers a vast latitude into what techniques to explore to achieve the\nbest performance for logic programs. Towards obtaining maximum performance, one\nof the holy grails of logic programming has been to design computational models\nthat could be executed efficiently and that would allow both for a reduction of\nthe search space and for exploiting all the available parallelism in the\napplication. These goals have motivated the design of the Extended Andorra\nModel, a model where goals that do not constrain non-deterministic goals can\nexecute first.\n  In this work we present and evaluate the Basic design for Extended Andorra\nModel (BEAM), a system that builds upon David H. D. Warren's original EAM with\nImplicit Control. We provide a complete description and implementation of the\nBEAM System as a set of rewrite and control rules. We present the major data\nstructures and execution algorithms that are required for efficient execution,\nand evaluate system performance.\n  A detailed performance study of our system is included. Our results show that\nthe system achieves acceptable base performance, and that a number of\napplications benefit from the advanced search inherent to the EAM.\n", "versions": [{"version": "v1", "created": "Mon, 31 Jan 2011 17:15:09 GMT"}, {"version": "v2", "created": "Mon, 21 Feb 2011 17:10:34 GMT"}], "update_date": "2011-05-23", "authors_parsed": [["Lopes", "Ricardo", ""], ["Costa", "V\u00edtor Santos", ""], ["Silva", "Fernando", ""]]}]