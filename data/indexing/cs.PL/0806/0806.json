[{"id": "0806.2448", "submitter": "Nobuko Yoshida Dr", "authors": "Nobuko Yoshida, Kohei Honda and Martin Berger", "title": "Logical Reasoning for Higher-Order Functions with Local State", "comments": "68 pages", "journal-ref": "Logical Methods in Computer Science, Volume 4, Issue 4 (October\n  20, 2008) lmcs:830", "doi": "10.2168/LMCS-4(4:2)2008", "report-no": null, "categories": "cs.LO cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We introduce an extension of Hoare logic for call-by-value higher-order\nfunctions with ML-like local reference generation. Local references may be\ngenerated dynamically and exported outside their scope, may store higher-order\nfunctions and may be used to construct complex mutable data structures. This\nprimitive is captured logically using a predicate asserting reachability of a\nreference name from a possibly higher-order datum and quantifiers over hidden\nreferences. We explore the logic's descriptive and reasoning power with\nnon-trivial programming examples combining higher-order procedures and\ndynamically generated local state. Axioms for reachability and local invariant\nplay a central role for reasoning about the examples.\n", "versions": [{"version": "v1", "created": "Sun, 15 Jun 2008 14:43:25 GMT"}, {"version": "v2", "created": "Mon, 20 Oct 2008 08:47:19 GMT"}], "update_date": "2015-07-01", "authors_parsed": [["Yoshida", "Nobuko", ""], ["Honda", "Kohei", ""], ["Berger", "Martin", ""]]}, {"id": "0806.2680", "submitter": "Joerg Endrullis", "authors": "Joerg Endrullis, Clemens Grabmayer, Dimitri Hendriks", "title": "Data-Oblivious Stream Productivity", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.LO cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We are concerned with demonstrating productivity of specifications of\ninfinite streams of data, based on orthogonal rewrite rules. In general, this\nproperty is undecidable, but for restricted formats computable sufficient\nconditions can be obtained. The usual analysis disregards the identity of data,\nthus leading to approaches that we call data-oblivious. We present a method\nthat is provably optimal among all such data-oblivious approaches. This means\nthat in order to improve on the algorithm in this paper one has to proceed in a\ndata-aware fashion.\n", "versions": [{"version": "v1", "created": "Mon, 16 Jun 2008 22:02:56 GMT"}, {"version": "v2", "created": "Thu, 26 Jun 2008 16:06:16 GMT"}, {"version": "v3", "created": "Fri, 27 Jun 2008 14:18:25 GMT"}, {"version": "v4", "created": "Fri, 4 Jul 2008 15:05:51 GMT"}, {"version": "v5", "created": "Sat, 19 Jul 2008 22:45:16 GMT"}], "update_date": "2008-07-20", "authors_parsed": [["Endrullis", "Joerg", ""], ["Grabmayer", "Clemens", ""], ["Hendriks", "Dimitri", ""]]}, {"id": "0806.2735", "submitter": "Jonathan Grattage", "authors": "Jonathan Grattage", "title": "An overview of QML with a concrete implementation in Haskell", "comments": "9 pages, final conference version (Quantum Physics and Logic 2008)", "journal-ref": "ENTCS: Proceedings of QPL V - DCV IV, 157-165, Reykjavik, Iceland,\n  2008", "doi": null, "report-no": null, "categories": "quant-ph cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper gives an introduction to and overview of the functional quantum\nprogramming language QML. The syntax of this language is defined and explained,\nalong with a new QML definition of the quantum teleport algorithm. The\ncategorical operational semantics of QML is also briefly introduced, in the\nform of annotated quantum circuits. This definition leads to a denotational\nsemantics, given in terms of superoperators. Finally, an implementation in\nHaskell of the semantics for QML is presented as a compiler. The compiler takes\nQML programs as input, which are parsed into a Haskell datatype. The output\nfrom the compiler is either a quantum circuit (operational), an isometry (pure\ndenotational) or a superoperator (impure denotational). Orthogonality\njudgements and problems with coproducts in QML are also discussed.\n", "versions": [{"version": "v1", "created": "Tue, 17 Jun 2008 10:02:04 GMT"}, {"version": "v2", "created": "Mon, 21 Jul 2008 15:56:47 GMT"}], "update_date": "2008-07-21", "authors_parsed": [["Grattage", "Jonathan", ""]]}, {"id": "0806.3849", "submitter": "Etienne Lozes", "authors": "Daniel Hirschkoff, Etienne Lozes, Davide Sangiorgi", "title": "Separability in the Ambient Logic", "comments": "logical methods in computer science, 44 pages", "journal-ref": "Logical Methods in Computer Science, Volume 4, Issue 3 (September\n  4, 2008) lmcs:682", "doi": "10.2168/LMCS-4(3:4)2008", "report-no": null, "categories": "cs.LO cs.MA cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The \\it{Ambient Logic} (AL) has been proposed for expressing properties of\nprocess mobility in the calculus of Mobile Ambients (MA), and as a basis for\nquery languages on semistructured data. We study some basic questions\nconcerning the discriminating power of AL, focusing on the equivalence on\nprocesses induced by the logic $(=_L>)$. As underlying calculi besides MA we\nconsider a subcalculus in which an image-finiteness condition holds and that we\nprove to be Turing complete. Synchronous variants of these calculi are studied\nas well. In these calculi, we provide two operational characterisations of\n$_=L$: a coinductive one (as a form of bisimilarity) and an inductive one\n(based on structual properties of processes). After showing $_=L$ to be stricly\nfiner than barbed congruence, we establish axiomatisations of $_=L$ on the\nsubcalculus of MA (both the asynchronous and the synchronous version), enabling\nus to relate $_=L$ to structural congruence. We also present some\n(un)decidability results that are related to the above separation properties\nfor AL: the undecidability of $_=L$ on MA and its decidability on the\nsubcalculus.\n", "versions": [{"version": "v1", "created": "Tue, 24 Jun 2008 10:00:00 GMT"}, {"version": "v2", "created": "Thu, 4 Sep 2008 07:13:38 GMT"}], "update_date": "2015-07-01", "authors_parsed": [["Hirschkoff", "Daniel", ""], ["Lozes", "Etienne", ""], ["Sangiorgi", "Davide", ""]]}, {"id": "0806.4746", "submitter": "Alexandr Savinov", "authors": "Alexandr Savinov", "title": "Concept-Oriented Programming", "comments": "46 pages, 8 figures, 11 listings", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Object-oriented programming (OOP) is aimed at describing the structure and\nbehaviour of objects by hiding the mechanism of their representation and access\nin primitive references. In this article we describe an approach, called\nconcept-oriented programming (COP), which focuses on modelling references\nassuming that they also possess application-specific structure and behaviour\naccounting for a great deal or even most of the overall program complexity.\nReferences in COP are completely legalized and get the same status as objects\nwhile the functions are distributed among both objects and references. In order\nto support this design we introduce a new programming construct, called\nconcept, which generalizes conventional classes and concept inclusion relation\ngeneralizing class inheritance. The main advantage of COP is that it allows\nprogrammers to describe two sides of any program: explicitly used functions of\nobjects and intermediate functionality of references having cross-cutting\nnature and executed implicitly behind the scenes during object access.\n", "versions": [{"version": "v1", "created": "Sun, 29 Jun 2008 10:56:41 GMT"}, {"version": "v2", "created": "Sun, 26 Sep 2010 11:21:01 GMT"}], "update_date": "2010-09-28", "authors_parsed": [["Savinov", "Alexandr", ""]]}]