[{"id": "0705.1452", "submitter": "Gregoire Henry", "authors": "Gr\\'egoire Henry (PPS), Michel Mauny (INRIA Rocquencourt, ENSTA-UMA),\n  Emmanuel Chailloux (PPS)", "title": "Typer la d\\'e-s\\'erialisation sans s\\'erialiser les types", "comments": null, "journal-ref": "Journ\\'ee francophone des langages applicatifs (JFLA) 2006\n  (01/2006)", "doi": null, "report-no": null, "categories": "cs.PL", "license": null, "abstract": "  In this paper, we propose a way of assigning static type information to\nunmarshalling functions and we describe a verification technique for\nunmarshalled data that preserves the execution safety provided by static type\nchecking. This technique, whose correctness is proven, relies on singleton\ntypes whose values are transmitted to unmarshalling routines at runtime, and on\nan efficient checking algorithm able to deal with sharing and cycles.\n", "versions": [{"version": "v1", "created": "Thu, 10 May 2007 12:19:51 GMT"}], "update_date": "2007-05-23", "authors_parsed": [["Henry", "Gr\u00e9goire", "", "PPS"], ["Mauny", "Michel", "", "INRIA Rocquencourt, ENSTA-UMA"], ["Chailloux", "Emmanuel", "", "PPS"]]}, {"id": "0705.1458", "submitter": "Gregoire Henry", "authors": "Emmanuel Chailloux (PPS), Gr\\'egoire Henry (PPS), Rapha\\\"el\n  Montelatici (PPS)", "title": "Mixing the Objective Caml and C# Programming Models in the .Net\n  Framework", "comments": null, "journal-ref": "Workshop on MULTIPARADIGM PROGRAMMING WITH OO LANGUAGES (MPOOL),\n  Norv\\`ege (06/2004)", "doi": null, "report-no": null, "categories": "cs.PL", "license": null, "abstract": "  We present a new code generator, called O'Jacare.net, to inter-operate\nbetween C# and Objective Caml through their object models. O'Jacare.net defines\na basic IDL (Interface Definition Language) that describes classes and\ninterfaces in order to communicate between Objective Caml and C#. O'Jacare.net\ngenerates all needed wrapper classes and takes advantage of static type\nchecking in both worlds. Although the IDL intersects these two object models,\nO'Jacare.net allows to combine features from both.\n", "versions": [{"version": "v1", "created": "Thu, 10 May 2007 12:31:17 GMT"}], "update_date": "2007-05-23", "authors_parsed": [["Chailloux", "Emmanuel", "", "PPS"], ["Henry", "Gr\u00e9goire", "", "PPS"], ["Montelatici", "Rapha\u00ebl", "", "PPS"]]}, {"id": "0705.2126", "submitter": "Francois De Ferriere", "authors": "Francois De Ferriere", "title": "Improvements to the Psi-SSA representation", "comments": null, "journal-ref": "Published in proceedings for the workshop \"Software and Compilers\n  for Embedded Systems (SCOPES) 2007\" (20/04/2007)", "doi": null, "report-no": null, "categories": "cs.PL", "license": null, "abstract": "  Modern compiler implementations use the Static Single Assignment\nrepresentation as a way to efficiently implement optimizing algorithms. However\nthis representation is not well adapted to architectures with a predicated\ninstruction set. The Psi-SSA representation extends the SSA representation such\nthat standard SSA algorithms can be easily adapted to an architecture with a\nfully predicated instruction set. A new pseudo operation, the Psi operation, is\nintroduced to merge several conditional definitions into a unique definition.\n", "versions": [{"version": "v1", "created": "Tue, 15 May 2007 12:06:32 GMT"}], "update_date": "2007-05-23", "authors_parsed": [["De Ferriere", "Francois", ""]]}, {"id": "0705.2145", "submitter": "Paul Feautrier", "authors": "Paul Feautrier (LIP, INRIA Rh\\^one-Alpes)", "title": "Elementary transformation analysis for Array-OL", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL", "license": null, "abstract": "  Array-OL is a high-level specification language dedicated to the definition\nof intensive signal processing applications. Several tools exist for\nimplementing an Array-OL specification as a data parallel program. While\nArray-OL can be used directly, it is often convenient to be able to deduce part\nof the specification from a sequential version of the application. This paper\nproposes such an analysis and examines its feasibility and its limits.\n", "versions": [{"version": "v1", "created": "Tue, 15 May 2007 13:44:35 GMT"}, {"version": "v2", "created": "Tue, 22 May 2007 09:52:57 GMT"}], "update_date": "2007-05-23", "authors_parsed": [["Feautrier", "Paul", "", "LIP, INRIA Rh\u00f4ne-Alpes"]]}, {"id": "0705.3468", "submitter": "Neng-Fa Zhou", "authors": "Neng-Fa Zhou, Taisuke Sato, and Yi-Dong Shen", "title": "Linear Tabling Strategies and Optimizations", "comments": "29 pages, 1 figure, TPLP", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL", "license": null, "abstract": "  Recently, the iterative approach named linear tabling has received\nconsiderable attention because of its simplicity, ease of implementation, and\ngood space efficiency. Linear tabling is a framework from which different\nmethods can be derived based on the strategies used in handling looping\nsubgoals. One decision concerns when answers are consumed and returned. This\npaper describes two strategies, namely, {\\it lazy} and {\\it eager} strategies,\nand compares them both qualitatively and quantitatively. The results indicate\nthat, while the lazy strategy has good locality and is well suited for finding\nall solutions, the eager strategy is comparable in speed with the lazy strategy\nand is well suited for programs with cuts. Linear tabling relies on depth-first\niterative deepening rather than suspension to compute fixpoints. Each cluster\nof inter-dependent subgoals as represented by a top-most looping subgoal is\niteratively evaluated until no subgoal in it can produce any new answers. Naive\nre-evaluation of all looping subgoals, albeit simple, may be computationally\nunacceptable. In this paper, we also introduce semi-naive optimization, an\neffective technique employed in bottom-up evaluation of logic programs to avoid\nredundant joins of answers, into linear tabling. We give the conditions for the\ntechnique to be safe (i.e. sound and complete) and propose an optimization\ntechnique called {\\it early answer promotion} to enhance its effectiveness.\nBenchmarking in B-Prolog demonstrates that with this optimization linear\ntabling compares favorably well in speed with the state-of-the-art\nimplementation of SLG.\n", "versions": [{"version": "v1", "created": "Wed, 23 May 2007 20:52:42 GMT"}], "update_date": "2007-05-25", "authors_parsed": [["Zhou", "Neng-Fa", ""], ["Sato", "Taisuke", ""], ["Shen", "Yi-Dong", ""]]}]