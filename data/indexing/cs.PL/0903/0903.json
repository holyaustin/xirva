[{"id": "0903.0889", "submitter": "David Doty", "authors": "David Doty, Matthew J. Patitz", "title": "A Domain-Specific Language for Programming in the Tile Assembly Model", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.SE cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We introduce a domain-specific language (DSL) for creating sets of tile types\nfor simulations of the abstract Tile Assembly Model. The language defines\nobjects known as tile templates, which represent related groups of tiles, and a\nsmall number of basic operations on tile templates that help to eliminate the\nerror-prone drudgery of enumerating such tile types manually or with low-level\nconstructs of general-purpose programming languages. The language is\nimplemented as a class library in Python (a so-called internal DSL), but is\npresented independently of Python or object-oriented programming, with emphasis\non supporting the creation of visual editing tools for programmatically\ncreating large sets of complex tile types without needing to write a program.\n", "versions": [{"version": "v1", "created": "Thu, 5 Mar 2009 01:19:35 GMT"}], "update_date": "2009-03-06", "authors_parsed": [["Doty", "David", ""], ["Patitz", "Matthew J.", ""]]}, {"id": "0903.1352", "submitter": "Alban Ponse", "authors": "Jan A. Bergstra and Alban Ponse", "title": "An Instruction Sequence Semigroup with Involutive Anti-Automorphisms", "comments": "36 pages, 1 table", "journal-ref": "Scientific Annals of Computer Science, 19:57-92, 2009", "doi": null, "report-no": null, "categories": "cs.PL math.RA", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We introduce an algebra of instruction sequences by presenting a semigroup C\nin which programs can be represented without directional bias: in terms of the\nnext instruction to be executed, C has both forward and backward instructions\nand a C-expression can be interpreted starting from any instruction. We provide\nequations for thread extraction, i.e., C's program semantics. Then we consider\nthread extraction compatible (anti-)homomorphisms and (anti-)automorphisms.\nFinally we discuss some expressiveness results.\n", "versions": [{"version": "v1", "created": "Sat, 7 Mar 2009 17:14:44 GMT"}, {"version": "v2", "created": "Sat, 7 Nov 2009 13:19:57 GMT"}], "update_date": "2009-11-07", "authors_parsed": [["Bergstra", "Jan A.", ""], ["Ponse", "Alban", ""]]}, {"id": "0903.1598", "submitter": "Damiano Zanardini", "authors": "Puri Arenas and Damiano Zanardini", "title": "18th Workshop on Logic-based methods in Programming Environments (WLPE\n  2008)", "comments": null, "journal-ref": null, "doi": null, "report-no": "WLPE/2008", "categories": "cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This volume contains the papers presented at WLPE 2008: the 18th Workshop on\nLogic-based Methods in Programming Environments held on 12th December, 2008 in\nUdine, Italy. It was held as a satellite workshop of ICLP 2008, the 24th\nInternational Conference on Logic Programming.\n", "versions": [{"version": "v1", "created": "Mon, 9 Mar 2009 17:26:36 GMT"}, {"version": "v2", "created": "Thu, 12 Mar 2009 14:19:27 GMT"}, {"version": "v3", "created": "Fri, 13 Mar 2009 10:49:16 GMT"}, {"version": "v4", "created": "Mon, 16 Mar 2009 10:39:11 GMT"}, {"version": "v5", "created": "Wed, 18 Mar 2009 14:41:22 GMT"}, {"version": "v6", "created": "Thu, 26 Mar 2009 17:11:37 GMT"}], "update_date": "2009-10-02", "authors_parsed": [["Arenas", "Puri", ""], ["Zanardini", "Damiano", ""]]}, {"id": "0903.2168", "submitter": "Damiano Zanardini", "authors": "Markus Triska and Ulrich Neumerkel and Jan Wielemaker", "title": "Better Termination for Prolog with Constraints", "comments": "Paper presented at the 18th Workshop on Logic-based Methods in\n  Programming Environments (WLPE2008) (Report-No: WLPE/2008). Paper submitted\n  by a co-editor of the Workshop proceedings", "journal-ref": null, "doi": null, "report-no": "WLPE/2008/02", "categories": "cs.PL cs.SE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Termination properties of actual Prolog systems with constraints are fragile\nand difficult to analyse. The lack of the occurs-check, moded and overloaded\narithmetical evaluation via is/2 and the occasional nontermination of finite\ndomain constraints are all sources for invalidating termination results\nobtained by current termination analysers that rely on idealized assumptions.\nIn this paper, we present solutions to address these problems on the level of\nthe underlying Prolog system. Improved unification modes meet the requirements\nof norm based analysers by offering dynamic occurs-check detection. A\ngeneralized finite domain solver overcomes the shortcomings of conventional\narithmetic without significant runtime overhead. The solver offers unbounded\ndomains, yet propagation always terminates. Our work improves Prolog's\ntermination and makes Prolog a more reliable target for termination and type\nanalysis. It is part of SWI-Prolog since version 5.6.50.\n", "versions": [{"version": "v1", "created": "Thu, 12 Mar 2009 15:23:38 GMT"}], "update_date": "2009-03-13", "authors_parsed": [["Triska", "Markus", ""], ["Neumerkel", "Ulrich", ""], ["Wielemaker", "Jan", ""]]}, {"id": "0903.2188", "submitter": "Damiano Zanardini", "authors": "Victor Pablos Ceruelo and Susana Munoz-Hernandez and Hannes Strass", "title": "Rfuzzy framework", "comments": "Paper presented at the 18th Workshop on Logic-based Methods in\n  Programming Environments (WLPE2008) (Report-No: WLPE/2008). Paper submitted\n  by a co-editor of the Workshop proceedings", "journal-ref": null, "doi": null, "report-no": "WLPE/2008/01", "categories": "cs.PL cs.LO", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Fuzzy reasoning is a very productive research field that during the last\nyears has provided a number of theoretical approaches and practical\nimplementation prototypes. Nevertheless, the classical implementations, like\nFril, are not adapted to the latest formal approaches, like multi-adjoint logic\nsemantics. Some promising implementations, like Fuzzy Prolog, are so general\nthat the regular user/programmer does not feel comfortable because either\nrepresentation of fuzzy concepts is complex or the results difficult to\ninterpret. In this paper we present a modern framework, Rfuzzy, that is\nmodelling multi-adjoint logic. It provides some extensions as default values\n(to represent missing information, even partial default values) and typed\nvariables. Rfuzzy represents the truth value of predicates through facts, rules\nand functions. Rfuzzy answers queries with direct results (instead of\nconstraints) and it is easy to use for any person that wants to represent a\nproblem using fuzzy reasoning in a simple way (by using the classical\nrepresentation with real numbers).\n", "versions": [{"version": "v1", "created": "Thu, 12 Mar 2009 15:20:19 GMT"}], "update_date": "2009-03-13", "authors_parsed": [["Ceruelo", "Victor Pablos", ""], ["Munoz-Hernandez", "Susana", ""], ["Strass", "Hannes", ""]]}, {"id": "0903.2199", "submitter": "Damiano Zanardini", "authors": "Miguel Gomez-Zamalloa, Elvira Albert, German Puebla", "title": "On the Generation of Test Data for Prolog by Partial Evaluation", "comments": "Paper presented at the 18th Workshop on Logic-based Methods in\n  Programming Environments (WLPE2008) (Report-No: WLPE/2008). Paper submitted\n  by a co-editor of the Workshop proceedings", "journal-ref": null, "doi": null, "report-no": "WLPE/2008/06", "categories": "cs.PL cs.SE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In recent work, we have proposed an approach to Test Data Generation (TDG) of\nimperative bytecode by partial evaluation (PE) of CLP which consists in two\nphases: (1) the bytecode program is first transformed into an equivalent CLP\nprogram by means of interpretive compilation by PE, (2) a second PE is\nperformed in order to supervise the generation of test-cases by execution of\nthe CLP decompiled program. The main advantages of TDG by PE include\nflexibility to handle new coverage criteria, the possibility to obtain\ntest-case generators and its simplicity to be implemented. The approach in\nprinciple can be directly applied for TDG of any imperative language. However,\nwhen one tries to apply it to a declarative language like Prolog, we have found\nas a main difficulty the generation of test-cases which cover the more complex\ncontrol flow of Prolog. Essentially, the problem is that an intrinsic feature\nof PE is that it only computes non-failing derivations while in TDG for Prolog\nit is essential to generate test-cases associated to failing computations.\nBasically, we propose to transform the original Prolog program into an\nequivalent Prolog program with explicit failure by partially evaluating a\nProlog interpreter which captures failing derivations w.r.t. the input program.\nAnother issue that we discuss in the paper is that, while in the case of\nbytecode the underlying constraint domain only manipulates integers, in Prolog\nit should properly handle the symbolic data manipulated by the program. The\nresulting scheme is of interest for bringing the advantages which are inherent\nin TDG by PE to the field of logic programming.\n", "versions": [{"version": "v1", "created": "Thu, 12 Mar 2009 15:51:25 GMT"}], "update_date": "2009-03-13", "authors_parsed": [["Gomez-Zamalloa", "Miguel", ""], ["Albert", "Elvira", ""], ["Puebla", "German", ""]]}, {"id": "0903.2202", "submitter": "Damiano Zanardini", "authors": "Michael Leuschel and Salvador Tamarit and German Vidal", "title": "Improving Size-Change Analysis in Offline Partial Evaluation", "comments": "Paper presented at the 18th Workshop on Logic-based Methods in\n  Programming Environments (WLPE2008) (Report-No: WLPE/2008). Paper submitted\n  by a co-editor of the Workshop proceedings", "journal-ref": null, "doi": null, "report-no": "WLPE/2008/07", "categories": "cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Some recent approaches for scalable offline partial evaluation of logic\nprograms include a size-change analysis for ensuring both so called local and\nglobal termination. In this work|inspired by experimental evaluation|we\nintroduce several improvements that may increase the accuracy of the analysis\nand, thus, the quality of the associated specialized programs. We aim to\nachieve this while maintaining the same complexity and scalability of the\nrecent works.\n", "versions": [{"version": "v1", "created": "Thu, 12 Mar 2009 15:54:13 GMT"}], "update_date": "2009-03-13", "authors_parsed": [["Leuschel", "Michael", ""], ["Tamarit", "Salvador", ""], ["Vidal", "German", ""]]}, {"id": "0903.2205", "submitter": "Damiano Zanardini", "authors": "Francisco Javier Lopez-Fraguas and Juan Rodriguez-Hortala and Jaime\n  Sanchez-Hernandez", "title": "A Lightweight Combination of Semantics for Non-deterministic Functions", "comments": "Paper presented at the 18th Workshop on Logic-based Methods in\n  Programming Environments (WLPE2008) (Report-No: WLPE/2008). Paper submitted\n  by a co-editor of the Workshop proceedings", "journal-ref": null, "doi": null, "report-no": "WLPE/2008/08", "categories": "cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The use of non-deterministic functions is a distinctive feature of modern\nfunctional logic languages. The semantics commonly adopted is call-time choice,\na notion that at the operational level is related to the sharing mechanism of\nlazy evaluation in functional languages. However, there are situations where\nrun-time choice, closer to ordinary rewriting, is more appropriate. In this\npaper we propose an extension of existing call-time choice based languages, to\nprovide support for run-time choice in localized parts of a program. The\nextension is remarkably simple at three relevant levels: syntax, formal\noperational calculi and implementation, which is based on the system Toy.\n", "versions": [{"version": "v1", "created": "Thu, 12 Mar 2009 16:01:49 GMT"}], "update_date": "2009-03-13", "authors_parsed": [["Lopez-Fraguas", "Francisco Javier", ""], ["Rodriguez-Hortala", "Juan", ""], ["Sanchez-Hernandez", "Jaime", ""]]}, {"id": "0903.2207", "submitter": "Damiano Zanardini", "authors": "Yoshihiro Adachi", "title": "Prolog Visualization System Using Logichart Diagrams", "comments": "Paper presented at the 18th Workshop on Logic-based Methods in\n  Programming Environments (WLPE2008, arXiv:0903.1598). Paper submitted by a\n  co-editor of the Workshop proceedings", "journal-ref": null, "doi": null, "report-no": "WLPE/2008/03", "categories": "cs.PL cs.HC cs.SE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We have developed a Prolog visualization system that is intended to support\nProlog programming education. The system uses Logichart diagrams to visualize\nProlog programs. The Logichart diagram is designed to visualize the Prolog\nexecution flow intelligibly and to enable users to easily correlate the Prolog\nclauses with its parts. The system has the following functions. (1) It visually\ntraces Prolog execution (goal calling, success, and failure) on the Logichart\ndiagram. (2) Dynamic change in a Prolog program by calling extra-logical\npredicates, such as `assertz' and `retract', is visualized in real time. (3)\nVariable substitution processes are displayed in a text widget in real time.\n", "versions": [{"version": "v1", "created": "Thu, 12 Mar 2009 16:15:08 GMT"}], "update_date": "2009-03-25", "authors_parsed": [["Adachi", "Yoshihiro", ""]]}, {"id": "0903.2251", "submitter": "Damiano Zanardini", "authors": "Adrian Prantl and Jens Knoop and Markus Schordan and Markus Triska", "title": "Constraint solving for high-level WCET analysis", "comments": "Paper presented at the 18th Workshop on Logic-based Methods in\n  Programming Environments (WLPE2008) (Report-No: WLPE/2008). Paper submitted\n  by a co-editor of the Workshop proceedings", "journal-ref": null, "doi": null, "report-no": "WLPE/2008/05", "categories": "cs.PL cs.LO", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The safety of our day-to-day life depends crucially on the correct\nfunctioning of embedded software systems which control the functioning of more\nand more technical devices. Many of these software systems are time-critical.\nHence, computations performed need not only to be correct, but must also be\nissued in a timely fashion. Worst case execution time (WCET) analysis is\nconcerned with computing tight upper bounds for the execution time of a system\nin order to provide formal guarantees for the proper timing behaviour of a\nsystem. Central for this is to compute safe and tight bounds for loops and\nrecursion depths. In this paper, we highlight the TuBound approach to this\nchallenge at whose heart is a constraint logic based approach for loop\nanalysis.\n", "versions": [{"version": "v1", "created": "Thu, 12 Mar 2009 15:45:50 GMT"}], "update_date": "2009-03-13", "authors_parsed": [["Prantl", "Adrian", ""], ["Knoop", "Jens", ""], ["Schordan", "Markus", ""], ["Triska", "Markus", ""]]}, {"id": "0903.2252", "submitter": "Damiano Zanardini", "authors": "Jens Bendisposto and Ian Endrijautzki and Michael Leuschel and David\n  Schneider", "title": "A Semantics-Aware Editing Environment for Prolog in Eclipse", "comments": "Paper presented at the 18th Workshop on Logic-based Methods in\n  Programming Environments (WLPE2008) (Report-No: WLPE/2008). Paper submitted\n  by a co-editor of the Workshop proceedings", "journal-ref": null, "doi": null, "report-no": "WLPE/2008/04", "categories": "cs.PL cs.HC cs.SE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this paper we present a Prolog plugin for Eclipse based upon BE4, and\nproviding many features such as semantic-aware syntax highlighting, outline\nview, error marking, content assist, hover information, documentation\ngeneration, and quick fixes. The plugin makes use of a Java parser for full\nProlog with an integrated Prolog engine, and can be extended with further\nsemantic analyses, e.g., based on abstract interpretation.\n", "versions": [{"version": "v1", "created": "Thu, 12 Mar 2009 15:42:24 GMT"}], "update_date": "2009-03-13", "authors_parsed": [["Bendisposto", "Jens", ""], ["Endrijautzki", "Ian", ""], ["Leuschel", "Michael", ""], ["Schneider", "David", ""]]}, {"id": "0903.2353", "submitter": "Damiano Zanardini", "authors": "Andy King", "title": "Relations, Constraints and Abstractions: Using the Tools of Logic\n  Programming in the Security Industry", "comments": "Paper presented as an invited talk at the 18th Workshop on\n  Logic-based Methods in Programming Environments (WLPE2008) (Report-No:\n  WLPE/2008). Paper submitted by a co-editor of the Workshop proceedings", "journal-ref": null, "doi": null, "report-no": "WLPE/2008/00", "categories": "cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Logic programming is sometimes described as relational programming: a\nparadigm in which the programmer specifies and composes n-ary relations using\nsystems of constraints. An advanced logic programming environment will provide\ntools that abstract these relations to transform, optimise, or even verify the\ncorrectness of a logic program. This talk will show that these concepts, namely\nrelations, constraints and abstractions, turn out to also be important in the\nreverse engineer process that underpins the discovery of bugs within the\nsecurity industry.\n", "versions": [{"version": "v1", "created": "Fri, 13 Mar 2009 10:46:39 GMT"}], "update_date": "2009-03-16", "authors_parsed": [["King", "Andy", ""]]}, {"id": "0903.2825", "submitter": "Susmit Jha", "authors": "Susmit Jha, Sanjit A. Seshia and Rhishikesh Limaye", "title": "On the Computational Complexity of Satisfiability Solving for String\n  Theories", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CC cs.LO cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Satisfiability solvers are increasingly playing a key role in software\nverification, with particularly effective use in the analysis of security\nvulnerabilities. String processing is a key part of many software applications,\nsuch as browsers and web servers. These applications are susceptible to attacks\nthrough malicious data received over network. Automated tools for analyzing the\nsecurity of such applications, thus need to reason about strings. For\nefficiency reasons, it is desirable to have a solver that treats strings as\nfirst-class types. In this paper, we present some theories of strings that are\nuseful in a software security context and analyze the computational complexity\nof the presented theories. We use this complexity analysis to motivate a\nbyte-blast approach which employs a Boolean encoding of the string constraints\nto a corresponding Boolean satisfiability problem.\n", "versions": [{"version": "v1", "created": "Mon, 16 Mar 2009 18:25:54 GMT"}], "update_date": "2009-03-17", "authors_parsed": [["Jha", "Susmit", ""], ["Seshia", "Sanjit A.", ""], ["Limaye", "Rhishikesh", ""]]}, {"id": "0903.3741", "submitter": "Alejandro Diaz-Caro", "authors": "Pablo Arrighi (ENS-Lyon, LIP and Universite de Grenoble, LIG),\n  Alejandro Diaz-Caro (Universite de Grenoble, LIG, and Universite Paris-Nord,\n  Laboratoire LIPN)", "title": "A System F accounting for scalars", "comments": null, "journal-ref": "Logical Methods in Computer Science, Volume 8, Issue 1 (February\n  27, 2012) lmcs:846", "doi": "10.2168/LMCS-8(1:11)2012", "report-no": null, "categories": "cs.LO cs.PL quant-ph", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The Algebraic lambda-calculus and the Linear-Algebraic lambda-calculus extend\nthe lambda-calculus with the possibility of making arbitrary linear\ncombinations of terms. In this paper we provide a fine-grained, System F-like\ntype system for the linear-algebraic lambda-calculus. We show that this\n\"scalar\" type system enjoys both the subject-reduction property and the\nstrong-normalisation property, our main technical results. The latter yields a\nsignificant simplification of the linear-algebraic lambda-calculus itself, by\nremoving the need for some restrictions in its reduction rules. But the more\nimportant, original feature of this scalar type system is that it keeps track\nof 'the amount of a type' that is present in each term. As an example of its\nuse, we shown that it can serve as a guarantee that the normal form of a term\nis barycentric, i.e that its scalars are summing to one.\n", "versions": [{"version": "v1", "created": "Sun, 22 Mar 2009 17:10:09 GMT"}, {"version": "v2", "created": "Fri, 31 Jul 2009 11:19:20 GMT"}, {"version": "v3", "created": "Fri, 9 Apr 2010 17:37:28 GMT"}, {"version": "v4", "created": "Thu, 18 Nov 2010 11:40:41 GMT"}, {"version": "v5", "created": "Sun, 24 Apr 2011 10:36:35 GMT"}, {"version": "v6", "created": "Wed, 1 Feb 2012 14:40:41 GMT"}, {"version": "v7", "created": "Thu, 23 Feb 2012 23:27:05 GMT"}, {"version": "v8", "created": "Tue, 28 Feb 2012 08:59:44 GMT"}], "update_date": "2015-07-01", "authors_parsed": [["Arrighi", "Pablo", "", "ENS-Lyon, LIP and Universite de Grenoble, LIG"], ["Diaz-Caro", "Alejandro", "", "Universite de Grenoble, LIG, and Universite Paris-Nord,\n  Laboratoire LIPN"]]}]