[{"id": "0706.0252", "submitter": "David Monniaux", "authors": "David Monniaux (LIENS)", "title": "Applying the Z-transform for the static analysis of floating-point\n  numerical filters", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL cs.NA", "license": null, "abstract": "  Digital linear filters are used in a variety of applications (sound\ntreatment, control/command, etc.), implemented in software, in hardware, or a\ncombination thereof. For safety-critical applications, it is necessary to bound\nall variables and outputs of all filters. We give a compositional, effective\nabstraction for digital linear filters expressed as block diagrams, yielding\nsound, precise bounds for fixed-point or floating-point implementations of the\nfilters.\n", "versions": [{"version": "v1", "created": "Sat, 2 Jun 2007 06:18:48 GMT"}], "update_date": "2007-06-05", "authors_parsed": [["Monniaux", "David", "", "LIENS"]]}, {"id": "0706.0523", "submitter": "Ranjit Jhala", "authors": "Ranjit Jhala, Kenneth L. McMillan", "title": "Interpolant-Based Transition Relation Approximation", "comments": "Conference Version at CAV 2005. 17 Pages, 9 Figures", "journal-ref": "Logical Methods in Computer Science, Volume 3, Issue 4 (November\n  1, 2007) lmcs:1152", "doi": "10.2168/LMCS-3(4:1)2007", "report-no": null, "categories": "cs.LO cs.PL cs.SE", "license": null, "abstract": "  In predicate abstraction, exact image computation is problematic, requiring\nin the worst case an exponential number of calls to a decision procedure. For\nthis reason, software model checkers typically use a weak approximation of the\nimage. This can result in a failure to prove a property, even given an adequate\nset of predicates. We present an interpolant-based method for strengthening the\nabstract transition relation in case of such failures. This approach guarantees\nconvergence given an adequate set of predicates, without requiring an exact\nimage computation. We show empirically that the method converges more rapidly\nthan an earlier method based on counterexample analysis.\n", "versions": [{"version": "v1", "created": "Mon, 4 Jun 2007 20:07:54 GMT"}, {"version": "v2", "created": "Thu, 1 Nov 2007 17:00:23 GMT"}], "update_date": "2015-07-01", "authors_parsed": [["Jhala", "Ranjit", ""], ["McMillan", "Kenneth L.", ""]]}, {"id": "0706.2073", "submitter": "Samuel Thibault", "authors": "Samuel Thibault (INRIA Futurs), Fran\\c{c}ois Broquedis (INRIA Futurs),\n  Brice Goglin (INRIA Futurs), Raymond Namyst (INRIA Futurs), Pierre-Andr\\'e\n  Wacrenier (INRIA Futurs)", "title": "An Efficient OpenMP Runtime System for Hierarchical Arch", "comments": null, "journal-ref": "Dans International Workshop on OpenMP (IWOMP) (2007)", "doi": null, "report-no": null, "categories": "cs.PL", "license": null, "abstract": "  Exploiting the full computational power of always deeper hierarchical\nmultiprocessor machines requires a very careful distribution of threads and\ndata among the underlying non-uniform architecture. The emergence of multi-core\nchips and NUMA machines makes it important to minimize the number of remote\nmemory accesses, to favor cache affinities, and to guarantee fast completion of\nsynchronization steps. By using the BubbleSched platform as a threading backend\nfor the GOMP OpenMP compiler, we are able to easily transpose affinities of\nthread teams into scheduling hints using abstractions called bubbles. We then\npropose a scheduling strategy suited to nested OpenMP parallelism. The\nresulting preliminary performance evaluations show an important improvement of\nthe speedup on a typical NAS OpenMP benchmark application.\n", "versions": [{"version": "v1", "created": "Thu, 14 Jun 2007 09:43:23 GMT"}], "update_date": "2007-06-15", "authors_parsed": [["Thibault", "Samuel", "", "INRIA Futurs"], ["Broquedis", "Fran\u00e7ois", "", "INRIA Futurs"], ["Goglin", "Brice", "", "INRIA Futurs"], ["Namyst", "Raymond", "", "INRIA Futurs"], ["Wacrenier", "Pierre-Andr\u00e9", "", "INRIA Futurs"]]}, {"id": "0706.2293", "submitter": "Romain Pechoux", "authors": "Jean-Yves Marion and Romain Pechoux", "title": "Resource control of object-oriented programs", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL cs.LO", "license": null, "abstract": "  A sup-interpretation is a tool which provides an upper bound on the size of a\nvalue computed by some symbol of a program. Sup-interpretations have shown\ntheir interest to deal with the complexity of first order functional programs.\nFor instance, they allow to characterize all the functions bitwise computable\nin Alogtime. This paper is an attempt to adapt the framework of\nsup-interpretations to a fragment of oriented-object programs, including\ndistinct encodings of numbers through the use of constructor symbols, loop and\nwhile constructs and non recursive methods with side effects. We give a\ncriterion, called brotherly criterion, which ensures that each brotherly\nprogram computes objects whose size is polynomially bounded by the inputs\nsizes.\n", "versions": [{"version": "v1", "created": "Fri, 15 Jun 2007 13:39:12 GMT"}], "update_date": "2007-06-18", "authors_parsed": [["Marion", "Jean-Yves", ""], ["Pechoux", "Romain", ""]]}, {"id": "0706.3159", "submitter": "Pierre Deransart", "authors": "Pierre Deransart (INRIA Rocquencourt), Mireille Ducass\\'e (IRISA),\n  G\\'erard Ferrand (LIFO)", "title": "Une s\\'emantique observationnelle du mod\\`ele des bo\\^ites pour la\n  r\\'esolution de programmes logiques (version \\'etendue)", "comments": "Project of research report used to produce the paper presented at\n  JFPC 2007", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL cs.SE", "license": null, "abstract": "  This report specifies an observational semantics and gives an original\npresentation of the Byrd's box model. The approach accounts for the semantics\nof Prolog tracers independently of a particular implementation. Traces are, in\ngeneral, considered as rather obscure and difficult to use. The proposed formal\npresentation of a trace constitutes a simple and pedagogical approach for\nteaching Prolog or for implementing Prolog tracers. It constitutes a form of\ndeclarative specification for the tracers. Our approach highlights qualities of\nthe box model which made its success, but also its drawbacks and limits. As a\nmatter of fact, the presented semantics is only one example to illustrate\ngeneral problems relating to tracers and observing processes. Observing\nprocesses know, from observed processes, only their traces. The issue is then\nto be able to reconstitute by the sole analysis of the trace the main part of\nthe observed process, and if possible, without any loss of information.\n", "versions": [{"version": "v1", "created": "Thu, 21 Jun 2007 14:20:30 GMT"}, {"version": "v2", "created": "Mon, 25 Jun 2007 14:03:05 GMT"}], "update_date": "2007-06-25", "authors_parsed": [["Deransart", "Pierre", "", "INRIA Rocquencourt"], ["Ducass\u00e9", "Mireille", "", "IRISA"], ["Ferrand", "G\u00e9rard", "", "LIFO"]]}]