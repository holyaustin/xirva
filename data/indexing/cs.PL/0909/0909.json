[{"id": "0909.0764", "submitter": "Serguei Mokhov", "authors": "Aihua Wu, Joey Paquet, and Serguei A. Mokhov", "title": "Object-Oriented Intensional Programming: Intensional Classes Using Java\n  and Lucid", "comments": "27 pages, 8 listings, 2 tables, 5 figures", "journal-ref": null, "doi": "10.1109/SERA.2010.29", "report-no": null, "categories": "cs.PL cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This article introduces Object-Oriented Intensional Programming (OO-IP), a\nnew hybrid language between Object-Oriented and Intensional Programming\nLanguages in the sense of the latest evolutions of Lucid. This new hybrid\nlanguage combines the essential characteristics of Lucid and Java, and\nintroduces the notion of object streams which makes it is possible that each\nelement in a Lucid stream to be an object with embedded intensional properties.\nInterestingly, this hybrid language also brings to Java objects the power to\nexplicitly express and manipulate the notion of context, creating the novel\nconcept of intensional object, i.e. objects whose evaluation is\ncontext-dependent, which are here demonstrated to be translatable into standard\nobjects. By this new approach, we extend the use and meaning of the notion of\nintensional objects and enrich the meaning of object streams in Lucid and\nsemantics of intensional objects in Java.\n", "versions": [{"version": "v1", "created": "Thu, 3 Sep 2009 21:13:44 GMT"}], "update_date": "2010-07-09", "authors_parsed": [["Wu", "Aihua", ""], ["Paquet", "Joey", ""], ["Mokhov", "Serguei A.", ""]]}, {"id": "0909.1187", "submitter": "Marco Aldinucci", "authors": "Marco Aldinucci, Massimo Torquati, Massimiliano Meneghin", "title": "FastFlow: Efficient Parallel Streaming Applications on Multi-core", "comments": "23 pages + cover", "journal-ref": null, "doi": null, "report-no": "TR-09-12", "categories": "cs.DC cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Shared memory multiprocessors come back to popularity thanks to rapid\nspreading of commodity multi-core architectures. As ever, shared memory\nprograms are fairly easy to write and quite hard to optimise; providing\nmulti-core programmers with optimising tools and programming frameworks is a\nnowadays challenge. Few efforts have been done to support effective streaming\napplications on these architectures. In this paper we introduce FastFlow, a\nlow-level programming framework based on lock-free queues explicitly designed\nto support high-level languages for streaming applications. We compare FastFlow\nwith state-of-the-art programming frameworks such as Cilk, OpenMP, and Intel\nTBB. We experimentally demonstrate that FastFlow is always more efficient than\nall of them in a set of micro-benchmarks and on a real world application; the\nspeedup edge of FastFlow over other solutions might be bold for fine grain\ntasks, as an example +35% on OpenMP, +226% on Cilk, +96% on TBB for the\nalignment of protein P01111 against UniProt DB using Smith-Waterman algorithm.\n", "versions": [{"version": "v1", "created": "Mon, 7 Sep 2009 09:33:57 GMT"}], "update_date": "2009-09-10", "authors_parsed": [["Aldinucci", "Marco", ""], ["Torquati", "Massimo", ""], ["Meneghin", "Massimiliano", ""]]}, {"id": "0909.1977", "submitter": "Fernando Alegre", "authors": "Fernando Alegre, Eric Feron and Santosh Pande", "title": "Using Ellipsoidal Domains to Analyze Control Systems Software", "comments": "17 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL cs.SE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We propose a methodology for the automatic verification of safety properties\nof controllers based on dynamical systems, such as those typically used in\navionics. In particular, our focus is on proving stability properties of\nsoftware implementing linear and some non-linear controllers. We develop an\nabstract interpretation framework that follows closely the Lyapunov methods\nused in proofs at the model level and describe the corresponding abstract\ndomains, which for linear systems consist of ellipsoidal constraints. These\nellipsoidal domains provide abstractions for the values of state variables and\nmust be combined with other domains that model the remaining variables in a\nprogram. Thus, the problem of automatically assigning the right type of\nabstract domain to each variable arises. We provide an algorithm that solves\nthis classification problem in many practical cases and suggest how it could be\ngeneralized to more complicated cases. We then find a fixpoint by solving a\nmatrix equation, which in the linear case is just the discrete Lyapunov\nequation. Contrary to most cases in software analysis, this fixpoint cannot be\nreached by the usual iterative method of propagating constraints until\nsaturation and so numerical methods become essential. Finally, we illustrate\nour methodology with several examples.\n", "versions": [{"version": "v1", "created": "Thu, 10 Sep 2009 15:42:32 GMT"}], "update_date": "2009-09-11", "authors_parsed": [["Alegre", "Fernando", ""], ["Feron", "Eric", ""], ["Pande", "Santosh", ""]]}, {"id": "0909.2058", "submitter": "Sihem Amer-Yahia", "authors": "Sihem Amer-Yahia (Yahoo! Research), Laks Lakshmanan (UBC), Cong Yu\n  (Yahoo! Research)", "title": "SocialScope: Enabling Information Discovery on Social Content Sites", "comments": "CIDR 2009", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DB cs.HC cs.IR cs.PL", "license": "http://creativecommons.org/licenses/by/3.0/", "abstract": "  Recently, many content sites have started encouraging their users to engage\nin social activities such as adding buddies on Yahoo! Travel and sharing\narticles with their friends on New York Times. This has led to the emergence of\n{\\em social content sites}, which is being facilitated by initiatives like\nOpenID (http://www.openid.net/) and OpenSocial (http://www.opensocial.org/).\nThese community standards enable the open access to users' social profiles and\nconnections by individual content sites and are bringing content-oriented sites\nand social networking sites ever closer. The integration of content and social\ninformation raises new challenges for {\\em information management and\ndiscovery} over such sites. We propose a logical architecture, named\n\\kw{SocialScope}, consisting of three layers, for tackling the challenges. The\n{\\em content management} layer is responsible for integrating, maintaining and\nphysically accessing the content and social data. The {\\em information\ndiscovery} layer takes care of analyzing content to derive interesting new\ninformation, and interpreting and processing the user's information need to\nidentify relevant information. Finally, the {\\em information presentation}\nlayer explores the discovered information and helps users better understand it\nin a principled way. We describe the challenges in each layer and propose\nsolutions for some of those challenges. In particular, we propose a uniform\nalgebraic framework, which can be leveraged to uniformly and flexibly specify\nmany of the information discovery and analysis tasks and provide the foundation\nfor the optimization of those tasks.\n", "versions": [{"version": "v1", "created": "Thu, 10 Sep 2009 22:08:17 GMT"}], "update_date": "2016-09-08", "authors_parsed": [["Amer-Yahia", "Sihem", "", "Yahoo! Research"], ["Lakshmanan", "Laks", "", "UBC"], ["Yu", "Cong", "", "Yahoo! Research"]]}, {"id": "0909.2089", "submitter": "Kees Middelburg", "authors": "J. A. Bergstra, C. A. Middelburg", "title": "Indirect jumps improve instruction sequence performance", "comments": "10 pages, definition of maximal internal delay and theorem 1 are\n  stated more precise; presentation improved", "journal-ref": "Scientific Annals of Computer Science, 22(2):253--265, 2012", "doi": "10.7561/SACS.2012.2.253", "report-no": "PRG0910", "categories": "cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Instruction sequences with direct and indirect jump instructions are as\nexpressive as instruction sequences with direct jump instructions only. We show\nthat, in the case where the number of instructions is not bounded, we are faced\nwith increases of the maximal internal delays of instruction sequences on\nexecution that are not bounded by a linear function if we strive for acceptable\nincreases of the lengths of instruction sequences on elimination of indirect\njump instructions.\n", "versions": [{"version": "v1", "created": "Fri, 11 Sep 2009 05:51:09 GMT"}, {"version": "v2", "created": "Thu, 29 Dec 2011 13:19:53 GMT"}, {"version": "v3", "created": "Fri, 17 Aug 2012 15:06:20 GMT"}], "update_date": "2012-11-20", "authors_parsed": [["Bergstra", "J. A.", ""], ["Middelburg", "C. A.", ""]]}, {"id": "0909.2839", "submitter": "Alban Ponse", "authors": "Jan A. Bergstra, Alban Ponse", "title": "A progression ring for interfaces of instruction sequences, threads, and\n  services", "comments": "12 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We define focus-method interfaces and some connections between such\ninterfaces and instruction sequences, giving rise to instruction sequence\ncomponents. We provide a flexible and practical notation for interfaces using\nan abstract datatype specification comparable to that of basic process algebra\nwith deadlock. The structures thus defined are called progression rings. We\nalso define thread and service components. Two types of composition of\ninstruction sequences or threads and services (called `use' and `apply') are\nlifted to the level of components.\n", "versions": [{"version": "v1", "created": "Tue, 15 Sep 2009 16:59:57 GMT"}], "update_date": "2009-09-16", "authors_parsed": [["Bergstra", "Jan A.", ""], ["Ponse", "Alban", ""]]}, {"id": "0909.4013", "submitter": "David Monniaux", "authors": "David Monniaux (VERIMAG - IMAG)", "title": "Automatic modular abstractions for template numerical constraints", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.PL cs.LO", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We propose a method for automatically generating abstract transformers for\nstatic analysis by abstract interpretation. The method focuses on linear\nconstraints on programs operating on rational, real or floating-point variables\nand containing linear assignments and tests. In addition to loop-free code, the\nsame method also applies for obtaining least fixed points as functions of the\nprecondition, which permits the analysis of loops and recursive functions. Our\nalgorithms are based on new quantifier elimination and symbolic manipulation\ntechniques. Given the specification of an abstract domain, and a program block,\nour method automatically outputs an implementation of the corresponding\nabstract transformer. It is thus a form of program transformation. The\nmotivation of our work is data-flow synchronous programming languages, used for\nbuilding control-command embedded systems, but it also applies to imperative\nand functional programming.\n", "versions": [{"version": "v1", "created": "Tue, 22 Sep 2009 14:49:17 GMT"}, {"version": "v2", "created": "Mon, 31 May 2010 06:43:29 GMT"}], "update_date": "2010-07-28", "authors_parsed": [["Monniaux", "David", "", "VERIMAG - IMAG"]]}]