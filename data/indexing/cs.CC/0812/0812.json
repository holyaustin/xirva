[{"id": "0812.0283", "submitter": "Sven Kosub", "authors": "Christopher M. Homan and Sven Kosub", "title": "Dichotomy Results for Fixed Point Counting in Boolean Dynamical Systems", "comments": "16 pages, extended abstract presented at 10th Italian Conference on\n  Theoretical Computer Science (ICTCS'2007)", "journal-ref": null, "doi": null, "report-no": "revised version of TR No. TUM-I0706, Institut fuer Informatik, TU\n  Muenchen", "categories": "cs.CC cond-mat.dis-nn cs.DM nlin.AO nlin.CG", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present dichotomy theorems regarding the computational complexity of\ncounting fixed points in boolean (discrete) dynamical systems, i.e., finite\ndiscrete dynamical systems over the domain {0,1}. For a class F of boolean\nfunctions and a class G of graphs, an (F,G)-system is a boolean dynamical\nsystem with local transitions functions lying in F and graphs in G. We show\nthat, if local transition functions are given by lookup tables, then the\nfollowing complexity classification holds: Let F be a class of boolean\nfunctions closed under superposition and let G be a graph class closed under\ntaking minors. If F contains all min-functions, all max-functions, or all\nself-dual and monotone functions, and G contains all planar graphs, then it is\n#P-complete to compute the number of fixed points in an (F,G)-system; otherwise\nit is computable in polynomial time. We also prove a dichotomy theorem for the\ncase that local transition functions are given by formulas (over logical\nbases). This theorem has a significantly more complicated structure than the\ntheorem for lookup tables. A corresponding theorem for boolean circuits\ncoincides with the theorem for formulas.\n", "versions": [{"version": "v1", "created": "Mon, 1 Dec 2008 12:56:42 GMT"}], "update_date": "2008-12-02", "authors_parsed": [["Homan", "Christopher M.", ""], ["Kosub", "Sven", ""]]}, {"id": "0812.0852", "submitter": "Daowen Qiu", "authors": "Daowen Qiu, Sheng Yu", "title": "Hierarchy and equivalence of multi-letter quantum finite automata", "comments": "22 pages, 8 figures. The is a further revised version, and it has\n  been accepted for publication in Theoretical Computer Science", "journal-ref": "Theoretical Computer Science, 410 (30-32) (2009) 3006-3017.", "doi": null, "report-no": null, "categories": "cs.CC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Multi-letter {\\it quantum finite automata} (QFAs) were a new one-way QFA\nmodel proposed recently by Belovs, Rosmanis, and Smotrovs (LNCS, Vol. 4588,\nSpringer, Berlin, 2007, pp. 60-71), and they showed that multi-letter QFAs can\naccept with no error some regular languages ($(a+b)^{*}b$) that are\nunacceptable by the one-way QFAs. In this paper, we continue to study\nmulti-letter QFAs. We mainly focus on two issues: (1) we show that\n$(k+1)$-letter QFAs are computationally more powerful than $k$-letter QFAs,\nthat is, $(k+1)$-letter QFAs can accept some regular languages that are\nunacceptable by any $k$-letter QFA. A comparison with the one-way QFAs is made\nby some examples; (2) we prove that a $k_{1}$-letter QFA ${\\cal A}_1$ and\nanother $k_{2}$-letter QFA ${\\cal A}_2$ are equivalent if and only if they are\n$(n_{1}+n_{2})^{4}+k-1$-equivalent, and the time complexity of determining the\nequivalence of two multi-letter QFAs using this method is\n$O(n^{12}+k^{2}n^{4}+kn^{8})$, where $n_{1}$ and $n_{2}$ are the numbers of\nstates of ${\\cal A}_{1}$ and ${\\cal A}_{2}$, respectively, and\n$k=\\max(k_{1},k_{2})$. Some other issues are addressed for further\nconsideration.\n", "versions": [{"version": "v1", "created": "Thu, 4 Dec 2008 03:10:29 GMT"}, {"version": "v2", "created": "Fri, 19 Dec 2008 04:04:11 GMT"}, {"version": "v3", "created": "Tue, 10 Mar 2009 19:55:01 GMT"}], "update_date": "2010-03-10", "authors_parsed": [["Qiu", "Daowen", ""], ["Yu", "Sheng", ""]]}, {"id": "0812.0933", "submitter": "Adam Kalai", "authors": "Adam Tauman Kalai and Shang-Hua Teng", "title": "Decision trees are PAC-learnable from most product distributions: a\n  smoothed analysis", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.LG cs.CC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We consider the problem of PAC-learning decision trees, i.e., learning a\ndecision tree over the n-dimensional hypercube from independent random labeled\nexamples. Despite significant effort, no polynomial-time algorithm is known for\nlearning polynomial-sized decision trees (even trees of any super-constant\nsize), even when examples are assumed to be drawn from the uniform distribution\non {0,1}^n. We give an algorithm that learns arbitrary polynomial-sized\ndecision trees for {\\em most product distributions}. In particular, consider a\nrandom product distribution where the bias of each bit is chosen independently\nand uniformly from, say, [.49,.51]. Then with high probability over the\nparameters of the product distribution and the random examples drawn from it,\nthe algorithm will learn any tree. More generally, in the spirit of smoothed\nanalysis, we consider an arbitrary product distribution whose parameters are\nspecified only up to a [-c,c] accuracy (perturbation), for an arbitrarily small\npositive constant c.\n", "versions": [{"version": "v1", "created": "Thu, 4 Dec 2008 13:34:26 GMT"}], "update_date": "2008-12-05", "authors_parsed": [["Kalai", "Adam Tauman", ""], ["Teng", "Shang-Hua", ""]]}, {"id": "0812.1061", "submitter": "Daowen Qiu", "authors": "Daowen Qiu, Xiangfu Zou, Lvzhou Li, Paulo Mateus", "title": "Decidability of the Equivalence of Multi-Letter Quantum Finite Automata", "comments": "18 pages; this is a further revised version", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.FL cs.CC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Multi-letter {\\it quantum finite automata} (QFAs) were a quantum variant of\nclassical {\\it one-way multi-head finite automata} (J. Hromkovi\\v{c}, Acta\nInformatica 19 (1983) 377-384), and it has been shown that this new one-way\nQFAs (multi-letter QFAs) can accept with no error some regular languages\n$(a+b)^{*}b$ that are unacceptable by the previous one-way QFAs. In this paper,\nwe study the decidability of the equivalence of multi-letter QFAs, and the main\ntechnical contributions are as follows: (1) We show that any two automata, a\n$k_{1}$-letter QFA ${\\cal A}_1$ and a $k_{2}$-letter QFA ${\\cal A}_2$, over the\nsame input alphabet $\\Sigma$ are equivalent if and only if they are\n$(n^2m^{k-1}-m^{k-1}+k)$-equivalent, where $m=|\\Sigma|$ is the cardinality of\n$\\Sigma$, $k=\\max(k_{1},k_{2})$, and $n=n_{1}+n_{2}$, with $n_{1}$ and $n_{2}$\nbeing the numbers of states of ${\\cal A}_{1}$ and ${\\cal A}_{2}$, respectively.\nWhen $k=1$, we obtain the decidability of equivalence of measure-once QFAs in\nthe literature. It is worth mentioning that our technical method is essentially\ndifferent from that for the decidability of the case of single input alphabet\n(i.e., $m=1$). (2) However, if we determine the equivalence of multi-letter\nQFAs by checking all strings of length not more than $ n^2m^{k-1}-m^{k-1}+k$,\nthen the worst time complexity is exponential, i.e.,\n$O(n^6m^{n^2m^{k-1}-m^{k-1}+2k-1})$. Therefore, we design a polynomial-time\n$O(m^{2k-1}n^{8}+km^kn^{6})$ algorithm for determining the equivalence of any\ntwo multi-letter QFAs. Here, the time complexity is concerning the number of\nstates in the multi-letter QFAs, and $k$ is thought of as a constant.\n", "versions": [{"version": "v1", "created": "Fri, 5 Dec 2008 00:53:20 GMT"}, {"version": "v2", "created": "Wed, 14 Jan 2009 03:06:42 GMT"}, {"version": "v3", "created": "Tue, 10 Mar 2009 19:47:59 GMT"}, {"version": "v4", "created": "Wed, 23 Dec 2009 13:42:54 GMT"}, {"version": "v5", "created": "Tue, 19 Oct 2010 02:21:30 GMT"}, {"version": "v6", "created": "Sun, 24 Oct 2010 10:05:51 GMT"}], "update_date": "2010-11-01", "authors_parsed": [["Qiu", "Daowen", ""], ["Zou", "Xiangfu", ""], ["Li", "Lvzhou", ""], ["Mateus", "Paulo", ""]]}, {"id": "0812.1200", "submitter": "Saugata Basu", "authors": "Saugata Basu and Thierry Zell", "title": "Polynomial hierarchy, Betti numbers and a real analogue of Toda's\n  theorem", "comments": "Final version to appear in Found. Comput. Math", "journal-ref": "Found. Comput. Math, 10:429-454, 2010", "doi": null, "report-no": null, "categories": "cs.CC math.AT math.CO math.LO", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Toda proved in 1989 that the (discrete) polynomial time hierarchy,\n$\\mathbf{PH}$, is contained in the class $\\mathbf{P}^{#\\mathbf{P}}$, namely the\nclass of languages that can be decided by a Turing machine in polynomial time\ngiven access to an oracle with the power to compute a function in the counting\ncomplexity class $#\\mathbf{P}$. This result which illustrates the power of\ncounting is considered to be a seminal result in computational complexity\ntheory. An analogous result in the complexity theory over the reals (in the\nsense of Blum-Shub-Smale real machines) has been missing so far. In this paper\nwe formulate and prove a real analogue of Toda's theorem. Unlike Toda's proof\nin the discrete case, which relied on sophisticated combinatorial arguments,\nour proof is topological in nature. As a consequence of our techniques we are\nalso able to relate the computational hardness of two extremely well-studied\nproblems in algorithmic semi-algebraic geometry -- namely the problem of\ndeciding sentences in the first order theory of the reals with a constant\nnumber of quantifier alternations, and that of computing Betti numbers of\nsemi-algebraic sets. We obtain a polynomial time reduction of the compact\nversion of the first problem to the second. This latter result might be of\nindependent interest to researchers in algorithmic semi-algebraic geometry.\n", "versions": [{"version": "v1", "created": "Fri, 5 Dec 2008 19:09:27 GMT"}, {"version": "v2", "created": "Wed, 1 Apr 2009 18:23:05 GMT"}, {"version": "v3", "created": "Sat, 9 Jan 2010 20:45:52 GMT"}], "update_date": "2011-02-02", "authors_parsed": [["Basu", "Saugata", ""], ["Zell", "Thierry", ""]]}, {"id": "0812.1291", "submitter": "Anthony Widjaja To", "authors": "Anthony Widjaja To", "title": "Unary finite automata vs. arithmetic progressions", "comments": "Journal paper submitted", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CC cs.LO", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We point out a subtle error in the proof of Chrobak's theorem that every\nunary NFA can be represented as a union of arithmetic progressions that is at\nmost quadratically large. We propose a correction for this and show how\nMartinez's polynomial time algorithm, which realizes Chrobak's theorem, can be\nmade correct accordingly. We also show that Martinez's algorithm cannot be\nimproved to have logarithmic space, unless L = NL.\n", "versions": [{"version": "v1", "created": "Sat, 6 Dec 2008 14:18:05 GMT"}], "update_date": "2008-12-09", "authors_parsed": [["To", "Anthony Widjaja", ""]]}, {"id": "0812.1385", "submitter": "Javaid Aslam", "authors": "Javaid Aslam", "title": "An Extension of the Permutation Group Enumeration Technique (Collapse of\n  the Polynomial Hierarchy: $\\mathbf{NP = P}$)", "comments": "Revisions: Some re-organization-- created a new Section 5 and minor\n  revisions", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CC cs.DS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The distinguishing result of this paper is a $\\mathbf{P}$-time enumerable\npartition of all the potential perfect matchings in a bipartite graph. This\npartition is a set of equivalence classes induced by the missing edges in the\npotential perfect matchings.\n  We capture the behavior of these missing edges in a polynomially bounded\nrepresentation of the exponentially many perfect matchings by a graph theoretic\nstructure, called MinSet Sequence, where MinSet is a P-time enumerable\nstructure derived from a graph theoretic counterpart of a generating set of the\nsymmetric group. This leads to a polynomially bounded generating set of all the\nclasses, enabling the enumeration of perfect matchings in polynomial time. The\nsequential time complexity of this $\\mathbf{\\#P}$-complete problem is shown to\nbe $O(n^{45}\\log n)$.\n  And thus we prove a result even more surprising than $\\mathbf{NP = P}$, that\nis, $\\mathbf{\\#P}=\\mathbf{FP}$, where $\\mathbf{FP}$ is the class of functions,\n$f: \\{0, 1\\}^* \\rightarrow \\mathbb{N} $, computable in polynomial time on a\ndeterministic model of computation.\n", "versions": [{"version": "v1", "created": "Sun, 7 Dec 2008 19:47:28 GMT"}, {"version": "v10", "created": "Mon, 30 Mar 2009 19:41:25 GMT"}, {"version": "v11", "created": "Tue, 7 Apr 2009 18:35:11 GMT"}, {"version": "v12", "created": "Mon, 19 Jan 2015 20:21:59 GMT"}, {"version": "v13", "created": "Thu, 22 Jan 2015 20:45:26 GMT"}, {"version": "v14", "created": "Thu, 5 Feb 2015 20:56:47 GMT"}, {"version": "v15", "created": "Sun, 22 Feb 2015 20:36:42 GMT"}, {"version": "v16", "created": "Wed, 15 Jul 2015 18:44:43 GMT"}, {"version": "v17", "created": "Thu, 30 Jul 2015 19:48:56 GMT"}, {"version": "v18", "created": "Thu, 8 Oct 2015 19:04:26 GMT"}, {"version": "v19", "created": "Mon, 12 Oct 2015 19:57:44 GMT"}, {"version": "v2", "created": "Fri, 19 Dec 2008 19:30:19 GMT"}, {"version": "v20", "created": "Thu, 15 Oct 2015 19:48:04 GMT"}, {"version": "v21", "created": "Sun, 18 Oct 2015 19:20:04 GMT"}, {"version": "v22", "created": "Sat, 2 Jan 2016 01:31:54 GMT"}, {"version": "v23", "created": "Thu, 3 Mar 2016 20:53:32 GMT"}, {"version": "v24", "created": "Sat, 26 Aug 2017 06:08:03 GMT"}, {"version": "v25", "created": "Sun, 17 Sep 2017 22:52:14 GMT"}, {"version": "v26", "created": "Mon, 30 Oct 2017 08:01:46 GMT"}, {"version": "v3", "created": "Thu, 25 Dec 2008 20:43:33 GMT"}, {"version": "v4", "created": "Mon, 12 Jan 2009 17:03:53 GMT"}, {"version": "v5", "created": "Tue, 20 Jan 2009 21:05:32 GMT"}, {"version": "v6", "created": "Mon, 26 Jan 2009 20:56:54 GMT"}, {"version": "v7", "created": "Wed, 28 Jan 2009 20:50:44 GMT"}, {"version": "v8", "created": "Fri, 6 Feb 2009 20:43:25 GMT"}, {"version": "v9", "created": "Mon, 9 Mar 2009 18:58:19 GMT"}], "update_date": "2017-10-31", "authors_parsed": [["Aslam", "Javaid", ""]]}, {"id": "0812.1601", "submitter": "Shiva Kintali", "authors": "Shiva Kintali", "title": "Scarf is Ppad-Complete", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Scarf's lemma is one of the fundamental results in combinatorics, originally\nintroduced to study the core of an N-person game. Over the last four decades,\nthe usefulness of Scarf's lemma has been demonstrated in several important\ncombinatorial problems seeking \"stable\" solutions. However, the complexity of\nthe computational version of Scarf's lemma (SCARF) remained open. In this\npaper, we prove that SCARF is complete for the complexity class PPAD. This\nproves that SCARF is as hard as the computational versions of Brouwer's fixed\npoint theorem and Sperner's lemma. Hence, there is no polynomial-time algorithm\nfor SCARF unless PPAD \\subseteq P. We also show that fractional stable paths\nproblem and finding strong fractional kernels in digraphs are PPAD-hard.\n", "versions": [{"version": "v1", "created": "Tue, 9 Dec 2008 01:07:25 GMT"}, {"version": "v2", "created": "Fri, 12 Dec 2008 00:22:16 GMT"}, {"version": "v3", "created": "Mon, 9 Feb 2009 12:43:25 GMT"}, {"version": "v4", "created": "Sun, 3 May 2009 22:08:14 GMT"}], "update_date": "2009-05-04", "authors_parsed": [["Kintali", "Shiva", ""]]}, {"id": "0812.1915", "submitter": "Marcel Marquardt", "authors": "Wouter Gelade, Marcel Marquardt, Thomas Schwentick", "title": "Dynamic Complexity of Formal Languages", "comments": "Contains the material presenten at STACS 2009, extendes with proofs\n  and examples which were omitted due lack of space", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CC cs.DS cs.LO", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The paper investigates the power of the dynamic complexity classes DynFO,\nDynQF and DynPROP over string languages. The latter two classes contain\nproblems that can be maintained using quantifier-free first-order updates, with\nand without auxiliary functions, respectively. It is shown that the languages\nmaintainable in DynPROP exactly are the regular languages, even when allowing\narbitrary precomputation. This enables lower bounds for DynPROP and separates\nDynPROP from DynQF and DynFO. Further, it is shown that any context-free\nlanguage can be maintained in DynFO and a number of specific context-free\nlanguages, for example all Dyck-languages, are maintainable in DynQF.\nFurthermore, the dynamic complexity of regular tree languages is investigated\nand some results concerning arbitrary structures are obtained: there exist\nfirst-order definable properties which are not maintainable in DynPROP. On the\nother hand any existential first-order property can be maintained in DynQF when\nallowing precomputation.\n", "versions": [{"version": "v1", "created": "Wed, 10 Dec 2008 14:13:57 GMT"}], "update_date": "2008-12-11", "authors_parsed": [["Gelade", "Wouter", ""], ["Marquardt", "Marcel", ""], ["Schwentick", "Thomas", ""]]}, {"id": "0812.2137", "submitter": "Marek Karpinski", "authors": "Piotr Berman, Marek Karpinski, Alex Zelikovsky", "title": "A Factor 3/2 Approximation for Generalized Steiner Tree Problem with\n  Distances One and Two", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CC cs.DM cs.DS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We design a 3/2 approximation algorithm for the Generalized Steiner Tree\nproblem (GST) in metrics with distances 1 and 2. This is the first polynomial\ntime approximation algorithm for a wide class of non-geometric metric GST\ninstances with approximation factor below 2.\n", "versions": [{"version": "v1", "created": "Thu, 11 Dec 2008 12:50:54 GMT"}], "update_date": "2008-12-12", "authors_parsed": [["Berman", "Piotr", ""], ["Karpinski", "Marek", ""], ["Zelikovsky", "Alex", ""]]}, {"id": "0812.2298", "submitter": "Francois Le Gall", "authors": "Francois Le Gall", "title": "Efficient Isomorphism Testing for a Class of Group Extensions", "comments": "17 pages, accepted to the STACS 2009 conference", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DS cs.CC math.GR quant-ph", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The group isomorphism problem asks whether two given groups are isomorphic or\nnot. Whereas the case where both groups are abelian is well understood and can\nbe solved efficiently, very little is known about the complexity of isomorphism\ntesting for nonabelian groups. In this paper we study this problem for a class\nof groups corresponding to one of the simplest ways of constructing nonabelian\ngroups from abelian groups: the groups that are extensions of an abelian group\nA by a cyclic group of order m. We present an efficient algorithm solving the\ngroup isomorphism problem for all the groups of this class such that the order\nof A is coprime with m. More precisely, our algorithm runs in time almost\nlinear in the orders of the input groups and works in the general setting where\nthe groups are given as black-boxes.\n", "versions": [{"version": "v1", "created": "Fri, 12 Dec 2008 09:39:02 GMT"}], "update_date": "2010-01-07", "authors_parsed": [["Gall", "Francois Le", ""]]}, {"id": "0812.2636", "submitter": "Tobias Friedrich", "authors": "Karl Bringmann, Tobias Friedrich", "title": "Approximating the least hypervolume contributor: NP-hard in general, but\n  fast in practice", "comments": "22 pages, to appear in Theoretical Computer Science", "journal-ref": null, "doi": "10.1016/j.tcs.2010.09.026", "report-no": null, "categories": "cs.DS cs.CC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The hypervolume indicator is an increasingly popular set measure to compare\nthe quality of two Pareto sets. The basic ingredient of most hypervolume\nindicator based optimization algorithms is the calculation of the hypervolume\ncontribution of single solutions regarding a Pareto set. We show that exact\ncalculation of the hypervolume contribution is #P-hard while its approximation\nis NP-hard. The same holds for the calculation of the minimal contribution. We\nalso prove that it is NP-hard to decide whether a solution has the least\nhypervolume contribution. Even deciding whether the contribution of a solution\nis at most $(1+\\eps)$ times the minimal contribution is NP-hard. This implies\nthat it is neither possible to efficiently find the least contributing solution\n(unless $P = NP$) nor to approximate it (unless $NP = BPP$).\n  Nevertheless, in the second part of the paper we present a fast approximation\nalgorithm for this problem. We prove that for arbitrarily given $\\eps,\\delta>0$\nit calculates a solution with contribution at most $(1+\\eps)$ times the minimal\ncontribution with probability at least $(1-\\delta)$. Though it cannot run in\npolynomial time for all instances, it performs extremely fast on various\nbenchmark datasets. The algorithm solves very large problem instances which are\nintractable for exact algorithms (e.g., 10000 solutions in 100 dimensions)\nwithin a few seconds.\n", "versions": [{"version": "v1", "created": "Sun, 14 Dec 2008 13:57:10 GMT"}, {"version": "v2", "created": "Fri, 24 Sep 2010 20:43:10 GMT"}], "update_date": "2015-03-13", "authors_parsed": [["Bringmann", "Karl", ""], ["Friedrich", "Tobias", ""]]}, {"id": "0812.3214", "submitter": "Malay Dutta", "authors": "Malay Dutta (Tezpur University India)", "title": "Two conjectures such that the proof of any one of them will lead to the\n  proof that P = NP", "comments": "Some minor corrections", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this paper we define a construct called a time-graph. A complete\ntime-graph of order n is the cartesian product of a complete graph with n\nvertices and a linear graph with n vertices. A time-graph of order n is given\nby a subset of the set of edges E(n) of such a graph. The notion of a\nhamiltonian time-graph is defined in a natural way and we define the\nHamiltonian time-graph problem (HAMTG) as : Given a time-graph is it\nhamiltonian ? We show that the Hamiltonian path problem (HAMP) can be\ntransformed to HAMTG in polynomial time. We then define certain vector spaces\nof functions from E(n) and E(n)xE(n) to B = {0,1}, the field of two elements\nand derive certain properties of these spaces. We give two conjectures about\nthese spaces and prove that if any one of these conjectures is true, we get a\npolynomial time algorithm for the Hamiltonian path problem. Since the\nHamiltonian path problem is NP-complete we obtain the proof of P = NP provided\nany one of the two conjectures is true.\n", "versions": [{"version": "v1", "created": "Wed, 17 Dec 2008 07:03:53 GMT"}, {"version": "v2", "created": "Wed, 31 Dec 2008 03:53:16 GMT"}], "update_date": "2008-12-31", "authors_parsed": [["Dutta", "Malay", "", "Tezpur University India"]]}, {"id": "0812.3593", "submitter": "Sergio Caracciolo", "authors": "Sergio Caracciolo, Gregor Masbaum, Alan D. Sokal, Andrea Sportiello", "title": "A randomized polynomial-time algorithm for the Spanning Hypertree\n  Problem on 3-uniform hypergraphs", "comments": "6 pages, 1 figure", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CC math.CO", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Consider the problem of determining whether there exists a spanning hypertree\nin a given k-uniform hypergraph. This problem is trivially in P for k=2, and is\nNP-complete for k>= 4, whereas for k=3, there exists a polynomial-time\nalgorithm based on Lovasz' theory of polymatroid matching. Here we give a\ncompletely different, randomized polynomial-time algorithm in the case k=3. The\nmain ingredients are a Pfaffian formula by Vaintrob and one of the authors\n(G.M.) for a polynomial that enumerates spanning hypertrees with some signs,\nand a lemma on the number of roots of polynomials over a finite field.\n", "versions": [{"version": "v1", "created": "Thu, 18 Dec 2008 17:17:33 GMT"}], "update_date": "2008-12-19", "authors_parsed": [["Caracciolo", "Sergio", ""], ["Masbaum", "Gregor", ""], ["Sokal", "Alan D.", ""], ["Sportiello", "Andrea", ""]]}, {"id": "0812.4009", "submitter": "Joshua Herman J", "authors": "Joshua Herman, Keith David Pedersen", "title": "Graph Field Automata", "comments": "totally wrong doesn't make any sense would like to widthdraw", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CC", "license": "http://creativecommons.org/licenses/by-nc-sa/3.0/", "abstract": "  The Graph Automata have been the paradigm in the expression of utilizing\nGraphs as a language. Matrix Graph grammars \\cite{Pedro} are an algebratization\nof graph rewriting systems. Here we present the dual of this formalizm which\nsome extensions which we term Graph Field Automata The advantage to this\napproach is a framework for expressing machines that can use Matrix Graph\nGrammars.\n", "versions": [{"version": "v1", "created": "Mon, 22 Dec 2008 00:26:29 GMT"}, {"version": "v10", "created": "Mon, 12 Jan 2009 08:00:08 GMT"}, {"version": "v11", "created": "Sun, 18 Jan 2009 19:06:52 GMT"}, {"version": "v12", "created": "Thu, 22 Jan 2009 05:51:57 GMT"}, {"version": "v13", "created": "Mon, 26 Jan 2009 06:32:26 GMT"}, {"version": "v14", "created": "Fri, 30 Jan 2009 00:54:13 GMT"}, {"version": "v15", "created": "Tue, 3 Feb 2009 19:59:22 GMT"}, {"version": "v16", "created": "Fri, 6 Feb 2009 17:58:09 GMT"}, {"version": "v17", "created": "Tue, 10 Feb 2009 23:22:46 GMT"}, {"version": "v18", "created": "Wed, 22 Apr 2009 06:08:47 GMT"}, {"version": "v19", "created": "Sun, 24 Jan 2010 20:37:40 GMT"}, {"version": "v2", "created": "Tue, 23 Dec 2008 17:02:51 GMT"}, {"version": "v20", "created": "Fri, 17 Jul 2015 12:25:25 GMT"}, {"version": "v21", "created": "Fri, 4 Dec 2015 21:25:16 GMT"}, {"version": "v3", "created": "Wed, 24 Dec 2008 02:35:21 GMT"}, {"version": "v4", "created": "Sat, 27 Dec 2008 23:48:21 GMT"}, {"version": "v5", "created": "Fri, 2 Jan 2009 15:26:09 GMT"}, {"version": "v6", "created": "Mon, 5 Jan 2009 13:00:13 GMT"}, {"version": "v7", "created": "Tue, 6 Jan 2009 04:02:23 GMT"}, {"version": "v8", "created": "Wed, 7 Jan 2009 06:42:44 GMT"}, {"version": "v9", "created": "Thu, 8 Jan 2009 15:56:42 GMT"}], "update_date": "2015-12-08", "authors_parsed": [["Herman", "Joshua", ""], ["Pedersen", "Keith David", ""]]}, {"id": "0812.4171", "submitter": "Martin Dyer", "authors": "Andrei Bulatov, Martin Dyer, Leslie Ann Goldberg, Markus Jalsenius and\n  David Richerby", "title": "The Complexity of Weighted Boolean #CSP with Mixed Signs", "comments": "24 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.CC cs.DM", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We give a complexity dichotomy for the problem of computing the partition\nfunction of a weighted Boolean constraint satisfaction problem. Such a problem\nis parameterized by a set of rational-valued functions, which generalize\nconstraints. Each function assigns a weight to every assignment to a set of\nBoolean variables. Our dichotomy extends previous work in which the weight\nfunctions were restricted to being non-negative. We represent a weight function\nas a product of the form (-1)^s g, where the polynomial s determines the sign\nof the weight and the non-negative function g determines its magnitude. We show\nthat the problem of computing the partition function (the sum of the weights of\nall possible variable assignments) is in polynomial time if either every weight\nfunction can be defined by a \"pure affine\" magnitude with a quadratic sign\npolynomial or every function can be defined by a magnitude of \"product type\"\nwith a linear sign polynomial. In all other cases, computing the partition\nfunction is FP^#P-complete.\n", "versions": [{"version": "v1", "created": "Mon, 22 Dec 2008 12:56:42 GMT"}, {"version": "v2", "created": "Wed, 3 Jun 2009 15:30:25 GMT"}], "update_date": "2009-06-03", "authors_parsed": [["Bulatov", "Andrei", ""], ["Dyer", "Martin", ""], ["Goldberg", "Leslie Ann", ""], ["Jalsenius", "Markus", ""], ["Richerby", "David", ""]]}, {"id": "0812.4367", "submitter": "Dimiter Kovachev", "authors": "Dimiter Stoichkov Kovachev", "title": "On Some Classes of Functions and Hypercubes", "comments": "8 pages, 3 tables", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DM cs.CC", "license": "http://creativecommons.org/licenses/by-nc-sa/3.0/", "abstract": "  In this paper, some classes of discrete functions of $k$-valued logic are\nconsidered, that depend on sets of their variables in a particular way.\nObtained results allow to \"construct\" these functions and to present them in\ntheir tabular, analytical or matrix form, that is, as hypercubes, and in\nparticular Latin hypercubes. Results connected with identifying of variables of\nsome classes of functions are obtained.\n", "versions": [{"version": "v1", "created": "Tue, 23 Dec 2008 11:00:10 GMT"}], "update_date": "2008-12-24", "authors_parsed": [["Kovachev", "Dimiter Stoichkov", ""]]}]