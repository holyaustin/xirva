[{"id": "1002.0125", "submitter": "Jukka Suomela", "authors": "Matti {\\AA}strand, Valentin Polishchuk, Joel Rybicki, Jukka Suomela,\n  Jara Uitto", "title": "Local algorithms in (weakly) coloured graphs", "comments": "14 pages, 3 figures", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  A local algorithm is a distributed algorithm that completes after a constant\nnumber of synchronous communication rounds. We present local approximation\nalgorithms for the minimum dominating set problem and the maximum matching\nproblem in 2-coloured and weakly 2-coloured graphs. In a weakly 2-coloured\ngraph, both problems admit a local algorithm with the approximation factor\n$(\\Delta+1)/2$, where $\\Delta$ is the maximum degree of the graph. We also give\na matching lower bound proving that there is no local algorithm with a better\napproximation factor for either of these problems. Furthermore, we show that\nthe stronger assumption of a 2-colouring does not help in the case of the\ndominating set problem, but there is a local approximation scheme for the\nmaximum matching problem in 2-coloured graphs.\n", "versions": [{"version": "v1", "created": "Sun, 31 Jan 2010 13:46:27 GMT"}], "update_date": "2010-02-02", "authors_parsed": [["\u00c5strand", "Matti", ""], ["Polishchuk", "Valentin", ""], ["Rybicki", "Joel", ""], ["Suomela", "Jukka", ""], ["Uitto", "Jara", ""]]}, {"id": "1002.0484", "submitter": "Aubin Jarry", "authors": "Aubin Jarry, Pierre Leone and Jose Rolim", "title": "VRAC: Theory #1", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.NI cs.DC cs.DS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In order to make full use of geographic routing techniques developed for\nsensor networks, nodes must be localized. However, traditional localization and\nvirtual localization techniques are dependent either on expensive and sometimes\nunavailable hardware (e.g. GPS) or on sophisticated localization calculus (e.g.\ntriangulation) which are both error-prone and with a costly overhead.\n  Instead of actually localizing nodes in the physical two-dimensional\nEuclidean space, we use directly the raw distance to a set of anchors to\nproduce multi-dimensional coordinates. We prove that the image of the physical\ntwo-dimensional Euclidean space is a two-dimensional surface, and we show that\nit is possible to adapt geographic routing strategies on this surface, simply,\nefficiently and successfully.\n", "versions": [{"version": "v1", "created": "Tue, 2 Feb 2010 13:31:53 GMT"}], "update_date": "2010-02-03", "authors_parsed": [["Jarry", "Aubin", ""], ["Leone", "Pierre", ""], ["Rolim", "Jose", ""]]}, {"id": "1002.0705", "submitter": "Jon Kerr Nilsen Mr", "authors": "Jon K. Nilsen, Xing Cai, Bjorn Hoyland, Hans Petter Langtangen", "title": "Simplifying Parallelization of Scientific Codes by a Function-Centric\n  Approach in Python", "comments": "29 pages, submitted to Computational Science and Discovery", "journal-ref": null, "doi": "10.1088/1749-4699/3/1/015003", "report-no": null, "categories": "cs.DC cs.PL", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The purpose of this paper is to show how existing scientific software can be\nparallelized using a separate thin layer of Python code where all parallel\ncommunication is implemented. We provide specific examples on such layers of\ncode, and these examples may act as templates for parallelizing a wide set of\nserial scientific codes. The use of Python for parallelization is motivated by\nthe fact that the language is well suited for reusing existing serial codes\nprogrammed in other languages. The extreme flexibility of Python with regard to\nhandling functions makes it very easy to wrap up decomposed computational tasks\nof a serial scientific application as Python functions. Many\nparallelization-specific components can be implemented as generic Python\nfunctions, which may take as input those functions that perform concrete\ncomputational tasks. The overall programming effort needed by this\nparallelization approach is rather limited, and the resulting parallel Python\nscripts have a compact and clean structure. The usefulness of the\nparallelization approach is exemplified by three different classes of\napplications in natural and social sciences.\n", "versions": [{"version": "v1", "created": "Wed, 3 Feb 2010 12:31:14 GMT"}], "update_date": "2015-05-18", "authors_parsed": [["Nilsen", "Jon K.", ""], ["Cai", "Xing", ""], ["Hoyland", "Bjorn", ""], ["Langtangen", "Hans Petter", ""]]}, {"id": "1002.0712", "submitter": "Jon Kerr Nilsen Mr", "authors": "Jon K. Nilsen, Salman Toor, Zsombor Nagy, Bjarte Mohn, Alex L. Read", "title": "Performance and Stability of the Chelonia Storage Cloud", "comments": "29 pages, 10 figures, submitted to Future Generation Computing\n  Systems", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.SE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this paper we present the Chelonia storage cloud middleware. It was\ndesigned to fill the requirements gap between those of large, sophisticated\nscientific collaborations which have adopted the grid paradigm for their\ndistributed storage needs, and of corporate business communities which are\ngravitating towards the cloud paradigm. The similarities to and differences\nbetween Chelonia and several well-known grid- and cloud-based storage solutions\nare commented. The design of Chelonia has been chosen to optimize high\nreliability and scalability of an integrated system of heterogeneous,\ngeographically dispersed storage sites and the ability to easily expand the\nsystem dynamically. The architecture and implementation in term of web-services\nrunning inside the Advanced Resource Connector Hosting Environment Dameon (ARC\nHED) are described. We present results of tests in both local-area and\nwide-area networks that demonstrate the fault-tolerance, stability and\nscalability of Chelonia.\n", "versions": [{"version": "v1", "created": "Wed, 3 Feb 2010 11:43:25 GMT"}], "update_date": "2010-02-04", "authors_parsed": [["Nilsen", "Jon K.", ""], ["Toor", "Salman", ""], ["Nagy", "Zsombor", ""], ["Mohn", "Bjarte", ""], ["Read", "Alex L.", ""]]}, {"id": "1002.0722", "submitter": "Saber Jafarizadeh", "authors": "Saber Jafarizadeh", "title": "Fastest Distributed Consensus on Path Network", "comments": "4 pages, 1 figure", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.IT cs.DC math.CO math.IT", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Providing an analytical solution for the problem of finding Fastest\nDistributed Consensus (FDC) is one of the challenging problems in the field of\nsensor networks. Most of the methods proposed so far deal with the FDC\naveraging algorithm problem by numerical convex optimization methods and in\ngeneral no closed-form solution for finding FDC has been offered up to now\nexcept in [3] where the conjectured answer for path has been proved. Here in\nthis work we present an analytical solution for the problem of Fastest\nDistributed Consensus for the Path network using semidefinite programming\nparticularly solving the slackness conditions, where the optimal weights are\nobtained by inductive comparing of the characteristic polynomials initiated by\nslackness conditions.\n", "versions": [{"version": "v1", "created": "Wed, 3 Feb 2010 19:05:02 GMT"}, {"version": "v2", "created": "Mon, 15 Mar 2010 22:34:36 GMT"}], "update_date": "2010-03-17", "authors_parsed": [["Jafarizadeh", "Saber", ""]]}, {"id": "1002.0865", "submitter": "David Wolinsky", "authors": "David Isaac Wolinsky, Pierre St. Juste, P. Oscar Boykin, Renato\n  Figueiredo", "title": "Towards Social Profile Based Overlays", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.HC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Online social networking has quickly become one of the most common activities\nof Internet users. As social networks evolve, they encourage users to share\nmore information, requiring the users, in turn, to place more trust into social\nnetworks. Peer-to-peer (P2P) overlays provide an environment that can return\nownership of information, trust, and control to the users, away from\ncentralized third-party social networks.\n  In this paper, we present a novel concept, social profile overlays, which\nenable users to share their profile only with trusted peers in a scalable,\nreliable, and private manner. Each user's profile consists of a unique private,\nsecure overlay, where members of that overlay have a friendship with the\noverlay owner. Profile data is made available without regard to the online\nstate of the profile owner through the use of the profile overlay's distributed\ndata store. Privacy and security are enforced through the use of a public key\ninfrastructure (PKI), where the role of certificate authority (CA) is handled\nby the overlay owner and each member of the overlay has a CA-signed\ncertificate. All members of the social network join a common public or\ndirectory overlay facilitating friend discovery and bootstrap connections into\nprofile overlays. We define interfaces and present tools that can be used to\nimplement this system, as well as explore some of the challenges related to it.\n", "versions": [{"version": "v1", "created": "Wed, 3 Feb 2010 23:06:54 GMT"}], "update_date": "2010-02-05", "authors_parsed": [["Wolinsky", "David Isaac", ""], ["Juste", "Pierre St.", ""], ["Boykin", "P. Oscar", ""], ["Figueiredo", "Renato", ""]]}, {"id": "1002.0933", "submitter": "EPTCS", "authors": "Andi Bejleri (Imperial College), Raymond Hu (Imperial College), Nobuko\n  Yoshida (Imperial College)", "title": "Session-Based Programming for Parallel Algorithms: Expressiveness and\n  Performance", "comments": null, "journal-ref": "EPTCS 17, 2010, pp. 17-29", "doi": "10.4204/EPTCS.17.2", "report-no": null, "categories": "cs.PL cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper investigates session programming and typing of benchmark examples\nto compare productivity, safety and performance with other communications\nprogramming languages. Parallel algorithms are used to examine the above\naspects due to their extensive use of message passing for interaction, and\ntheir increasing prominence in algorithmic research with the rising\navailability of hardware resources such as multicore machines and clusters. We\ncontribute new benchmark results for SJ, an extension of Java for type-safe,\nbinary session programming, against MPJ Express, a Java messaging system based\non the MPI standard. In conclusion, we observe that (1) despite rich libraries\nand functionality, MPI remains a low-level API, and can suffer from commonly\nperceived disadvantages of explicit message passing such as deadlocks and\nunexpected message types, and (2) the benefits of high-level session\nabstraction, which has significant impact on program structure to improve\nreadability and reliability, and session type-safety can greatly facilitate the\ntask of communications programming whilst retaining competitive performance.\n", "versions": [{"version": "v1", "created": "Thu, 4 Feb 2010 09:34:31 GMT"}], "update_date": "2010-02-05", "authors_parsed": [["Bejleri", "Andi", "", "Imperial College"], ["Hu", "Raymond", "", "Imperial College"], ["Yoshida", "Nobuko", "", "Imperial College"]]}, {"id": "1002.0936", "submitter": "EPTCS", "authors": "Matthew Kehrt (University of Washington), Laura Effinger-Dean\n  (University of Washington), Michael Schmitz (University of Washington), Dan\n  Grossman (University of Washington)", "title": "Programming Idioms for Transactional Events", "comments": null, "journal-ref": "EPTCS 17, 2010, pp. 43-48", "doi": "10.4204/EPTCS.17.4", "report-no": null, "categories": "cs.PL cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Transactional events (TE) are an extension of Concurrent ML (CML), a\nprogramming model for synchronous message-passing. Prior work has focused on\nTE's formal semantics and its implementation. This paper considers programming\nidioms, particularly those that vary unexpectedly from the corresponding CML\nidioms. First, we solve a subtle problem with client-server protocols in TE.\nSecond, we argue that CML's wrap and guard primitives do not translate well to\nTE, and we suggest useful workarounds. Finally, we discuss how to rewrite CML\nprotocols that use abort actions.\n", "versions": [{"version": "v1", "created": "Thu, 4 Feb 2010 09:43:21 GMT"}], "update_date": "2010-02-05", "authors_parsed": [["Kehrt", "Matthew", "", "University of Washington"], ["Effinger-Dean", "Laura", "", "University of Washington"], ["Schmitz", "Michael", "", "University of Washington"], ["Grossman", "Dan", "", "University of Washington"]]}, {"id": "1002.0939", "submitter": "EPTCS", "authors": "Stefan Marr (Vrije Universiteit Brussel), Michael Haupt (Hasso\n  Plattner Institute, University of Potsdam), Stijn Timbermont (Vrije\n  Universiteit Brussel), Bram Adams (Queen's University), Theo D'Hondt (Vrije\n  Universiteit Brussel), Pascal Costanza (Vrije Universiteit Brussel), Wolfgang\n  De Meuter (Vrije Universiteit Brussel)", "title": "Virtual Machine Support for Many-Core Architectures: Decoupling Abstract\n  from Concrete Concurrency Models", "comments": null, "journal-ref": "EPTCS 17, 2010, pp. 63-77", "doi": "10.4204/EPTCS.17.6", "report-no": null, "categories": "cs.DC cs.AR cs.PL cs.SE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The upcoming many-core architectures require software developers to exploit\nconcurrency to utilize available computational power. Today's high-level\nlanguage virtual machines (VMs), which are a cornerstone of software\ndevelopment, do not provide sufficient abstraction for concurrency concepts. We\nanalyze concrete and abstract concurrency models and identify the challenges\nthey impose for VMs. To provide sufficient concurrency support in VMs, we\npropose to integrate concurrency operations into VM instruction sets.\n  Since there will always be VMs optimized for special purposes, our goal is to\ndevelop a methodology to design instruction sets with concurrency support.\nTherefore, we also propose a list of trade-offs that have to be investigated to\nadvise the design of such instruction sets.\n  As a first experiment, we implemented one instruction set extension for\nshared memory and one for non-shared memory concurrency. From our experimental\nresults, we derived a list of requirements for a full-grown experimental\nenvironment for further research.\n", "versions": [{"version": "v1", "created": "Thu, 4 Feb 2010 09:48:53 GMT"}], "update_date": "2010-02-05", "authors_parsed": [["Marr", "Stefan", "", "Vrije Universiteit Brussel"], ["Haupt", "Michael", "", "Hasso\n  Plattner Institute, University of Potsdam"], ["Timbermont", "Stijn", "", "Vrije\n  Universiteit Brussel"], ["Adams", "Bram", "", "Queen's University"], ["D'Hondt", "Theo", "", "Vrije\n  Universiteit Brussel"], ["Costanza", "Pascal", "", "Vrije Universiteit Brussel"], ["De Meuter", "Wolfgang", "", "Vrije Universiteit Brussel"]]}, {"id": "1002.0940", "submitter": "EPTCS", "authors": "Prodromos Gerakios (National Technical University of Athens), Nikolaos\n  Papaspyrou (National Technical University of Athens), Konstantinos Sagonas\n  (National Technical University of Athens)", "title": "A Concurrent Language with a Uniform Treatment of Regions and Locks", "comments": null, "journal-ref": "EPTCS 17, 2010, pp. 79-93", "doi": "10.4204/EPTCS.17.7", "report-no": null, "categories": "cs.PL cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  A challenge for programming language research is to design and implement\nmulti-threaded low-level languages providing static guarantees for memory\nsafety and freedom from data races. Towards this goal, we present a concurrent\nlanguage employing safe region-based memory management and hierarchical locking\nof regions. Both regions and locks are treated uniformly, and the language\nsupports ownership transfer, early deallocation of regions and early release of\nlocks in a safe manner.\n", "versions": [{"version": "v1", "created": "Thu, 4 Feb 2010 09:51:04 GMT"}], "update_date": "2010-02-05", "authors_parsed": [["Gerakios", "Prodromos", "", "National Technical University of Athens"], ["Papaspyrou", "Nikolaos", "", "National Technical University of Athens"], ["Sagonas", "Konstantinos", "", "National Technical University of Athens"]]}, {"id": "1002.1099", "submitter": "Ioannis Chatzigiannakis", "authors": "Ioannis Chatzigiannakis, Georgios Mylonas, Orestis Akribopoulos,\n  Marios Logaras, Panagiotis Kokkinos, Paul Spirakis", "title": "The \"Hot Potato\" Case: Challenges in Multiplayer Pervasive Games Based\n  on Ad hoc Mobile Sensor Networks and the Experimental Evaluation of a\n  Prototype Game", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.HC cs.DC cs.MA cs.NI cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this work, we discuss multiplayer pervasive games that rely on the use of\nad hoc mobile sensor networks. The unique feature in such games is that players\ninteract with each other and their surrounding environment by using movement\nand presence as a means of performing game-related actions, utilizing sensor\ndevices. We discuss the fundamental issues and challenges related to these type\nof games and the scenarios associated with them. We also present and evaluate\nan example of such a game, called the \"Hot Potato\", developed using the Sun\nSPOT hardware platform. We provide a set of experimental results, so as to both\nevaluate our implementation and also to identify issues that arise in pervasive\ngames which utilize sensor network nodes, which show that there is great\npotential in this type of games.\n", "versions": [{"version": "v1", "created": "Thu, 4 Feb 2010 23:02:02 GMT"}], "update_date": "2010-02-08", "authors_parsed": [["Chatzigiannakis", "Ioannis", ""], ["Mylonas", "Georgios", ""], ["Akribopoulos", "Orestis", ""], ["Logaras", "Marios", ""], ["Kokkinos", "Panagiotis", ""], ["Spirakis", "Paul", ""]]}, {"id": "1002.1408", "submitter": "EPTCS", "authors": "Alastair R. Beresford (University of Cambridge), Simon Gay (University\n  of Glasgow)", "title": "Proceedings Second International Workshop on Programming Language\n  Approaches to Concurrency and Communication-cEntric Software", "comments": null, "journal-ref": "EPTCS 17, 2010", "doi": "10.4204/EPTCS.17", "report-no": null, "categories": "cs.PL cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  The Second International Workshop on Programming Language Approaches to\nConcurrency and Communication-cEntric Software (PLACES) was co-located with\nETAPS 2009 in the city of York, England. The workshop took place on Sunday 22nd\nMarch 2009. The workshop focused on the challenges raised by the changing\nlandscape of computer software. Traditionally, most software was written for a\nsingle computer with one CPU. However applications on the web today are built\nusing numerous interacting services deployed on across many machines; soon\noff-the-shelf CPUs will host thousands of cores, and sensor networks will be\ncomposed from a large number of processing units. Many normal applications will\nsoon need to make effective use of thousands of computing nodes. At some level\nof granularity, computation in such systems will be inherently concurrent and\ncommunication-centred.\n  The development of effective programming methodologies for the coming\ncomputing paradigm demands exploration and understanding of a wide variety of\nideas and techniques. This workshop offered a forum where researchers from\ndifferent fields could exchange new ideas on one of the central challenges for\nprogramming in the near future, the development of programming methodologies\nand infrastructures where concurrency and distribution are the norm rather than\na marginal concern.\n", "versions": [{"version": "v1", "created": "Sat, 6 Feb 2010 20:06:00 GMT"}], "update_date": "2010-02-09", "authors_parsed": [["Beresford", "Alastair R.", "", "University of Cambridge"], ["Gay", "Simon", "", "University\n  of Glasgow"]]}, {"id": "1002.2222", "submitter": "Rdv Ijcsis", "authors": "Mosleh M. Abu Alhaj, M. Halaiyqah, Muhannad A. Abu Hashem, Adnan A.\n  Hnaif, O. Abouabdalla, and Ahmed M. Manasrah", "title": "An innovative platform to improve the performance of exact string\n  matching algorithms", "comments": "IEEE format, International Journal of Computer Science and\n  Information Security, IJCSIS January 2010, ISSN 1947 5500,\n  http://sites.google.com/site/ijcsis/", "journal-ref": "International Journal of Computer Science and Information\n  Security, IJCSIS, Vol. 7, No. 1, pp. 280-283, January 2010, USA", "doi": null, "report-no": "Journal of Computer Science, ISSN 1947 5500", "categories": "cs.DC cs.DS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Exact String Matching is an essential issue in many computer science\napplications. Unfortunately, the performance of Exact String Matching\nalgorithms, namely, executing time, does not address the needs of these\napplications. This paper proposes a general platform for improving the existing\nExact String Matching algorithms executing time, called the PXSMAlg platform.\nThe function of this platform is to parallelize the Exact String Matching\nalgorithms using the MPI model over the Master or Slaves paradigms. The PXSMAlg\nplatform parallelization process is done by dividing the Text into several\nparts and working on these parts simultaneously. This improves the executing\ntime of the Exact String Matching algorithms. We have simulated the PXSMAlg\nplatform in order to show its competence, through applying the Quick Search\nalgorithm on the PXSMAlg platform. The simulation result showed significant\nimprovement in the Quick Search executing time, and therefore extreme\ncompetence in the PXSMAlg platform.\n", "versions": [{"version": "v1", "created": "Thu, 11 Feb 2010 20:31:03 GMT"}], "update_date": "2010-02-12", "authors_parsed": [["Alhaj", "Mosleh M. Abu", ""], ["Halaiyqah", "M.", ""], ["Hashem", "Muhannad A. Abu", ""], ["Hnaif", "Adnan A.", ""], ["Abouabdalla", "O.", ""], ["Manasrah", "Ahmed M.", ""]]}, {"id": "1002.2283", "submitter": "Choon Yik Tang", "authors": "Jie Lu, Choon Yik Tang, Paul R. Regier, Travis D. Bow", "title": "Gossip Algorithms for Convex Consensus Optimization over Networks", "comments": "15 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "math.OC cs.DC cs.SY", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In many applications, nodes in a network desire not only a consensus, but an\noptimal one. To date, a family of subgradient algorithms have been proposed to\nsolve this problem under general convexity assumptions. This paper shows that,\nfor the scalar case and by assuming a bit more, novel non-gradient-based\nalgorithms with appealing features can be constructed. Specifically, we develop\nPairwise Equalizing (PE) and Pairwise Bisectioning (PB), two gossip algorithms\nthat solve unconstrained, separable, convex consensus optimization problems\nover undirected networks with time-varying topologies, where each local\nfunction is strictly convex, continuously differentiable, and has a minimizer.\nWe show that PE and PB are easy to implement, bypass limitations of the\nsubgradient algorithms, and produce switched, nonlinear, networked dynamical\nsystems that admit a common Lyapunov function and asymptotically converge.\nMoreover, PE generalizes the well-known Pairwise Averaging and Randomized\nGossip Algorithm, while PB relaxes a requirement of PE, allowing nodes to never\nshare their local functions.\n", "versions": [{"version": "v1", "created": "Thu, 11 Feb 2010 05:51:47 GMT"}, {"version": "v2", "created": "Tue, 16 Feb 2010 23:22:30 GMT"}, {"version": "v3", "created": "Thu, 10 Feb 2011 17:24:47 GMT"}], "update_date": "2011-02-11", "authors_parsed": [["Lu", "Jie", ""], ["Tang", "Choon Yik", ""], ["Regier", "Paul R.", ""], ["Bow", "Travis D.", ""]]}, {"id": "1002.2722", "submitter": "Marco Aldinucci", "authors": "Marco Aldinucci, Emilio Tuosto", "title": "Toward a Formal Semantics for Autonomic Components", "comments": "11 pages + cover page", "journal-ref": "In From Grids To Service and Pervasive Computing (Proc. of the\n  CoreGRID Symposium 2008), CoreGRID, pages 31-45, Las Palmas, Spain, Aug.\n  2008. Springer", "doi": "10.1007/978-0-387-09455-7_3", "report-no": "TR-08-08", "categories": "cs.DC cs.SE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Autonomic management can improve the QoS provided by parallel/ distributed\napplications. Within the CoreGRID Component Model, the autonomic management is\ntailored to the automatic - monitoring-driven - alteration of the component\nassembly and, therefore, is defined as the effect of (distributed) management\ncode. This work yields a semantics based on hypergraph rewriting suitable to\nmodel the dynamic evolution and non-functional aspects of Service Oriented\nArchitectures and component-based autonomic applications. In this regard, our\nmain goal is to provide a formal description of adaptation operations that are\ntypically only informally specified. We contend that our approach makes easier\nto raise the level of abstraction of management code in autonomic and adaptive\napplications.\n", "versions": [{"version": "v1", "created": "Sat, 13 Feb 2010 18:55:54 GMT"}, {"version": "v2", "created": "Fri, 2 Jul 2010 17:46:06 GMT"}], "update_date": "2010-07-05", "authors_parsed": [["Aldinucci", "Marco", ""], ["Tuosto", "Emilio", ""]]}, {"id": "1002.3492", "submitter": "Ali Khajeh-Hosseini", "authors": "Ali Khajeh-Hosseini, David Greenwood, Ian Sommerville", "title": "Cloud Migration: A Case Study of Migrating an Enterprise IT System to\n  IaaS", "comments": "Submitted to IEEE CLOUD 2010", "journal-ref": null, "doi": "10.1109/CLOUD.2010.37", "report-no": null, "categories": "cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This case study illustrates the potential benefits and risks associated with\nthe migration of an IT system in the oil & gas industry from an in-house data\ncenter to Amazon EC2 from a broad variety of stakeholder perspectives across\nthe enterprise, thus transcending the typical, yet narrow, financial and\ntechnical analysis offered by providers. Our results show that the system\ninfrastructure in the case study would have cost 37% less over 5 years on EC2,\nand using cloud computing could have potentially eliminated 21% of the support\ncalls for this system. These findings seem significant enough to call for a\nmigration of the system to the cloud but our stakeholder impact analysis\nrevealed that there are significant risks associated with this. Whilst the\nbenefits of using the cloud are attractive, we argue that it is important that\nenterprise decision-makers consider the overall organizational implications of\nthe changes brought about with cloud computing to avoid implementing local\noptimizations at the cost of organization-wide performance.\n", "versions": [{"version": "v1", "created": "Thu, 18 Feb 2010 11:25:49 GMT"}], "update_date": "2016-11-18", "authors_parsed": [["Khajeh-Hosseini", "Ali", ""], ["Greenwood", "David", ""], ["Sommerville", "Ian", ""]]}, {"id": "1002.3602", "submitter": "Jing (Tiffany) Li", "authors": "Xingkai Bao, and Jing Li (Tiffany)", "title": "Mobile Wireless Localization through Cooperation", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper considers N mobile nodes that move together in the vicinity of\neach other, whose initial poses as well as subsequent movements must be\naccurately tracked in real time with the assist of M(>=3) reference nodes. By\nengaging the neighboring mobile nodes in a simple but effective cooperation,\nand by exploiting both the time-of-arrival (TOA) information (between mobile\nnodes and reference nodes) and the received-signal-strength (RSS) information\n(between mobile nodes), an effective new localization strategy, termed\ncooperative TOA and RSS (COTAR), is developed. An optimal maximum likelihood\ndetector is first formulated, followed by the derivation of a low-complexity\niterative approach that can practically achieve the Cramer-Rao lower bound.\nInstead of using simplified channel models as in many previous studies, a\nsophisticated and realistic channel model is used, which can effectively\naccount for the critical fact that the direct path is not necessarily the\nstrongest path. Extensive simulations are conducted in static and mobile\nsettings, and various practical issues and system parameters are evaluated. It\nis shown that COTAR significantly outperforms the existing strategies,\nachieving a localization accuracy of only a few tenths of a meter in clear\nenvironments and a couple of meters in heavily obstructed environments.\n", "versions": [{"version": "v1", "created": "Thu, 18 Feb 2010 20:38:03 GMT"}, {"version": "v2", "created": "Wed, 3 Aug 2011 19:36:12 GMT"}], "update_date": "2011-08-04", "authors_parsed": [["Bao", "Xingkai", "", "Tiffany"], ["Li", "Jing", "", "Tiffany"]]}, {"id": "1002.3629", "submitter": "Jing ( Tiffany ) Li", "authors": "Xingkai Bao, and Jing Li (Tiffany)", "title": "Generalized Adaptive Network Coded Cooperation (GANCC): A Unified\n  Framework for Network Coding and Channel Coding", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  This paper considers distributed coding for multi-source single-sink data\ncollection wireless networks. A unified framework for network coding and\nchannel coding, termed \"generalized adaptive network coded cooperation\"\n(GANCC), is proposed. Key ingredients of GANCC include: matching code graphs\nwith the dynamic network graphs on-the-fly, and integrating channel coding with\nnetwork coding through circulant low-density parity-check codes. Several code\nconstructing methods and several families of sparse-graph codes are proposed,\nand information theoretical analysis is performed. It is shown that GANCC is\nsimple to operate, adaptive in real time, distributed in nature, and capable of\nproviding remarkable coding gains even with a very limited number of\ncooperating users.\n", "versions": [{"version": "v1", "created": "Thu, 18 Feb 2010 22:28:03 GMT"}], "update_date": "2010-02-22", "authors_parsed": [["Bao", "Xingkai", "", "Tiffany"], ["Li", "Jing", "", "Tiffany"]]}, {"id": "1002.3757", "submitter": "Andrea Clementi", "authors": "Andrea Clementi, Angelo Monti, Riccardo Silvestri", "title": "Fast Flooding over Manhattan", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We consider a Mobile Ad-hoc NETwork (MANET) formed by n agents that move at\nspeed V according to the Manhattan Random-Way Point model over a square region\nof side length L. The resulting stationary (agent) spatial probability\ndistribution is far to be uniform: the average density over the \"central zone\"\nis asymptotically higher than that over the \"suburb\". Agents exchange data iff\nthey are at distance at most R within each other.\n  We study the flooding time of this MANET: the number of time steps required\nto broadcast a message from one source agent to all agents of the network in\nthe stationary phase. We prove the first asymptotical upper bound on the\nflooding time. This bound holds with high probability, it is a decreasing\nfunction of R and V, and it is tight for a wide and relevant range of the\nnetwork parameters (i.e. L, R and V).\n  A consequence of our result is that flooding over the sparse and\nhighly-disconnected suburb can be as fast as flooding over the dense and\nconnected central zone. Rather surprisingly, this property holds even when R is\nexponentially below the connectivity threshold of the MANET and the speed V is\nvery low.\n", "versions": [{"version": "v1", "created": "Fri, 19 Feb 2010 15:02:50 GMT"}], "update_date": "2010-02-22", "authors_parsed": [["Clementi", "Andrea", ""], ["Monti", "Angelo", ""], ["Silvestri", "Riccardo", ""]]}, {"id": "1002.4003", "submitter": "William Jackson", "authors": "Parneeta Dhaliwal, M.P.S. Bhatia, Priti Bansal", "title": "A Cluster-based Approach for Outlier Detection in Dynamic Data Streams\n  (KORM: k-median OutlieR Miner)", "comments": null, "journal-ref": "Journal of Computing, Volume 2, Issue 2, February 2010,\n  https://sites.google.com/site/journalofcomputing/", "doi": null, "report-no": null, "categories": "cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Outlier detection in data streams has gained wide importance presently due to\nthe increasing cases of fraud in various applications of data streams. The\ntechniques for outlier detection have been divided into either statistics\nbased, distance based, density based or deviation based. Till now, most of the\nwork in the field of fraud detection was distance based but it is incompetent\nfrom computational point of view. In this paper we introduced a new clustering\nbased approach, which divides the stream in chunks and clusters each chunk\nusing kmedian into variable number of clusters. Instead of storing complete\ndata stream chunk in memory, we replace it with the weighted medians found\nafter mining a data stream chunk and pass that information along with the newly\narrived data chunk to the next phase. The weighted medians found in each phase\nare tested for outlierness and after a given number of phases, it is either\ndeclared as a real outlier or an inlier. Our technique is theoretically better\nthan the k-means as it does not fix the number of clusters to k rather gives a\nrange to it and provides a more stable and better solution which runs in\npoly-logarithmic space.\n", "versions": [{"version": "v1", "created": "Sun, 21 Feb 2010 19:39:35 GMT"}], "update_date": "2010-03-25", "authors_parsed": [["Dhaliwal", "Parneeta", ""], ["Bhatia", "M. P. S.", ""], ["Bansal", "Priti", ""]]}, {"id": "1002.4182", "submitter": "Gokarna Sharma", "authors": "Gokarna Sharma, Brett Estrade and Costas Busch", "title": "Window-Based Greedy Contention Management for Transactional Memory", "comments": "13 pages", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.DS cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We consider greedy contention managers for transactional memory for M x N\nexecution windows of transactions with M threads and N transactions per thread.\nAssuming that each transaction conflicts with at most C other transactions\ninside the window, a trivial greedy contention manager can schedule them within\nCN time. In this paper, we show that there are much better schedules. We\npresent and analyze two new randomized greedy contention management algorithms.\nThe first algorithm Offline-Greedy produces a schedule of length O(C + N\nlog(MN)) with high probability, and gives competitive ratio O(log(MN)) for C <=\nN log(MN). The offline algorithm depends on knowing the conflict graph. The\nsecond algorithm Online-Greedy produces a schedule of length O(C log(MN) + N\nlog^2(MN)) with high probability which is only a O(log(NM)) factor worse, but\ndoes not require knowledge of the conflict graph. We also give an adaptive\nversion which achieves similar worst-case performance and C is determined on\nthe fly under execution. Our algorithms provide new tradeoffs for greedy\ntransaction scheduling that parameterize window sizes and transaction conflicts\nwithin the window.\n", "versions": [{"version": "v1", "created": "Mon, 22 Feb 2010 20:02:24 GMT"}], "update_date": "2010-02-23", "authors_parsed": [["Sharma", "Gokarna", ""], ["Estrade", "Brett", ""], ["Busch", "Costas", ""]]}, {"id": "1002.4264", "submitter": "Jianfeng Zhan", "authors": "Xu Liu, Lin Yuan, Jianfeng Zhan, Bibo Tu, Dan Meng", "title": "Automatic Performance Debugging of SPMD Parallel Programs", "comments": "The preliminary version appeared on SC 08 workshop on Node Level\n  Parallelism for Large Scale Supercomputers. The web site is\n  http://iss.ices.utexas.edu/sc08nlplss/program.html", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.PF", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  Automatic performance debugging of parallel applications usually involves two\nsteps: automatic detection of performance bottlenecks and uncovering their root\ncauses for performance optimization. Previous work fails to resolve this\nchallenging issue in several ways: first, several previous efforts automate\nanalysis processes, but present the results in a confined way that only\nidentifies performance problems with apriori knowledge; second, several tools\ntake exploratory or confirmatory data analysis to automatically discover\nrelevant performance data relationships. However, these efforts do not focus on\nlocating performance bottlenecks or uncovering their root causes. In this\npaper, we design and implement an innovative system, AutoAnalyzer, to\nautomatically debug the performance problems of single program multi-data\n(SPMD) parallel programs. Our system is unique in terms of two dimensions:\nfirst, without any apriori knowledge, we automatically locate bottlenecks and\nuncover their root causes for performance optimization; second, our method is\nlightweight in terms of size of collected and analyzed performance data. Our\ncontribution is three-fold. First, we propose a set of simple performance\nmetrics to represent behavior of different processes of parallel programs, and\npresent two effective clustering and searching algorithms to locate\nbottlenecks. Second, we propose to use the rough set algorithm to automatically\nuncover the root causes of bottlenecks. Third, we design and implement the\nAutoAnalyzer system, and use two production applications to verify the\neffectiveness and correctness of our methods. According to the analysis results\nof AutoAnalyzer, we optimize two parallel programs with performance\nimprovements by minimally 20% and maximally 170%.\n", "versions": [{"version": "v1", "created": "Tue, 23 Feb 2010 08:17:43 GMT"}], "update_date": "2010-02-24", "authors_parsed": [["Liu", "Xu", ""], ["Yuan", "Lin", ""], ["Zhan", "Jianfeng", ""], ["Tu", "Bibo", ""], ["Meng", "Dan", ""]]}, {"id": "1002.4464", "submitter": "Frank Dehne", "authors": "Frank Dehne and Hamidreza Zaboli", "title": "Deterministic Sample Sort For GPUs", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.CC cs.DS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We present and evaluate GPU Bucket Sort, a parallel deterministic sample sort\nalgorithm for many-core GPUs. Our method is considerably faster than Thrust\nMerge (Satish et.al., Proc. IPDPS 2009), the best comparison-based sorting\nalgorithm for GPUs, and it is as fast as the new randomized sample sort for\nGPUs by Leischner et.al. (to appear in Proc. IPDPS 2010). Our deterministic\nsample sort has the advantage that bucket sizes are guaranteed and therefore\nits running time does not have the input data dependent fluctuations that can\noccur for randomized sample sort.\n", "versions": [{"version": "v1", "created": "Wed, 24 Feb 2010 04:27:14 GMT"}], "update_date": "2010-02-25", "authors_parsed": [["Dehne", "Frank", ""], ["Zaboli", "Hamidreza", ""]]}, {"id": "1002.4482", "submitter": "Frank Dehne", "authors": "Frank Dehne and Kumanan Yogaratnam", "title": "Exploring the Limits of GPUs With Parallel Graph Algorithms", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.CC cs.DS", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  In this paper, we explore the limits of graphics processors (GPUs) for\ngeneral purpose parallel computing by studying problems that require highly\nirregular data access patterns: parallel graph algorithms for list ranking and\nconnected components. Such graph problems represent a worst case scenario for\ncoalescing parallel memory accesses on GPUs which is critical for good GPU\nperformance. Our experimental study indicates that PRAM algorithms are a good\nstarting point for developing efficient parallel GPU methods but require\nnon-trivial modifications to ensure good GPU performance. We present a set of\nguidelines that help algorithm designers adapt PRAM graph algorithms for\nparallel GPU computation. We point out that the study of parallel graph\nalgorithms for GPUs is of wider interest for discrete and combinatorial\nproblems in general because many of these problems require similar irregular\ndata access patterns.\n", "versions": [{"version": "v1", "created": "Wed, 24 Feb 2010 06:37:29 GMT"}], "update_date": "2010-02-25", "authors_parsed": [["Dehne", "Frank", ""], ["Yogaratnam", "Kumanan", ""]]}, {"id": "1002.4561", "submitter": "Jared Saia", "authors": "Valerie King and Jared Saia", "title": "Breaking the O(n^2) Bit Barrier: Scalable Byzantine agreement with an\n  Adaptive Adversary", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We describe an algorithm for Byzantine agreement that is scalable in the\nsense that each processor sends only $\\tilde{O}(\\sqrt{n})$ bits, where $n$ is\nthe total number of processors. Our algorithm succeeds with high probability\nagainst an \\emph{adaptive adversary}, which can take over processors at any\ntime during the protocol, up to the point of taking over arbitrarily close to a\n1/3 fraction. We assume synchronous communication but a \\emph{rushing}\nadversary. Moreover, our algorithm works in the presence of flooding:\nprocessors controlled by the adversary can send out any number of messages. We\nassume the existence of private channels between all pairs of processors but\nmake no other cryptographic assumptions. Finally, our algorithm has latency\nthat is polylogarithmic in $n$. To the best of our knowledge, ours is the first\nalgorithm to solve Byzantine agreement against an adaptive adversary, while\nrequiring $o(n^{2})$ total bits of communication.\n", "versions": [{"version": "v1", "created": "Wed, 24 Feb 2010 15:19:55 GMT"}], "update_date": "2010-02-25", "authors_parsed": [["King", "Valerie", ""], ["Saia", "Jared", ""]]}, {"id": "1002.4668", "submitter": "Marco Aldinucci", "authors": "Marco Aldinucci, Marco Danelutto, Peter Kilpatrick, Massimiliano\n  Meneghin, Massimo Torquati", "title": "Accelerating sequential programs using FastFlow and self-offloading", "comments": "17 pages + cover", "journal-ref": null, "doi": null, "report-no": "TR-10-03", "categories": "cs.DC cs.PL cs.SE", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  FastFlow is a programming environment specifically targeting cache-coherent\nshared-memory multi-cores. FastFlow is implemented as a stack of C++ template\nlibraries built on top of lock-free (fence-free) synchronization mechanisms. In\nthis paper we present a further evolution of FastFlow enabling programmers to\noffload part of their workload on a dynamically created software accelerator\nrunning on unused CPUs. The offloaded function can be easily derived from\npre-existing sequential code. We emphasize in particular the effective\ntrade-off between human productivity and execution efficiency of the approach.\n", "versions": [{"version": "v1", "created": "Thu, 25 Feb 2010 00:49:06 GMT"}], "update_date": "2010-02-26", "authors_parsed": [["Aldinucci", "Marco", ""], ["Danelutto", "Marco", ""], ["Kilpatrick", "Peter", ""], ["Meneghin", "Massimiliano", ""], ["Torquati", "Massimo", ""]]}, {"id": "1002.4738", "submitter": "Graham Kirby", "authors": "Graham Kirby, Alan Dearle, Angus Macdonald, Alvaro Fernandes", "title": "An Approach to Ad hoc Cloud Computing", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC", "license": "http://arxiv.org/licenses/nonexclusive-distrib/1.0/", "abstract": "  We consider how underused computing resources within an enterprise may be\nharnessed to improve utilization and create an elastic computing\ninfrastructure. Most current cloud provision involves a data center model, in\nwhich clusters of machines are dedicated to running cloud infrastructure\nsoftware. We propose an additional model, the ad hoc cloud, in which\ninfrastructure software is distributed over resources harvested from machines\nalready in existence within an enterprise. In contrast to the data center cloud\nmodel, resource levels are not established a priori, nor are resources\ndedicated exclusively to the cloud while in use. A participating machine is not\ndedicated to the cloud, but has some other primary purpose such as running\ninteractive processes for a particular user. We outline the major\nimplementation challenges and one approach to tackling them.\n", "versions": [{"version": "v1", "created": "Thu, 25 Feb 2010 10:19:37 GMT"}], "update_date": "2016-09-08", "authors_parsed": [["Kirby", "Graham", ""], ["Dearle", "Alan", ""], ["Macdonald", "Angus", ""], ["Fernandes", "Alvaro", ""]]}]