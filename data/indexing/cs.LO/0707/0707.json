[{"id": "0707.0556", "submitter": "Roberto Amadio", "authors": "Roberto Amadio (PPS), Mehdi Dogguy (PPS)", "title": "Determinacy in a synchronous pi-calculus", "comments": "To appear in the book `From semantics to computer science: essays in\n  honor of Gilles Kahn', Cambridge University Press", "journal-ref": "From semantics to computer science: essays in honor of Gilles\n  Kahn, Y. Bertot et al. (Ed.) (2009) 1-27", "doi": null, "report-no": null, "categories": "cs.LO", "license": null, "abstract": "  The S-pi-calculus is a synchronous pi-calculus which is based on the SL\nmodel. The latter is a relaxation of the Esterel model where the reaction to\nthe absence of a signal within an instant can only happen at the next instant.\nIn the present work, we present and characterise a compositional semantics of\nthe S-pi-calculus based on suitable notions of labelled transition system and\nbisimulation. Based on this semantic framework, we explore the notion of\ndeterminacy and the related one of (local) confluence.\n", "versions": [{"version": "v1", "created": "Wed, 4 Jul 2007 08:12:17 GMT"}, {"version": "v2", "created": "Mon, 11 Feb 2008 18:58:19 GMT"}], "update_date": "2010-07-01", "authors_parsed": [["Amadio", "Roberto", "", "PPS"], ["Dogguy", "Mehdi", "", "PPS"]]}, {"id": "0707.0562", "submitter": "Stefan G\\\"oller", "authors": "Stefan G\\\"oller and Dirk Nowotka", "title": "On a Non-Context-Free Extension of PDL", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.LO", "license": null, "abstract": "  Over the last 25 years, a lot of work has been done on seeking for decidable\nnon-regular extensions of Propositional Dynamic Logic (PDL). Only recently, an\nexpressive extension of PDL, allowing visibly pushdown automata (VPAs) as a\nformalism to describe programs, was introduced and proven to have a\nsatisfiability problem complete for deterministic double exponential time.\nLately, the VPA formalism was extended to so called k-phase multi-stack visibly\npushdown automata (k-MVPAs). Similarly to VPAs, it has been shown that the\nlanguage of k-MVPAs have desirable effective closure properties and that the\nemptiness problem is decidable. On the occasion of introducing k-MVPAs, it has\nbeen asked whether the extension of PDL with k-MVPAs still leads to a decidable\nlogic. This question is answered negatively here. We prove that already for the\nextension of PDL with 2-phase MVPAs with two stacks satisfiability becomes\n\\Sigma_1^1-complete.\n", "versions": [{"version": "v1", "created": "Wed, 4 Jul 2007 09:33:21 GMT"}, {"version": "v2", "created": "Wed, 18 Jul 2007 10:11:01 GMT"}], "update_date": "2007-07-18", "authors_parsed": [["G\u00f6ller", "Stefan", ""], ["Nowotka", "Dirk", ""]]}, {"id": "0707.0744", "submitter": "Inge Bethke", "authors": "Jan Bergstra, Inge Bethke and Mark Burgess", "title": "A process algebra based framework for promise theory", "comments": "9 pages, 4 figures", "journal-ref": null, "doi": null, "report-no": "PRG0701", "categories": "cs.LO", "license": null, "abstract": "  We present a process algebra based approach to formalize the interactions of\ncomputing devices such as the representation of policies and the resolution of\nconflicts. As an example we specify how promises may be used in coming to an\nagreement regarding a simple though practical transportation problem.\n", "versions": [{"version": "v1", "created": "Thu, 5 Jul 2007 09:39:14 GMT"}], "update_date": "2007-07-06", "authors_parsed": [["Bergstra", "Jan", ""], ["Bethke", "Inge", ""], ["Burgess", "Mark", ""]]}, {"id": "0707.0890", "submitter": "Martin Bunder", "authors": "M. W. Bunder and W. M. J.Dekkers", "title": "Are there Hilbert-style Pure Type Systems?", "comments": "Accepted in Logical Methods in Computer Science", "journal-ref": "Logical Methods in Computer Science, Volume 4, Issue 1 (January 7,\n  2008) lmcs:839", "doi": "10.2168/LMCS-4(1:1)2008", "report-no": null, "categories": "cs.LO", "license": null, "abstract": "  For many a natural deduction style logic there is a Hilbert-style logic that\nis equivalent to it in that it has the same theorems (i.e. valid judgements\nwith empty contexts). For intuitionistic logic, the axioms of the equivalent\nHilbert-style logic can be propositions which are also known as the types of\nthe combinators I, K and S. Hilbert-style versions of illative combinatory\nlogic have formulations with axioms that are actual type statements for I, K\nand S. As pure type systems (PTSs)are, in a sense, equivalent to systems of\nillative combinatory logic, it might be thought that Hilbert-style PTSs (HPTSs)\ncould be based in a similar way. This paper shows that some PTSs have very\ntrivial equivalent HPTSs, with only the axioms as theorems and that for many\nPTSs no equivalent HPTS can exist. Most commonly used PTSs belong to these two\nclasses. For some PTSs however, including lambda* and the PTS at the basis of\nthe proof assistant Coq, there is a nontrivial equivalent HPTS, with axioms\nthat are type statements for I, K and S.\n", "versions": [{"version": "v1", "created": "Fri, 6 Jul 2007 00:22:59 GMT"}, {"version": "v2", "created": "Mon, 7 Jan 2008 09:36:01 GMT"}], "update_date": "2015-07-01", "authors_parsed": [["Bunder", "M. W.", ""], ["Dekkers", "W. M. J.", ""]]}, {"id": "0707.0926", "submitter": "Yves Bertot", "authors": "Yves Bertot (INRIA Sophia Antipolis)", "title": "Theorem proving support in programming language semantics", "comments": "Propos\\'e pour publication dans l'ouvrage \\`a la m\\'emoire de Gilles\n  Kahn", "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.LO cs.PL", "license": null, "abstract": "  We describe several views of the semantics of a simple programming language\nas formal documents in the calculus of inductive constructions that can be\nverified by the Coq proof system. Covered aspects are natural semantics,\ndenotational semantics, axiomatic semantics, and abstract interpretation.\nDescriptions as recursive functions are also provided whenever suitable, thus\nyielding a a verification condition generator and a static analyser that can be\nrun inside the theorem prover for use in reflective proofs. Extraction of an\ninterpreter from the denotational semantics is also described. All different\naspects are formally proved sound with respect to the natural semantics\nspecification.\n", "versions": [{"version": "v1", "created": "Fri, 6 Jul 2007 08:55:26 GMT"}, {"version": "v2", "created": "Tue, 10 Jul 2007 08:09:49 GMT"}], "update_date": "2007-07-10", "authors_parsed": [["Bertot", "Yves", "", "INRIA Sophia Antipolis"]]}, {"id": "0707.1266", "submitter": "Pierre-Yves Strub", "authors": "Fr\\'ed\\'eric Blanqui (INRIA Lorraine - LORIA), Jean-Pierre Jouannaud\n  (INRIA Futurs), Pierre-Yves Strub (INRIA Futurs)", "title": "Building Decision Procedures in the Calculus of Inductive Constructions", "comments": null, "journal-ref": "Dans 16th EACSL Annual Conference on Computer Science and Logic -\n  CSL 2007 (2007)", "doi": null, "report-no": null, "categories": "cs.LO", "license": null, "abstract": "  It is commonly agreed that the success of future proof assistants will rely\non their ability to incorporate computations within deduction in order to mimic\nthe mathematician when replacing the proof of a proposition P by the proof of\nan equivalent proposition P' obtained from P thanks to possibly complex\ncalculations. In this paper, we investigate a new version of the calculus of\ninductive constructions which incorporates arbitrary decision procedures into\ndeduction via the conversion rule of the calculus. The novelty of the problem\nin the context of the calculus of inductive constructions lies in the fact that\nthe computation mechanism varies along proof-checking: goals are sent to the\ndecision procedure together with the set of user hypotheses available from the\ncurrent context. Our main result shows that this extension of the calculus of\nconstructions does not compromise its main properties: confluence, subject\nreduction, strong normalization and consistency are all preserved.\n", "versions": [{"version": "v1", "created": "Mon, 9 Jul 2007 14:35:14 GMT"}], "update_date": "2007-07-10", "authors_parsed": [["Blanqui", "Fr\u00e9d\u00e9ric", "", "INRIA Lorraine - LORIA"], ["Jouannaud", "Jean-Pierre", "", "INRIA Futurs"], ["Strub", "Pierre-Yves", "", "INRIA Futurs"]]}, {"id": "0707.1372", "submitter": "Frederic Blanqui", "authors": "Fr\\'ed\\'eric Blanqui (INRIA Lorraine - LORIA)", "title": "Computability Closure: Ten Years Later", "comments": null, "journal-ref": "Dans Colloquium in honor of Jean-Pierre Jouannaud, 4600 (2007)", "doi": null, "report-no": null, "categories": "cs.LO", "license": null, "abstract": "  The notion of computability closure has been introduced for proving the\ntermination of higher-order rewriting with first-order matching by Jean-Pierre\nJouannaud and Mitsuhiro Okada in a 1997 draft which later served as a basis for\nthe author's PhD. In this paper, we show how this notion can also be used for\ndealing with beta-normalized rewriting with matching modulo beta-eta (on\npatterns \\`a la Miller), rewriting with matching modulo some equational theory,\nand higher-order data types (types with constructors having functional\nrecursive arguments). Finally, we show how the computability closure can easily\nbe turned into a reduction ordering which, in the higher-order case, contains\nJean-Pierre Jouannaud and Albert Rubio's higher-order recursive path ordering\nand, in the first-order case, is equal to the usual first-order recursive path\nordering.\n", "versions": [{"version": "v1", "created": "Tue, 10 Jul 2007 06:33:52 GMT"}], "update_date": "2007-07-11", "authors_parsed": [["Blanqui", "Fr\u00e9d\u00e9ric", "", "INRIA Lorraine - LORIA"]]}, {"id": "0707.1981", "submitter": "Wojciech Moczydlowski", "authors": "Wojciech Moczydlowski", "title": "A Normalizing Intuitionistic Set Theory with Inaccessible Sets", "comments": "To be published in Logical Methods in Computer Science", "journal-ref": "Logical Methods in Computer Science, Volume 3, Issue 3 (August 16,\n  2007) lmcs:837", "doi": "10.2168/LMCS-3(3:6)2007", "report-no": null, "categories": "cs.LO", "license": null, "abstract": "  We propose a set theory strong enough to interpret powerful type theories\nunderlying proof assistants such as LEGO and also possibly Coq, which at the\nsame time enables program extraction from its constructive proofs. For this\npurpose, we axiomatize an impredicative constructive version of\nZermelo-Fraenkel set theory IZF with Replacement and $\\omega$-many\ninaccessibles, which we call \\izfio. Our axiomatization utilizes set terms, an\ninductive definition of inaccessible sets and the mutually recursive nature of\nequality and membership relations. It allows us to define a weakly-normalizing\ntyped lambda calculus corresponding to proofs in \\izfio according to the\nCurry-Howard isomorphism principle. We use realizability to prove the\nnormalization theorem, which provides a basis for program extraction\ncapability.\n", "versions": [{"version": "v1", "created": "Fri, 13 Jul 2007 12:02:10 GMT"}, {"version": "v2", "created": "Thu, 16 Aug 2007 15:37:16 GMT"}, {"version": "v3", "created": "Tue, 8 Apr 2008 08:03:51 GMT"}], "update_date": "2015-07-01", "authors_parsed": [["Moczydlowski", "Wojciech", ""]]}, {"id": "0707.2562", "submitter": "Claude Tardif", "authors": "Benoit Larose, Cynthia Loten, Claude Tardif", "title": "A Characterisation of First-Order Constraint Satisfaction Problems", "comments": null, "journal-ref": "Logical Methods in Computer Science, Volume 3, Issue 4 (November\n  6, 2007) lmcs:1097", "doi": "10.2168/LMCS-3(4:6)2007", "report-no": null, "categories": "cs.LO cs.CC", "license": null, "abstract": "  We describe simple algebraic and combinatorial characterisations of finite\nrelational core structures admitting finitely many obstructions. As a\nconsequence, we show that it is decidable to determine whether a constraint\nsatisfaction problem is first-order definable: we show the general problem to\nbe NP-complete, and give a polynomial-time algorithm in the case of cores. A\nslight modification of this algorithm provides, for first-order definable\nCSP's, a simple poly-time algorithm to produce a solution when one exists. As\nan application of our algebraic characterisation of first order CSP's, we\ndescribe a large family of L-complete CSP's.\n", "versions": [{"version": "v1", "created": "Tue, 17 Jul 2007 16:23:45 GMT"}, {"version": "v2", "created": "Tue, 6 Nov 2007 10:18:41 GMT"}], "update_date": "2015-07-01", "authors_parsed": [["Larose", "Benoit", ""], ["Loten", "Cynthia", ""], ["Tardif", "Claude", ""]]}, {"id": "0707.3170", "submitter": "Vladimir Sazonov", "authors": "Vladimir Sazonov", "title": "Inductive Definition and Domain Theoretic Properties of Fully Abstract", "comments": "50 pages", "journal-ref": "Logical Methods in Computer Science, Volume 3, Issue 3 (September\n  10, 2007) lmcs:914", "doi": "10.2168/LMCS-3(3:7)2007", "report-no": null, "categories": "cs.LO", "license": null, "abstract": "  A construction of fully abstract typed models for PCF and PCF^+ (i.e., PCF +\n\"parallel conditional function\"), respectively, is presented. It is based on\ngeneral notions of sequential computational strategies and wittingly consistent\nnon-deterministic strategies introduced by the author in the seventies.\nAlthough these notions of strategies are old, the definition of the fully\nabstract models is new, in that it is given level-by-level in the finite type\nhierarchy. To prove full abstraction and non-dcpo domain theoretic properties\nof these models, a theory of computational strategies is developed. This is\nalso an alternative and, in a sense, an analogue to the later game strategy\nsemantics approaches of Abramsky, Jagadeesan, and Malacaria; Hyland and Ong;\nand Nickau. In both cases of PCF and PCF^+ there are definable universal\n(surjective) functionals from numerical functions to any given type,\nrespectively, which also makes each of these models unique up to isomorphism.\nAlthough such models are non-omega-complete and therefore not continuous in the\ntraditional terminology, they are also proved to be sequentially complete (a\nweakened form of omega-completeness), \"naturally\" continuous (with respect to\nexisting directed \"pointwise\", or \"natural\" lubs) and also \"naturally\"\nomega-algebraic and \"naturally\" bounded complete -- appropriate generalisation\nof the ordinary notions of domain theory to the case of non-dcpos.\n", "versions": [{"version": "v1", "created": "Sat, 21 Jul 2007 00:29:38 GMT"}, {"version": "v2", "created": "Fri, 7 Sep 2007 09:41:43 GMT"}, {"version": "v3", "created": "Mon, 10 Sep 2007 08:54:16 GMT"}], "update_date": "2015-07-01", "authors_parsed": [["Sazonov", "Vladimir", ""]]}, {"id": "0707.3205", "submitter": "Andrew Schumann", "authors": "Andrew Schumann, Florentin Smarandache", "title": "Neutrality and Many-Valued Logics", "comments": "119 pages", "journal-ref": "A. Schumann, F. Smarandache, Neutrality and Many-Valued Logics.\n  American Research Press, 2007", "doi": null, "report-no": null, "categories": "cs.LO cs.AI", "license": null, "abstract": "  In this book, we consider various many-valued logics: standard, linear,\nhyperbolic, parabolic, non-Archimedean, p-adic, interval, neutrosophic, etc. We\nsurvey also results which show the tree different proof-theoretic frameworks\nfor many-valued logics, e.g. frameworks of the following deductive calculi:\nHilbert's style, sequent, and hypersequent. We present a general way that\nallows to construct systematically analytic calculi for a large family of\nnon-Archimedean many-valued logics: hyperrational-valued, hyperreal-valued, and\np-adic valued logics characterized by a special format of semantics with an\nappropriate rejection of Archimedes' axiom. These logics are built as different\nextensions of standard many-valued logics (namely, Lukasiewicz's, Goedel's,\nProduct, and Post's logics). The informal sense of Archimedes' axiom is that\nanything can be measured by a ruler. Also logical multiple-validity without\nArchimedes' axiom consists in that the set of truth values is infinite and it\nis not well-founded and well-ordered. On the base of non-Archimedean valued\nlogics, we construct non-Archimedean valued interval neutrosophic logic INL by\nwhich we can describe neutrality phenomena.\n", "versions": [{"version": "v1", "created": "Sat, 21 Jul 2007 10:35:37 GMT"}], "update_date": "2007-07-24", "authors_parsed": [["Schumann", "Andrew", ""], ["Smarandache", "Florentin", ""]]}, {"id": "0707.3435", "submitter": "Joseph Y. Halpern", "authors": "Joseph Y. Halpern and Sabina Petride", "title": "A Knowledge-Based Analysis of Global Function Computation", "comments": null, "journal-ref": null, "doi": null, "report-no": null, "categories": "cs.DC cs.LO", "license": null, "abstract": "  Consider a distributed system N in which each agent has an input value and\neach communication link has a weight. Given a global function, that is, a\nfunction f whose value depends on the whole network, the goal is for every\nagent to eventually compute the value f(N). We call this problem global\nfunction computation. Various solutions for instances of this problem, such as\nBoolean function computation, leader election, (minimum) spanning tree\nconstruction, and network determination, have been proposed, each under\nparticular assumptions about what processors know about the system and how this\nknowledge can be acquired. We give a necessary and sufficient condition for the\nproblem to be solvable that generalizes a number of well-known results. We then\nprovide a knowledge-based (kb) program (like those of Fagin, Halpern, Moses,\nand Vardi) that solves global function computation whenever possible. Finally,\nwe improve the message overhead inherent in our initial kb program by giving a\ncounterfactual belief-based program that also solves the global function\ncomputation whenever possible, but where agents send messages only when they\nbelieve it is necessary to do so. The latter program is shown to be implemented\nby a number of well-known algorithms for solving leader election.\n", "versions": [{"version": "v1", "created": "Mon, 23 Jul 2007 18:49:28 GMT"}], "update_date": "2007-08-08", "authors_parsed": [["Halpern", "Joseph Y.", ""], ["Petride", "Sabina", ""]]}, {"id": "0707.3781", "submitter": "Paolo Liberatore", "authors": "Paolo Liberatore", "title": "Bijective Faithful Translations among Default Logics", "comments": "Removed one useless section", "journal-ref": null, "doi": "10.1093/logcom/ext073", "report-no": null, "categories": "cs.AI cs.LO", "license": null, "abstract": "  In this article, we study translations between variants of defaults logics\nsuch that the extensions of the theories that are the input and the output of\nthe translation are in a bijective correspondence. We assume that a translation\ncan introduce new variables and that the result of translating a theory can\neither be produced in time polynomial in the size of the theory or its output\nis polynomial in that size; we however restrict to the case in which the\noriginal theory has extensions. This study fills a gap between two previous\npieces of work, one studying bijective translations among restrictions of\ndefault logics, and the other one studying non-bijective translations between\ndefault logics variants.\n", "versions": [{"version": "v1", "created": "Wed, 25 Jul 2007 17:03:57 GMT"}, {"version": "v2", "created": "Mon, 30 Jul 2007 13:46:43 GMT"}], "update_date": "2021-04-12", "authors_parsed": [["Liberatore", "Paolo", ""]]}, {"id": "0707.3782", "submitter": "Andreas Blass", "authors": "Andreas Blass, Yuri Gurevich, Dean Rosenzweig, and Benjamin Rossman", "title": "Interactive Small-Step Algorithms I: Axiomatization", "comments": null, "journal-ref": "Logical Methods in Computer Science, Volume 3, Issue 4 (November\n  5, 2007) lmcs:1200", "doi": "10.2168/LMCS-3(4:3)2007", "report-no": null, "categories": "cs.LO", "license": null, "abstract": "  In earlier work, the Abstract State Machine Thesis -- that arbitrary\nalgorithms are behaviorally equivalent to abstract state machines -- was\nestablished for several classes of algorithms, including ordinary, interactive,\nsmall-step algorithms. This was accomplished on the basis of axiomatizations of\nthese classes of algorithms. Here we extend the axiomatization and, in a\ncompanion paper, the proof, to cover interactive small-step algorithms that are\nnot necessarily ordinary. This means that the algorithms (1) can complete a\nstep without necessarily waiting for replies to all queries from that step and\n(2) can use not only the environment's replies but also the order in which the\nreplies were received.\n", "versions": [{"version": "v1", "created": "Wed, 25 Jul 2007 17:04:26 GMT"}, {"version": "v2", "created": "Mon, 5 Nov 2007 10:56:47 GMT"}], "update_date": "2015-07-01", "authors_parsed": [["Blass", "Andreas", ""], ["Gurevich", "Yuri", ""], ["Rosenzweig", "Dean", ""], ["Rossman", "Benjamin", ""]]}, {"id": "0707.3789", "submitter": "Andreas Blass", "authors": "Andreas Blass, Yuri Gurevich, Dean Rosenzweig, and Benjamin Rossman", "title": "Interactive Small-Step Algorithms II: Abstract State Machines and\n  the<br> Characterization Theorem", "comments": null, "journal-ref": "Logical Methods in Computer Science, Volume 3, Issue 4 (November\n  5, 2007) lmcs:1201", "doi": "10.2168/LMCS-3(4:4)2007", "report-no": null, "categories": "cs.LO", "license": null, "abstract": "  In earlier work, the Abstract State Machine Thesis -- that arbitrary\nalgorithms are behaviorally equivalent to abstract state machines -- was\nestablished for several classes of algorithms, including ordinary, interactive,\nsmall-step algorithms. This was accomplished on the basis of axiomatizations of\nthese classes of algorithms. In Part I (Interactive Small-Step Algorithms I:\nAxiomatization), the axiomatization was extended to cover interactive\nsmall-step algorithms that are not necessarily ordinary. This means that the\nalgorithms (1) can complete a step without necessarily waiting for replies to\nall queries from that step and (2) can use not only the environment's replies\nbut also the order in which the replies were received. In order to prove the\nthesis for algorithms of this generality, we extend here the definition of\nabstract state machines to incorporate explicit attention to the relative\ntiming of replies and to the possible absence of replies. We prove the\ncharacterization theorem for extended abstract state machines with respect to\ngeneral algorithms as axiomatized in Part I.\n", "versions": [{"version": "v1", "created": "Wed, 25 Jul 2007 17:35:46 GMT"}, {"version": "v2", "created": "Mon, 5 Nov 2007 10:59:16 GMT"}], "update_date": "2015-07-01", "authors_parsed": [["Blass", "Andreas", ""], ["Gurevich", "Yuri", ""], ["Rosenzweig", "Dean", ""], ["Rossman", "Benjamin", ""]]}, {"id": "0707.4255", "submitter": "Iddo Tzameret", "authors": "Nachum Dershowitz and Iddo Tzameret", "title": "Complexity of Propositional Proofs under a Promise", "comments": "32 pages; a preliminary version appeared in the Proceedings of\n  ICALP'07", "journal-ref": "ACM Transactions on Computational Logic, 11(3):1-29, 2010;", "doi": null, "report-no": null, "categories": "cs.CC cs.LO", "license": null, "abstract": "  We study -- within the framework of propositional proof complexity -- the\nproblem of certifying unsatisfiability of CNF formulas under the promise that\nany satisfiable formula has many satisfying assignments, where ``many'' stands\nfor an explicitly specified function $\\Lam$ in the number of variables $n$. To\nthis end, we develop propositional proof systems under different measures of\npromises (that is, different $\\Lam$) as extensions of resolution. This is done\nby augmenting resolution with axioms that, roughly, can eliminate sets of truth\nassignments defined by Boolean circuits. We then investigate the complexity of\nsuch systems, obtaining an exponential separation in the average-case between\nresolution under different size promises:\n  1. Resolution has polynomial-size refutations for all unsatisfiable 3CNF\nformulas when the promise is $\\eps\\cd2^n$, for any constant $0<\\eps<1$.\n  2. There are no sub-exponential size resolution refutations for random 3CNF\nformulas, when the promise is $2^{\\delta n}$ (and the number of clauses is\n$o(n^{3/2})$), for any constant $0<\\delta<1$.\n", "versions": [{"version": "v1", "created": "Sat, 28 Jul 2007 18:36:01 GMT"}], "update_date": "2010-04-19", "authors_parsed": [["Dershowitz", "Nachum", ""], ["Tzameret", "Iddo", ""]]}]